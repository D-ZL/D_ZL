{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"Google: Bypass Result Page Redirect","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["/^https?://(?:www|encrypted|ipv[46])\\.google\\.[^/]+/(?:$|[#?]|search|webhp|imgres)/"],"orig_matches":["https://news.google.com/*","https://cse.google.com/cse/*"],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1512981251951},"enabled":true,"position":1,"file_url":"https://greasyfork.org/scripts/14150-google-%E7%BB%95%E8%BF%87%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E7%BD%91%E9%A1%B5%E9%93%BE%E6%8E%A5%E9%87%8D%E5%AE%9A%E5%90%91/code/Google%EF%BC%9A%E7%BB%95%E8%BF%87%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E7%BD%91%E9%A1%B5%E9%93%BE%E6%8E%A5%E9%87%8D%E5%AE%9A%E5%90%91.user.js","uuid":"c65f0816-cf1f-429d-a2a7-50681993d6f3","source":""},{"name":"gwdang","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["http://*.jd.com/*","https://*.jd.com/*","http://*.jd.hk/*","https://*.jd.hk/*","http://*.taobao.com/*","https://*.taobao.com/*","http://*.tmall.com/*","https://*.tmall.com/*","https://*.tmall.hk/*","http://*.yixun.com/*","http://*.51buy.com/*","http://*.yhd.com/*","http://*.suning.com/*","https://*.suning.com/*","http://*.dangdang.com/*","http://*.gome.com.cn/*","http://*.newegg.cn/*","http://*.paipai.com/*","https://*.amazon.com/*","https://*.amazon.cn/*","https://*.amazon.*/*","http://www.kjt.com/*","http://www.kaola.com/*","https://www.kaola.com/*","http://www.kaola.com.hk/*","https://www.kaola.com.hk/*","http://www.tcl.com/*","http://shop.hisense.com/*","http://*.oppo.com/*","http://shop.vivo.com.cn/*","http://www.ebay.com/*","http://t.dianping.com/*","http://*.nuomi.com/*","http://*.meituan.com/*","https://yao.95095.com/*","http://*.feiniu.com/*","http://*.meilishuo.com/*","http://*.mogujie.com/*","http://shop.coolpad.cn/*","http://*.sephora.cn/*","http://*.yesmywine.com/*","http://*.yiguo.com/*","http://*.wanggou.com/*","http://mall.jia.com/*","http://weigou.baidu.com/*","http://*.mi.com/*","http://shop.letv.com/*","http://*.handu.com/*","http://*.taoshu.com/*","http://*.1688.com/*","http://*.muyingzhijia.com/*","http://*.vmall.com/*","http://*.xiji.com/*","http://*.xijie.com/*","http://www.yougou.com/*","http://www.okbuy.com/*","http://*.001town.com/*","http://*.01goo.com/*","http://*.03l.cn/*","http://*.133china.com/*","http://*.139shop.com/*","http://yxp.163.com/*","http://*.168dg.com/*","http://*.186mall.com/*","http://*.18to82.com/*","http://*.1j.cn/*","http://*.22shop.com/*","http://*.24dq.com/*","http://*.24quan.com/*","http://*.258sd.com/*","http://*.2688.com/*","http://*.360buy.com/*","http://*.360hqb.com/*","http://*.360kxr.com/*","http://*.360mart.com/*","http://*.365goba.com/*","http://*.38hzt.com/*","http://*.39ty.com/*","http://*.4inlook.com/*","http://*.5188bag.com/*","http://*.51buy.com/*","http://51buy.com/","http://*.51dg.com/*","http://*.51eng.com/*","http://*.51sheyuan.com/*","http://*.51youpin.com/*","http://*.520eye.com/*","http://*.52shehua.com/*","http://*.5366.com/*","http://t.58.com/*","http://*.58hua.com/*","http://*.5lux.com/*","http://*.5yth.com/*","http://*.6919.com/*","http://*.6sbuy.com/*","http://*.77toy.com/*","http://*.7caihua.com/*","http://*.7cv.com/*","http://*.7sev.com/*","http://*.80ebus.com/*","http://*.8801.net/*","http://*.919it.com/*","http://*.929.cn/*","http://*.942radio.com/*","http://b2c.958shop.com/*","http://*.96128.com/*","http://*.99pto.com/*","http://*.99read.com/*","http://*.9dadao.com/*","http://*.9you.com/*","http://*.afffff.com/*","http://*.ai356.com/*","http://*.aibang.com/*","http://*.aidai.com/*","http://*.aiju.com/*","http://*.aim36.com/*","http://*.aimer.com.cn/*","http://*.aiyingshi.com/*","http://*.aizhigu.com.cn/*","http://*.amazon.cn/*","http://*.anni.com/*","http://*.apabi.com/*","http://*.augshow.com/*","http://*.autosup.com/*","http://*.baiyjk.com/*","http://*.bbesports.com/*","http://*.bookuu.com/*","http://*.bearbuy.com.cn/*","http://*.beautyplus.cn/*","http://*.beifabook.com/*","http://*.benq.com.cn/*","http://*.best1.com/*","http://*.biaoshang.hk/*","http://*.binggo.com/*","http://*.bloves.com/*","http://*.bobomobi.com/*","http://*.bookschina.com/*","http://*.boqii.com/*","http://*.buding.com/*","http://*.buy007.com/*","http://*.buy361.cn/*","http://*.buyfine.net/*","http://*.buynow.com.cn/*","http://*.caistv.com/*","http://*.caomeipai.com/*","http://*.car339.com.cn/*","http://*.car6688.com/*","http://*.carrefour.com.cn/*","http://*.cdream.com/*","http://*.ceetop.com/*","http://*.chashu.cn/*","http://*.chedangjia.com/*","http://*.chengdecs.com/*","http://*.china-gift.com/*","http://*.china-pub.com/*","http://emall.chinapay.com/*","http://*.chinayrs.com/*","http://*.chris-tina.com/*","http://*.clady.com/*","http://*.clinique.com.cn/*","http://*.cncard.com/*","http://*.cnfse.com/*","http://*.colebuy.com/*","http://*.conslive.com/*","http://*.coo8.com/*","http://*.cosize.com/*","http://*.cosme-de.com/*","http://*.ctrip.com/*","http://*.cw100.com/*","http://*.d1.com.cn/*","http://*.daisonghua.com/*","http://*.dangdang.com/*","http://*.daoyao.com/*","http://*.woyo.com/*","http://*.dazhe.cn/*","http://*.dazhongdianqi.com.cn/*","http://*.dianpu.com/*","http://*.didatuan.com/*","http://*.disiqu.cn/*","http://*.dixintong.com/*","http://*.doulaimai.com/*","http://*.dsgoo.com/*","http://*.dtoto.com/*","http://*.duhub.com/*","http://*.duoding.com/*","http://*.e-giordano.com/*","http://*.e-lining.com/*","http://*.e-my.com.cn/*","http://*.easy361.com/*","http://*.ebaimi.com/*","http://*.eboxbuy.com/*","http://*.ebtea.com/*","http://*.ecosme.cn/*","http://*.efeihu.com/*","http://*.ehaier.com/*","http://*.ejia.com/*","http://*.enet.com.cn/*","http://*.enjoyeye.com/*","http://*.epetbar.com/*","http://*.et5155.com/*","http://*.f508.com/*","http://*.fclub.cn/*","http://*.flowerby.com/*","http://*.flowercn.com/*","http://*.gap.cn/*","http://*.godida.com/*","http://*.gome.com.cn/*","http://*.goocctv.cn/*","http://*.goodjd.com/*","http://*.goodnourish.cn/*","http://*.gou3618.com/*","http://*.gouduo.com/*","http://*.gouwulian.com/*","http://*.gouxie.com/*","http://*.goyahome.com/*","http://*.guobuy.com/*","http://*.guopi.com/*","http://*.guuoo.com/*","http://*.hany.cn/*","http://*.happigo.com/*","http://*.hit168.com.cn/*","http://*.hitao.com/*","http://*.homeold.cn/*","http://*.homevv.com/*","http://*.hongkouzi.com/*","http://*.hopebook.net/*","http://*.huachu.com.cn/*","http://*.huimeifang.cn/*","http://*.hw2008.cn/*","http://*.icaifeng.com/*","http://*.icson.com/*","http://*.ideemall.com/*","http://*.ihush.com/*","http://*.iloveyou.com.cn/*","http://*.ilovezuan.com/*","http://*.imeelee.com/*","http://*.inoble.com.cn/*","http://*.inshion.com/*","http://*.ishop.cn/*","http://*.it88.com.cn/*","http://*.itzm.com/*","http://*.iyuyou.com/*","http://*.jiajiajk.com/*","http://*.jiaju.com/*","http://*.jiatx.com/*","http://*.jiayougo.com/*","http://*.jinbaidu.com/*","http://*.jmeishop.com/*","http://*.joyran.com/*","http://*.jsbcmall.com/*","http://*.jtlhome.com/*","http://*.jumei.com/*","http://*.junph.com/*","http://*.justonline.cn/*","http://*.jxdyf.com/*","http://*.k121.com/*","http://*.kadang.com/*","http://*.keede.com.cn/*","http://*.kela.cn/*","http://*.kuaishubao.com/*","http://*.kxtkx.com/*","http://*.ladypk.com/*","http://*.laeibelle.com/*","http://*.lafaso.com/*","http://*.lamiu.com/*","http://*.lancome.com.cn/*","http://*.lashou.com/*","http://*.ledaojia.com/*","http://*.leftlady.com/*","http://*.lenovo.com.cn/*","http://*.lens2005.com/*","http://*.letao.com/*","http://*.leyou.com/*","http://*.leyou.com.cn/*","http://*.lijiababy.com.cn/*","http://*.lijigou.com/*","http://*.likebuy.com/*","http://*.likeface.com/*","http://*.lingshi.com/*","http://*.liqunshop.com/*","http://*.liyi99.com/*","http://*.locknlock.com.cn/*","http://*.lovo.cn/*","http://*.luckigo.com/*","http://*.lusen.com/*","http://*.lyceem.com/*","http://*.m18.com/*","http://*.maichawang.com/*","http://*.maimaike.cn/*","http://*.mamabb.com/*","http://*.mamahao.cn/*","http://*.mangocity.com/*","http://*.manzuo.com/*","http://*.masamaso.com/*","http://*.maxfunbuy.com/*","http://*.maywon.com/*","http://*.mbaobao.com/*","http://*.meici.com/*","http://*.meilele.com/*","http://*.meilieasy.com/*","http://*.meituan.com/*","http://*.menglu.com/*","http://*.mengmai.com/*","http://*.minibuy.com/*","http://*.mmgw.cn/*","http://*.mmuses.com/*","http://*.mobi001.com/*","http://*.mokamall.com/*","http://*.momoyoyo.com/*","http://*.montrosechina.com/*","http://*.mooiee.com/*","http://*.moonbasa.com/*","http://*.motostore.com.cn/*","http://*.mpshow.com.cn/*","http://*.naccoo.com/*","http://*.naguu.com/*","http://*.nayao.com/*","http://*.newegg.com.cn/*","http://*.newgo5.com/*","http://*.nmlch.com/*","http://*.no5.com.cn/*","http://*.nokia.com.cn/*","http://*.nonmin88.com/*","http://*.obuy.cn/*","http://*.ofcard.com/*","http://*.ogage.cn/*","http://*.okbig.com/*","http://*.okbuy.com/*","http://*.okddy.com/*","http://*.okgolf.cn/*","http://*.olomo.com/*","http://*.olympus.com.cn/*","http://*.olymsports.com/*","http://*.ono.com.cn/*","http://*.orange3c.com/*","http://*.ouku.com/*","http://*.ourtasty.com/*","http://*.outice.com/*","http://*.oyego.com/*","http://*.paixie.net/*","http://*.palcent.com/*","http://*.ocj.com.cn/*","http://*.pb89.com/*","http://*.pcarm.com/*","http://*.petyoo.com/*","http://*.pgbao.com/*","http://*.piaoliang100.com/*","http://*.pirateship.com.cn/*","http://*.popyj.com/*","http://*.pupai.cn/*","http://*.purcotton.com/*","http://*.qianxun.com/*","http://*.qingci.com/*","http://*.qinqinbaby.com/*","http://*.qmango.com/*","http://*.qumei.com/*","http://*.quwan.com/*","http://*.qxian.com/*","http://*.rayi.cn/*","http://*.redbaby.com.cn/*","http://*.robam.com/*","http://*.salala.com.cn/*","http://*.samsclub.cn/*","http://*.sanfo.com/*","http://*.sapo.com.hk/*","http://*.sasa.com/*","http://*.sasacity.com/*","http://*.sawbuy.com/*","http://*.shanghai-sports.com/*","http://*.shentop.com/*","http://*.shishangqiyi.com/*","http://*.shjdq.com/*","http://*.shnn.com/*","http://*.shopin.net/*","http://*.shoubiao.com.cn/*","http://*.sigo.cn/*","http://mall.sina.com.cn/*","http://*.sinobuy.cn/*","http://*.skcoo.com/*","http://*.skomart.com/*","http://*.snyun.com/*","http://*.sonmai.cn/*","http://*.sport2008.com.cn/*","http://*.strawberrynet.com/*","http://*.suning.com/*","http://*.sz-esun.com/*","http://*.tao3c.com/*","http://item.taobao.com/*","http://*.taoxie.cn/*","http://*.the365.com/*","http://*.thinkshop.cn/*","http://*.tian10.com/*","http://*.tiantian.com/*","http://*.junph.com/*","http://*.tieyou.com/*","http://detail.tmall.com/*","http://*.togj.com/*","http://*.tooogooo.com/*","http://*.toy90.com/*","http://*.toys365.com/*","http://*.tpy100.com/*","http://*.tuniu.com/*","http://*.tztart.com/*","http://*.ugou.cn/*","http://*.uipmall.com/*","http://*.uiyi.cn/*","http://*.ushan.cn/*","http://*.uushouji.com/*","http://*.uya100.com/*","http://*.vaakav.com/*","http://*.vafox.com/*","http://*.vancl.com/*","http://*.vcotton.com/*","http://*.veedl.com/*","http://*.vegoos.com/*","http://*.venusveil.com/*","http://*.veryok.cn/*","http://*.viccol.com/*","http://*.vipshop.com/*","http://*.vipstore.com/*","http://*.vivian.cn/*","http://*.vjia.com/*","http://*.vnasi.com/*","http://*.voipyeah.com/*","http://*.w1.cn/*","http://*.waipowang.com/*","http://*.wangshanghai.com/*","http://*.wg365.com/*","http://*.winenice.com/*","http://*.wl.cn/*","http://*.womai.com/*","http://*.woye.com/*","http://*.wtaotao.com/*","http://*.wumeiwang.com/*","http://*.x-playboy.com/*","http://*.xiaokang.com/*","http://*.xiaozhuren.com/*","http://*.xinbaigo.com/*","http://*.xindou.com/*","http://*.xing800.com/*","http://*.xinhuabookstore.com/*","http://*.xiu.com/*","http://*.xtpo.cn/*","http://*.xzuan.com/*","http://*.yaja.com.cn/*","http://*.yaofang.cn/*","http://*.yasai.cn/*","http://*.yeecare.com/*","http://buy.yesky.com/*","http://*.yesmytea.com/*","http://*.yesmywine.com/*","http://*.yide.com/*","http://*.yifu.com/*","http://*.yihaodian.com/*","http://*.yintai.com/*","http://*.yinyuehe.net/*","http://*.yjcs.cn/*","http://*.yobrand.com/*","http://*.yoger.com.cn/*","http://*.yoho.cn/*","http://*.yongle.com.cn/*","http://*.yougou.com/*","http://*.youjk.com/*","http://*.yoyo18.com/*","http://*.yumaoclub.com/*","http://*.yyosso.com/*","http://*.zbird.com/*","http://*.zgcbb.com/*","http://*.zm7.cn/*","http://*.zopo.com/*","http://*.ibuying.com/*","http://*.33go.com.cn/*","http://*.xijie.com/*","http://*.nop.cn/*","http://*.asyp.com/*","http://*.sparty.cn/*","http://*.yizhedian.com/*","http://*.lvhezi.com/*","http://*.aishangbaobao.com/*","http://*.sportica.cn/*","http://*.jstsilk.cn/*","http://*.camel.com.cn/*","http://*.cottonpop.net/*","http://*.hyj.com/*","http://*.myxiequ.com/*","http://*.mfplaza.com/*","http://*.do93.com/*","http://*.3guo.cn/*","http://*.yaqifushi.com/*","http://*.trura.com/*","http://*.lbaobao.cn/*","http://*.xiutuan.com/*","http://*.usashopcn.com/*","http://*.ihaveu.com/*","http://*.vipku.com/*","http://*.vipchina.com/*","http://*.fanrry.cn/*","http://*.lesunvip.com/*","http://*.nala.com.cn/*","http://*.miqi.cn/*","http://*.meiribuy.com/*","http://*.pufung.com/*","http://*.xiaoye.com/*","http://*.hmeili.com/*","http://*.oulybuy.com/*","http://*.meifenzi.com/*","http://*.caomeishop.com/*","http://*.meifu360.com/*","http://*.bapashop.com/*","http://*.bulangxiongdi.com/*","http://*.gusubuy.com/*","http://*.opearl.net/*","http://*.ruci.cn/*","http://*.rax.cn/*","http://*.jiuxian.com/*","http://*.maimaicha.com/*","http://*.pinwine.cn/*","http://*.meiweidao.com/*","http://*.okliang.com/*","http://*.365wine.com/*","http://*.jjlg.com.cn/*","http://*.bianlishe.com/*","http://*.epkmall.com/*","http://*.gdcct.com/*","http://*.500ccc.com/*","http://*.me361.com/*","http://*.malatamobile.com/*","http://*.trioo.com/*","http://*.oohdear.com/*","http://*.yaahe.cn/*","http://*.easeeyes.com/*","http://*.dbox.cn/*","http://*.haotehui.com/*","http://*.m6go.com/*","http://*.bianyigo.com/*","http://*.okjee.com/*","http://*.mygeek.cn/*","http://*.tbb.cn/*","http://*.ushare360.com/*","http://*.gqt168.com/*","http://*.konjoy.com/*","http://*.aoliz.com/*","http://*.jianianle.com/*","http://*.akajia.com/*","http://*.miqi.com.cn/*","http://*.lehuimai.com/*","http://*.lifevc.com/*","http://*www.ouku.com/","http://nuomi.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1512981251975},"enabled":true,"position":2,"file_url":"https://greasyfork.org/scripts/14466-%E8%B4%AD%E7%89%A9%E5%85%9A%E6%AF%94%E4%BB%B7%E5%B7%A5%E5%85%B7/code/%E8%B4%AD%E7%89%A9%E5%85%9A%E6%AF%94%E4%BB%B7%E5%B7%A5%E5%85%B7.user.js","uuid":"5798ff4f-8510-459c-ac62-e880469923c8","source":""},{"name":"為什麼你們就是不能加個空格呢？","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1512981251979},"enabled":true,"position":3,"file_url":"https://greasyfork.org/scripts/2185-%E7%82%BA%E4%BB%80%E9%BA%BC%E4%BD%A0%E5%80%91%E5%B0%B1%E6%98%AF%E4%B8%8D%E8%83%BD%E5%8A%A0%E5%80%8B%E7%A9%BA%E6%A0%BC%E5%91%A2/code/%E7%82%BA%E4%BB%80%E9%BA%BC%E4%BD%A0%E5%80%91%E5%B0%B1%E6%98%AF%E4%B8%8D%E8%83%BD%E5%8A%A0%E5%80%8B%E7%A9%BA%E6%A0%BC%E5%91%A2%EF%BC%9F.user.js","uuid":"1b09c190-b99f-4e0f-b1dd-7a459943f088","source":""},{"name":"Bypass Wait, Code & Login on Websites","options":{"awareOfChrome":true,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_prototypes":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["http://localhost.cuwcl4c/*","http://jixunmoe.github.io/*","http://123564.com/*","http://m.123564.com/*","http://5xfile.com/*","http://www.5xfile.com/*","http://yun.baidu.com/*","http://pan.baidu.com/*","http://howfile.com/*","http://*.howfile.com/*","http://jkpan.cc/*","http://*.jkpan.cc/*","http://namipan.cc/*","http://*.namipan.cc/*","http://10pan.cc/*","http://*.10pan.cc/*","http://66yp.cc/*","http://*.66yp.cc/*","http://123wzwp.com/*","http://*.123wzwp.com/*","http://hiyp.cc/*","http://*.hiyp.cc/*","http://jkpan.cc/*","http://*.jkpan.cc/*","http://webhd.xuite.net/*","http://sync.hamicloud.net/*","http://www.yimuhe.com/*","http://douban.fm/*","https://douban.fm/*","http://moe.fm/*","http://music.163.com/*","https://music.163.com/*","http://www.1ting.com/*","http://www.23356.com/*","http://www.app-echo.com/*","http://web.kugou.com/*","https://jixunmoe.github.io/cuwcl4c/config/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"CUWCL4C":"s{\"version\":1,\"bDiaplayLog\":true,\"bUseCustomRules\":false,\"dAria_auth\":0,\"dAria_port\":6800,\"dUriType\":0,\"sAria_dir\":\"D:\\\\Download\\\\\",\"sAria_host\":\"127.0.0.1\",\"sAria_pass\":\"\",\"sAria_user\":\"\",\"sCustomRule\":\"\"}"},"ts":1512981251987},"enabled":true,"position":4,"file_url":"https://greasyfork.org/scripts/2600-%E8%B7%B3%E8%BF%87%E7%BD%91%E7%AB%99%E7%AD%89%E5%BE%85-%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8F%8A%E7%99%BB%E5%BD%95/code/%E8%B7%B3%E8%BF%87%E7%BD%91%E7%AB%99%E7%AD%89%E5%BE%85%E3%80%81%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8F%8A%E7%99%BB%E5%BD%95.user.js","uuid":"b11f85fc-9f3f-43c3-b1b6-3671fe3d4695","source":""},{"name":"Anti-Adblock Killer | Reek","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":true,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["http://*/*","https://*/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"nextchecklist":"s1605165979642","nextcheckupdate":"s1605684379983"},"ts":1512981251993},"enabled":true,"position":5,"file_url":"https://raw.githubusercontent.com/reek/anti-adblock-killer/master/anti-adblock-killer.user.js","uuid":"ec693dec-33cc-4a51-8a5d-0325972c723e","source":""},{"name":"iZhihu","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["http://www.zhihu.com/*","https://www.zhihu.com/*"],"orig_matches":["http://www.zhihu.com/*","https://www.zhihu.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1512981252000},"enabled":true,"position":6,"file_url":"https://greasyfork.org/scripts/350-izhihu/code/iZhihu.user.js","uuid":"a3402b39-10fd-40e9-9ee5-c72302d817c7","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBpWmhpaHUKLy8gQG5hbWVzcGFjZSAgICBodHRwczovL2dpdGh1Yi5jb20vdW5vZ3ovaXpoaWh1Ci8vIEB2ZXJzaW9uICAgICAgMi4xMy4zCi8vIEBkZXNjcmlwdGlvbiAg55+l5LmO5o+S5Lu2Ci8vIEBtYXRjaCAgICAgICAgaHR0cDovL3d3dy56aGlodS5jb20vKgovLyBAaW5jbHVkZSAgICAgIGh0dHA6Ly93d3cuemhpaHUuY29tLyoKLy8gQG1hdGNoICAgICAgICBodHRwczovL3d3dy56aGlodS5jb20vKgovLyBAaW5jbHVkZSAgICAgIGh0dHBzOi8vd3d3LnpoaWh1LmNvbS8qCi8vIEByZXF1aXJlICAgICAgaHR0cDovL2Nkbi5zdGF0aWNmaWxlLm9yZy9qcXVlcnkvMS44LjIvanF1ZXJ5Lm1pbi5qcwovLyBAcmVxdWlyZSAgICAgIGh0dHA6Ly9jZG4uc3RhdGljZmlsZS5vcmcvaUNoZWNrLzEuMC4xL2ljaGVjay5taW4uanMKLy8gQHJlc291cmNlICAgICBqcVVJX0NTUyBodHRwOi8vY2RuLnN0YXRpY2ZpbGUub3JnL2lDaGVjay8xLjAuMS9za2lucy9zcXVhcmUvYmx1ZS5jc3MKLy8gQHJlc291cmNlICAgICB1aS1iZ19pY2hlY2stc2tpbl9zcXVhcmVfYmx1ZSBodHRwOi8vY2RuLnN0YXRpY2ZpbGUub3JnL2lDaGVjay8xLjAuMS9za2lucy9zcXVhcmUvYmx1ZS5wbmcKLy8gQHJlc291cmNlICAgICB1aS1iZ19pY2hlY2stc2tpbl9zcXVhcmVfYmx1ZTJ4IGh0dHA6Ly9jZG4uc3RhdGljZmlsZS5vcmcvaUNoZWNrLzEuMC4xL3NraW5zL3NxdWFyZS9ibHVlQDJ4LnBuZwovLyBAcmVxdWlyZSAgICAgIGh0dHA6Ly9jZG4uc3RhdGljZmlsZS5vcmcvanF1ZXJ5dWkvMS4xMC40L2pxdWVyeS11aS5taW4uanMKLy8gQHJlcXVpcmUgICAgICBodHRwOi8vY2RuLnN0YXRpY2ZpbGUub3JnL3B1cmwvMi4zLjEvcHVybC5taW4uanMKLy8gQHJlcXVpcmUgICAgICBodHRwOi8vY2RuLnN0YXRpY2ZpbGUub3JnL3VuZGVyc2NvcmUuanMvMS42LjAvdW5kZXJzY29yZS1taW4uanMKLy8gQGdyYW50ICAgICAgICBHTV94bWxIdHRwUmVxdWVzdAovLyBAZ3JhbnQgICAgICAgIEdNX2FkZFN0eWxlCi8vIEBncmFudCAgICAgICAgR01fZ2V0UmVzb3VyY2VUZXh0Ci8vIEBncmFudCAgICAgICAgR01fZ2V0UmVzb3VyY2VVUkwKLy8gQGljb24gICAgICAgICBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vdW5vZ3ovaXpoaWh1L2RldmVsb3AvbWlzYy94cGktY29uZmlnL2ljb242NC5wbmcKLy8gQGNvcHlyaWdodCAgICAyMDE1KywgQOmSouebhemDreWtkCBA5YiY5YuHIEDloqjno4oKLy8gPT0vVXNlclNjcmlwdD09Cgp2YXIganFVSV9Dc3NTcmMgPSBHTV9nZXRSZXNvdXJjZVRleHQoImpxVUlfQ1NTIikKR01fYWRkU3R5bGUgKGpxVUlfQ3NzU3JjLnJlcGxhY2UoJ3VybChibHVlJywgJ3VybChodHRwOi8vY2RuLnN0YXRpY2ZpbGUub3JnL2lDaGVjay8xLjAuMS9za2lucy9zcXVhcmUvYmx1ZScpKTsKCnZhciB2ZXJzaW9uPScyLjEzLjMnOwp2YXIgdXBkYXRlRGF0ZT0nMjAxNi00LTI1JzsKCmlmICggdHlwZW9mIHVuc2FmZVdpbmRvdyA9PT0gInVuZGVmaW5lZCIpIHsKICAgIHVuc2FmZVdpbmRvdyAgICA9ICggZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBkdW1teUVsZW0gICA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTsKICAgICAgICBkdW1teUVsZW0ub25jbGljaz1mdW5jdGlvbigpe3JldHVybiB3aW5kb3c7fTsKICAgICAgICByZXR1cm4gZHVtbXlFbGVtLm9uY2xpY2sgKCk7CiAgICB9ICkgKCk7Cn0KCi8v5Li75YWl5Y+jCi8vJChmdW5jdGlvbiBtYWluKCl7CgoKLyoqCiAqIEBjbGFzcyBVdGlscyDovoXliqnnsbsKICovCmZ1bmN0aW9uIHV0aWxzKCl7Cn07Cgp2YXIgY2ZnRGVmYXVsdCA9IHsKICAgICdjb21tZW50X3NpZGViYXInOiB0cnVlCiAgLCAnYW5zd2VyX29yZGVyQnlUaW1lJzogZmFsc2UKICAsICdBdXRob3JMaXN0JzpmYWxzZQogICwgJ1Nob3dDb21tZW50Jzp0cnVlCiAgLCAnSG9tZUxheW91dCc6ZmFsc2UKICAsICdRdWlja0Zhdm8nOnRydWUKICAsICdRdWlja0Zhdm9QaW5uZWQnOnt9CiAgLCAnQXV0aG9yUmVhcic6ZmFsc2UKICAsICdIb21lTm90aSc6ZmFsc2UKICAsICdRdWlja0Jsb2NrJzpmYWxzZQogICwgJ05vdGk3Jzp0cnVlCiAgLCAnSG9tZUZlZWRzQ29sdW1ucyc6ZmFsc2UKICAsICdSaWdodENvbW1lbnRfQXV0b1Njcm9sbFBhZ2VXaGVuQ2xvc2luZyc6dHJ1ZQogICwgJ1RvcE5hdkF1dG9Gb2xkJzpmYWxzZQp9OwogIAovKioKICog6K+75Y+W6YWN572uCiAqLwp1dGlscy5nZXRDZmcgPSBmdW5jdGlvbihrZXkpewogIGlmKCFrZXkpcmV0dXJuIGZhbHNlOwogIHZhciBjZmcgPSAkLmV4dGVuZChjZmdEZWZhdWx0LCB0aGlzLmdldFZhbHVlKCdpemhpaHUnLGNmZ0RlZmF1bHQpKTsKICByZXR1cm4ga2V5ID8gY2ZnW2tleV0gOiBjZmc7Cn07Cgp1dGlscy5zZXRDZmcgPSBmdW5jdGlvbihrZXksdmFsdWUpewogIGlmKCFrZXkpcmV0dXJuOwogIHZhciBjZmcgPSAkLmV4dGVuZChjZmdEZWZhdWx0LCB0aGlzLmdldFZhbHVlKCdpemhpaHUnLGNmZ0RlZmF1bHQpKTsKICBjZmdba2V5XT12YWx1ZTsKICB0aGlzLnNldFZhbHVlKCdpemhpaHUnLGNmZyk7Cn07CgovKioKICog6K+75Y+W5a2Y5YKoCiAqLwp1dGlscy5nZXRWYWx1ZSA9IGZ1bmN0aW9uKGtleSwgZGVmYXVsdFZhbHVlKXsKICAgIHZhciB2PXVuc2FmZVdpbmRvdy5sb2NhbFN0b3JhZ2Vba2V5XTsKICAgIGlmKHYpCiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uodik7CiAgICBlbHNlCiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTsKfTsKCi8qKgogKiDlhpnlhaXlrZjlgqgKICovCnV0aWxzLnNldFZhbHVlID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSl7CiAgdW5zYWZlV2luZG93LmxvY2FsU3RvcmFnZVtrZXldID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpOwp9OwoKLyoqCiAqIOWIoOmZpOWtmOWCqAogKi8KdXRpbHMuZGVsZXRlVmFsdWUgPSBmdW5jdGlvbihrZXkpewogIHJldHVybiBkZWxldGUgdW5zYWZlV2luZG93LmxvY2FsU3RvcmFnZVtrZXldOwp9OwoKdXRpbHMudHJhbnNmZXJPbGRDZmc9ZnVuY3Rpb24oKXsKICAgIHZhciBvbGRIb21lTGF5b3V0ID0gdW5zYWZlV2luZG93LmxvY2FsU3RvcmFnZVsnaXpoX0hvbWVMYXlvdXQnXQogICAgICAsIG9sZEF1dGhvckxpc3QgPSB1bnNhZmVXaW5kb3cubG9jYWxTdG9yYWdlWydpemhfQXV0aG9yTGlzdCddCiAgICAgICwgb2xkU2hvd0NvbW1lbnQgPSB1bnNhZmVXaW5kb3cubG9jYWxTdG9yYWdlWydpemhfU2hvd0NvbW1lbnQnXQogICAgICAsIG9sZFF1aWNrRmF2byA9IHVuc2FmZVdpbmRvdy5sb2NhbFN0b3JhZ2VbJ2l6aF9RdWlja0Zhdm8nXQogICAgICAsIG9sZEF1dGhvclJlYXIgPSB1bnNhZmVXaW5kb3cubG9jYWxTdG9yYWdlWydpemhfQXV0aG9yUmVhciddCiAgICAgICwgb2xkSG9tZU5vdGkgPSB1bnNhZmVXaW5kb3cubG9jYWxTdG9yYWdlWydpemhfSG9tZU5vdGknXQogICAgOwogICAgaWYob2xkSG9tZUxheW91dCl7CiAgICAgICAgaXpoSG9tZUxheW91dD1vbGRIb21lTGF5b3V0OwogICAgICAgIHVuc2FmZVdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnaXpoX0hvbWVMYXlvdXQnKTsKICAgICAgICB0aGlzLnNldENmZygnSG9tZUxheW91dCcsaXpoSG9tZUxheW91dCk7CiAgICB9CiAgICBpZihvbGRBdXRob3JMaXN0KXsKICAgICAgICBpemhBdXRob3JMaXN0PW9sZEF1dGhvckxpc3Q7CiAgICAgICAgdW5zYWZlV2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdpemhfQXV0aG9yTGlzdCcpOwogICAgICAgIHRoaXMuc2V0Q2ZnKCdBdXRob3JMaXN0JyxpemhBdXRob3JMaXN0KTsKICAgIH0KICAgIGlmKG9sZFNob3dDb21tZW50KXsKICAgICAgICBpemhSaWdodENvbW1lbnQ9b2xkU2hvd0NvbW1lbnQ7CiAgICAgICAgdW5zYWZlV2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdpemhfU2hvd0NvbW1lbnQnKTsKICAgICAgICB0aGlzLnNldENmZygnU2hvd0NvbW1lbnQnLGl6aFJpZ2h0Q29tbWVudCk7CiAgICB9CiAgICBpZihvbGRRdWlja0Zhdm8pewogICAgICAgIGl6aFF1aWNrRmF2bz1vbGRRdWlja0Zhdm87CiAgICAgICAgdW5zYWZlV2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdpemhfUXVpY2tGYXZvJyk7CiAgICAgICAgdGhpcy5zZXRDZmcoJ1F1aWNrRmF2bycsaXpoUXVpY2tGYXZvKTsKICAgIH0KICAgIGlmKG9sZEF1dGhvclJlYXIpewogICAgICAgIGl6aEF1dGhvclJlYXI9b2xkQXV0aG9yUmVhcjsKICAgICAgICB1bnNhZmVXaW5kb3cubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ2l6aF9BdXRob3JSZWFyJyk7CiAgICAgICAgdGhpcy5zZXRDZmcoJ0F1dGhvclJlYXInLGl6aEF1dGhvclJlYXIpOwogICAgfQogICAgaWYob2xkSG9tZU5vdGkpewogICAgICAgIGl6aEhvbWVOb3RpPW9sZEhvbWVOb3RpOwogICAgICAgIHVuc2FmZVdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnaXpoX0hvbWVOb3RpJyk7CiAgICAgICAgdGhpcy5zZXRDZmcoJ0hvbWVOb3RpJyxpemhIb21lTm90aSk7CiAgICB9Cgp9OwoKCi8qKgogKiBAbWV0aG9kIGZvcm1hdFN0cgogKgogKiDmoLzlvI/ljJblrZfnrKbkuLLmqKHniYgs5pSv5oyBMuenjeagvOW8jzoKICoKICogICAgIGZvcm1hdFN0cigiaSBjYW4gc3BlYWsge2xhbmd1YWdlfSBzaW5jZSBpIHdhcyB7YWdlfSIse2xhbmd1YWdlOidqYXZhc2NyaXB0JyxhZ2U6MTB9KTsKICogICAgIGZvcm1hdFN0cigiaSBjYW4gc3BlYWsgezB9IHNpbmNlIGkgd2FzIHsxfSIsJ2phdmFzY3JpcHQnLDEwKTsKICoKICog5aaC5p6c5LiN5biM5pyb6KKr6L2s5LmJLOWImeeUqOS4pOS4quaLrOWPtyzlpoI6IGBmb3JtYXRTdHIoImkgY2FuIHNwZWFrIHswfSBzaW5jZSBpIHdhcyB7ezF9IiwnamF2YXNjcmlwdCcsMTApO2AKICoKICovCnV0aWxzLmZvcm1hdFN0ciA9IGZ1bmN0aW9uKHRwbCxvYmopewogIG9iaiA9IHR5cGVvZiBvYmogPT09ICdvYmplY3QnID8gb2JqIDogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsKICByZXR1cm4gdHBsLnJlcGxhY2UoL1x7XHt8XH1cfXxceyhcdyspXH0vZywgZnVuY3Rpb24gKG0sIG4pewogICAgaWYgKG0gPT0gInt7IikgeyByZXR1cm4gInsiOyB9CiAgICBpZiAobSA9PSAifX0iKSB7IHJldHVybiAifSI7IH0KICAgIHJldHVybiBvYmpbbl07CiAgfSk7Cn07Cgp1dGlscy5nZXRQYXJhbUluUXVlcnk9ZnVuY3Rpb24ocXVlcnlTdHIscGFyYW1OYW1lKXsKICAgIHZhciBwYXJhbT1wYXJhbU5hbWUrJz0nCiAgICAgICwgc3RhcnQ9cXVlcnlTdHIuaW5kZXhPZihwYXJhbSkrcGFyYW0ubGVuZ3RoCiAgICAgICwgZW5kPXF1ZXJ5U3RyLmluZGV4T2YoJyYnLHN0YXJ0KTsKICAgIHJldHVybiBlbmQ8c3RhcnQ/cXVlcnlTdHIuc3Vic3RyaW5nKHN0YXJ0KTpxdWVyeVN0ci5zdWJzdHJpbmcoc3RhcnQsZW5kKTsKfTsKCnV0aWxzLm9ic2VydmVET01BdHRyTW9kaWZpZWQgPSAoZnVuY3Rpb24oKXsKICAgIHZhciBNdXRhdGlvbk9ic2VydmVyID0gd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIgfHwgd2luZG93LldlYktpdE11dGF0aW9uT2JzZXJ2ZXIsCiAgICAgICAgZXZlbnRMaXN0ZW5lclN1cHBvcnRlZCA9IHdpbmRvdy5hZGRFdmVudExpc3RlbmVyOwoKICAgIHJldHVybiBmdW5jdGlvbihvYmosIGNhbGxiYWNrKXsKICAgICAgICBpZiggTXV0YXRpb25PYnNlcnZlciApewogICAgICAgICAgICAvLyBkZWZpbmUgYSBuZXcgb2JzZXJ2ZXIKICAgICAgICAgICAgdmFyIG9icyA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uKG11dGF0aW9ucywgb2JzZXJ2ZXIpewogICAgICAgICAgICAgICAgaWYoIG11dGF0aW9uc1swXS50eXBlID09ICdhdHRyaWJ1dGVzJyApCiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobXV0YXRpb25zWzBdKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIG9icy5vYnNlcnZlKCBvYmosIHsgYXR0cmlidXRlczp0cnVlIH0pOwogICAgICAgIH1lbHNlIGlmKCBldmVudExpc3RlbmVyU3VwcG9ydGVkICl7CiAgICAgICAgICAgIG9iai5hZGRFdmVudExpc3RlbmVyKCdET01BdHRyTW9kaWZpZWQnLCBjYWxsYmFjaywgZmFsc2UpOwogICAgICAgIH0KICAgIH0KfSkoKTsKCnV0aWxzLm9ic2VydmVET01Ob2RlQWRkZWQgPSAoZnVuY3Rpb24oKXsKICAgIHZhciBNdXRhdGlvbk9ic2VydmVyID0gd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIgfHwgd2luZG93LldlYktpdE11dGF0aW9uT2JzZXJ2ZXIsCiAgICAgICAgZXZlbnRMaXN0ZW5lclN1cHBvcnRlZCA9IHdpbmRvdy5hZGRFdmVudExpc3RlbmVyOwoKICAgIHJldHVybiBmdW5jdGlvbihvYmosIGNhbGxiYWNrKXsKICAgICAgICBpZiggTXV0YXRpb25PYnNlcnZlciApewogICAgICAgICAgICAvLyBkZWZpbmUgYSBuZXcgb2JzZXJ2ZXIKICAgICAgICAgICAgdmFyIG9icyA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uKG11dGF0aW9ucywgb2JzZXJ2ZXIpewogICAgICAgICAgICAgICAgbXV0YXRpb25zLmZvckVhY2goZnVuY3Rpb24obXV0YXRpb24pIHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhtdXRhdGlvbik7CiAgICAgICAgICAgICAgICAgIH0pOyAgICAKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIG9icy5vYnNlcnZlKCBvYmosIHsgY2hpbGRMaXN0OnRydWUgfSk7CiAgICAgICAgfWVsc2UgaWYoIGV2ZW50TGlzdGVuZXJTdXBwb3J0ZWQgKXsKICAgICAgICAgICAgb2JqLmFkZEV2ZW50TGlzdGVuZXIoJ0RPTU5vZGVJbnNlcnRlZCcsIGNhbGxiYWNrLCBmYWxzZSk7CiAgICAgICAgfQogICAgfQp9KSgpOwoKdXRpbHMuUmVnZXhTcmNQaWMgPSAvc3JjPSJbXHNcU10rPy5qcGciL2cKCi8vY29uc29sZS5sb2coKG5ldyBEYXRlKCkpLmdldFRpbWUoKSk7Cgp2YXIgJCA9IHdpbmRvdy4kOwp2YXIgXyA9IHRoaXMuXzsKdmFyIHB1cmwgPSB3aW5kb3cucHVybHx8JC51cmw7CgovL+S9v+eUqENhc3BlckpT55qE5qih5ouf55So5oi35pON5L2c77yaIGh0dHA6Ly9jYXNwZXJqcy5vcmcvYXBpLmh0bWwjY2xpZW50LXV0aWxzCi8vdmFyIGNsaWVudCA9IHdpbmRvdy5jcmVhdGUoKTsKCnZhciB1cmwgPSBwdXJsKCk7CnZhciBwYWdlID0gdXJsLnNlZ21lbnQoMSk7Cgp2YXIgcGFnZUlzPXt9CiAgLCAkd2luPSQod2luZG93KQogICwgX2RvYz13aW5kb3cuZG9jdW1lbnQKICAsICRib2R5PSQoX2RvYy5ib2R5KQogICwgX3BhdGg9d2luZG93LmZyYW1lRWxlbWVudD93aW5kb3cuZnJhbWVFbGVtZW50LnNyYy5yZXBsYWNlKC9odHRwcz86XC9cL3d3dy56aGlodS5jb20vLCcnKTp1cmwuZGF0YS5hdHRyWydwYXRoJ10KICAsIGNzcz0nJwogICwgJGg9JCgnaGVhZCcpCiAgLCAkcz0kKCc8c3R5bGU+JywgeyAndHlwZSc6ICd0ZXh0L2NzcycgfSkKICAsIGlQYXRoQW5zd2Vycz1fcGF0aC5pbmRleE9mKCcvYW5zd2VycycpCiAgLCBpUGF0aENvbGxlY3Rpb249X3BhdGguaW5kZXhPZignL2NvbGxlY3Rpb24nKQo7CnBhZ2VJcy5Ib21lPScvJz09X3BhdGg7CnBhZ2VJcy5BbnN3ZXI9MDxfcGF0aC5pbmRleE9mKCcvYW5zd2VyLycpOwpwYWdlSXMuUXVlc3Rpb249IXBhZ2VJcy5BbnN3ZXImJjA9PV9wYXRoLmluZGV4T2YoJy9xdWVzdGlvbi8nKTsKcGFnZUlzLkFuc3dlcnM9MDxpUGF0aEFuc3dlcnMmJl9wYXRoLnN1YnN0cihpUGF0aEFuc3dlcnMpPT0nL2Fuc3dlcnMnOwpwYWdlSXMuQ29sbGVjdGlvbj0wPT1pUGF0aENvbGxlY3Rpb247CnBhZ2VJcy5EZWJ1dHM9MD09X3BhdGguaW5kZXhPZignL2RlYnV0cy8nKTsKcGFnZUlzLk15Q29sbGVjdGlvbj0wPT1fcGF0aC5pbmRleE9mKCcvY29sbGVjdGlvbnMvbWluZScpOwpwYWdlSXMuU2V0dGluZ3NGaWx0ZXI9MD09X3BhdGguaW5kZXhPZignL3NldHRpbmdzL2ZpbHRlcicpCgp2YXIgaT0wCiAgLCAkdXNlcj0kKCcuenUtdG9wLW5hdi11c2VyaW5mbycpLy91c2VyX2F2YXRlcgogICwgej0kdXNlci5sZW5ndGg/JHVzZXIuYXR0cignaHJlZicpOicnCiAgLCAkYmFubmVyPSQoZG9jdW1lbnQuYm9keSkuY2hpbGRyZW4oKS5maXJzdCgpCiAgLCAkbWFpbj0kKCdbcm9sZT1tYWluXScpLy9tYWluCiAgLCBjc3NfQXV0aG9yTGlzdEl0ZW1BPSdwYWRkaW5nOjAgMTBweCAwIDA7JwogICwgY3NzX0F1dGhvckxpc3RJdGVtQV9uYW1lPSdwYWRkaW5nOjAgNXB4OycKOwoKd2luZG93LmlaaGlodSA9IHsKICAgICR3aW46JHdpbgogICwgJGJvZHk6JGJvZHkKICAsICRtYWluOiRtYWluCiAgLCBjb25maWc6JC5leHRlbmQoY2ZnRGVmYXVsdCwgdXRpbHMuZ2V0VmFsdWUoJ2l6aGlodScsY2ZnRGVmYXVsdCkpCn07Cgp2YXIgaXpoSG9tZUxheW91dCA9IHdpbmRvdy5pWmhpaHUuY29uZmlnWydIb21lTGF5b3V0J10KICAsIGl6aEF1dGhvckxpc3QgPSB3aW5kb3cuaVpoaWh1LmNvbmZpZ1snQXV0aG9yTGlzdCddCiAgLCBpemhSaWdodENvbW1lbnQgPSB3aW5kb3cuaVpoaWh1LmNvbmZpZ1snU2hvd0NvbW1lbnQnXQogICwgaXpoUXVpY2tGYXZvID0gd2luZG93LmlaaGlodS5jb25maWdbJ1F1aWNrRmF2byddCiAgLCBpemhBdXRob3JSZWFyID0gd2luZG93LmlaaGlodS5jb25maWdbJ0F1dGhvclJlYXInXQogICwgaXpoSG9tZU5vdGkgPSB3aW5kb3cuaVpoaWh1LmNvbmZpZ1snSG9tZU5vdGknXQogICwgaXpoUXVpY2tCbG9jayA9IHdpbmRvdy5pWmhpaHUuY29uZmlnWydRdWlja0Jsb2NrJ10KICAsIGl6aFRvcE5hdkF1dG9Gb2xkID0gd2luZG93LmlaaGlodS5jb25maWdbJ1RvcE5hdkF1dG9Gb2xkJ10KOwoKdXRpbHMudHJhbnNmZXJPbGRDZmcoKTsKCiRib2R5LmF0dHIoewogICAgJ2l6aEhvbWVMYXlvdXQnIDogaXpoSG9tZUxheW91dD8nMSc6JycKICAsICdpemhBdXRob3JMaXN0JyA6IGl6aEF1dGhvckxpc3Q/JzEnOicnCiAgLCAnaXpoUmlnaHRDb21tZW50JyA6IGl6aFJpZ2h0Q29tbWVudD8nMSc6JycKICAsICdpemhRdWlja0Zhdm8nIDogaXpoUXVpY2tGYXZvPycxJzonJwogICwgJ2l6aEF1dGhvclJlYXInIDogaXpoQXV0aG9yUmVhcj8nMSc6JycKICAsICdpemhIb21lTm90aScgOiBpemhIb21lTm90aT8nMSc6JycKICAsICdpemhRdWlja0Jsb2NrJyA6IGl6aFF1aWNrQmxvY2s/JzEnOicnCiAgLCAnaXpoVG9wTmF2QXV0b0ZvbGQnIDogaXpoVG9wTmF2QXV0b0ZvbGQ/JzEnOicnCn0pOwoKdmFyIF9RdWlja0Jsb2NrID0gbmV3IFF1aWNrQmxvY2sod2luZG93LmlaaGlodSkKICAsIF9RdWlja0Zhdm8gPSBuZXcgUXVpY2tGYXZvKHdpbmRvdy5pWmhpaHUpCiAgLCBfQ29tbWVudCA9IG5ldyBDb21tZW50KHdpbmRvdy5pWmhpaHUpCiAgLCBfTm90aTcgPSBuZXcgTm90aTcod2luZG93LmlaaGlodSkKICAsIF9BbnN3ZXIgPSBuZXcgQW5zd2VyKHdpbmRvdy5pWmhpaHUpCiAgLCBfU2VhcmNoaW5nTGlzdCA9IG5ldyBTZWFyY2hpbmdMaXN0KHdpbmRvdy5pWmhpaHUpCiAgLCBfVG9wTmF2ID0gbmV3IFRvcE5hdih3aW5kb3cuaVpoaWh1KQo7Cgpjc3MrPVsnLnRfc2hvd2ZyYW1le3BhZGRpbmc6MTBweCAxMHB4IDEwcHggMTBweDtiYWNrZ3JvdW5kOiNmMGYwZjA7Ym9yZGVyOjFweCBzb2xpZCAjZmZmO2JveC1zaGFkb3c6MnB4IDVweCAxNXB4ICMzMzM7Ym9yZGVyLXJhZGl1czoxMHB4Oy1tb3otYm94LXNoYWRvdzoycHggNXB4IDE1cHggIzMzMzstbW96LWJvcmRlci1yYWRpdXM6MTBweDstd2Via2l0LWJveC1zaGFkb3c6MnB4IDVweCAxNXB4ICMzMzM7LXdlYmtpdC1ib3JkZXItcmFkaXVzOjEwcHh9I2laaGlodV9ydGpkZGl2e3dpZHRoOjY1MHB4O2hlaWdodDo0MzdweH0jaVpoaWh1X3NldGRpdnt3aWR0aDo2MDBweDtoZWlnaHQyOjI5NXB4fS50X3NldGRpdntwYWRkaW5nLWJvdHRvbToxMHB4O2JhY2tncm91bmQ6I2ZjZmNmYzt3aWR0aDoxMDAlO2hlaWdodDoxMDAlfS50X3NldF90Yntmb250LWZhbWlseToiTHVjaWRhIFNhbnMgVW5pY29kZSIsIkx1Y2lkYSBHcmFuZGUiLFNhbnMtU2VyaWYgIWltcG9ydGFudDtmb250LXNpemU6MTJweCAhaW1wb3J0YW50O3RleHQtc2hhZG93Om5vbmUgIWltcG9ydGFudDtib3JkZXItY29sbGFwc2U6Y29sbGFwc2UgIWltcG9ydGFudDttYXJnaW46MCAhaW1wb3J0YW50O2xpbmUtaGVpZ2h0OjEyMCV9LnRfc2V0X3RiIHRoZWFkIHRke2JhY2tncm91bmQ6IzAwODBjMDtjb2xvcjojZmZmO2JvcmRlcjpub25lICFpbXBvcnRhbnQ7cGFkZGluZzo0cHggOHB4IDRweCAhaW1wb3J0YW50O2JvcmRlci1yYWRpdXMtdG9wbGVmdDoxMHB4O2JvcmRlci1yYWRpdXMtdG9wcmlnaHQ6MTBweDstbW96LWJvcmRlci1yYWRpdXMtdG9wbGVmdDoxMHB4Oy1tb3otYm9yZGVyLXJhZGl1cy10b3ByaWdodDoxMHB4Oy13ZWJraXQtYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czoxMHB4Oy13ZWJraXQtYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6MTBweH0udF9zZXRfdGIgdGgsLnRfc2V0X3RiIHRke3BhZGRpbmc6OHB4O2JhY2tncm91bmQ6I2U4ZWRmZjtib3JkZXI6bm9uZSAhaW1wb3J0YW50O2JvcmRlci10b3A6MnB4IHNvbGlkICNmY2ZjZmMgIWltcG9ydGFudDtjb2xvcjojNjY5O2xpbmUtaGVpZ2h0OjEuMWVtICFpbXBvcnRhbnR9LnRfc2V0X3RiIHRkIGlucHV0LC50X3NldF90YiB0ZCB0ZXh0YXJlYXtmb250LXNpemU6MTJweCAhaW1wb3J0YW50O3BhZGRpbmc6MCAhaW1wb3J0YW50fS50X3NldF90YiB0Ym9keSB0cjpob3ZlciB0aCwudF9zZXRfdGIgdGJvZHkgdHI6aG92ZXIgdGR7YmFja2dyb3VuZDojZDBkYWZkfS50X3NldF90YiB0Zm9vdCB0ZHtib3JkZXItcmFkaXVzLWJvdHRvbWxlZnQ6MTBweDtib3JkZXItcmFkaXVzLWJvdHRvbXJpZ2h0OjEwcHg7LW1vei1ib3JkZXItcmFkaXVzLWJvdHRvbWxlZnQ6MTBweDstbW96LWJvcmRlci1yYWRpdXMtYm90dG9tcmlnaHQ6MTBweDstd2Via2l0LWJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6MTBweDstd2Via2l0LWJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOjEwcHh9LnRfc2V0X2Z0e2ZvbnQtZmFtaWx5OkFyaWFsLHNhbnMtc2VyaWYs54C577+977+9ICFpbXBvcnRhbnQ7Zm9udC1zaXplOjEycHggIWltcG9ydGFudDtmb250LXdlaWdodDpib2xkICFpbXBvcnRhbnQ7dGV4dC1zaGFkb3c6bm9uZSAhaW1wb3J0YW50O21hcmdpbi10b3A6MTVweCAhaW1wb3J0YW50fS50X3NldF9mdCBhe3RleHQtZGVjb3JhdGlvbjpub25lO2NvbG9yOiMwMDB9LnRfc2V0YnRue2JvcmRlcjoxcHggc29saWQgYmxhY2s7cGFkZGluZzoycHg7Y3Vyc29yOnBvaW50ZXI7YmFja2dyb3VuZDojZmZmO2NvbG9yOiMwMDgwYzB9LnRfc2V0ZnRidG4gc3BhbntwYWRkaW5nOjJweCAxMHB4IDJweCAxMHB4ICFpbXBvcnRhbnR9LnRfcnRqZGJ0bntiYWNrZ3JvdW5kOiMwMDgwYzAgIWltcG9ydGFudDtjb2xvcjojZmZmICFpbXBvcnRhbnR9LnRfcnRqZHR4dHBvc3twYWRkaW5nLXRvcDo1cHh9I2laaGlodV9ydGhpbnR7Zm9udC1mYW1pbHk6QXJpYWwsc2Fucy1zZXJpZizngLnvv73vv70gIWltcG9ydGFudDtmb250LXNpemU6MTZweCAhaW1wb3J0YW50O2ZvbnQtd2VpZ2h0OmJvbGQ7cGFkZGluZzo1cHggMTBweCA1cHggMTBweDtwb3NpdGlvbjpmaXhlZDt0b3A6MjBweDtib3JkZXItcmFkaXVzOjVweDstbW96LWJvcmRlci1yYWRpdXM6NXB4Oy13ZWJraXQtYm9yZGVyLXJhZGl1czo1cHg7ZGlzcGxheTppbmxpbmUtYmxvY2s7b3BhY2l0eTowLjd9LnRfcnRoaW50X257Y29sb3I6I2ZmZiAhaW1wb3J0YW50O2JhY2tncm91bmQ6IzAwMCAhaW1wb3J0YW50fS50X3J0aGludF9me2JhY2tncm91bmQ6Izg4MDAwMCAhaW1wb3J0YW50O2NvbG9yOiNmZmZmZGQgIWltcG9ydGFudH0udF91cGJ0bntiYWNrZ3JvdW5kOiMwMDgwYzAgIWltcG9ydGFudDtjb2xvcjojZmZmICFpbXBvcnRhbnR9LnRfdXBpbmZve2hlaWdodDoxMjBweCAhaW1wb3J0YW50O3ZlcnRpY2FsLWFsaWduOnRleHQtdG9wICFpbXBvcnRhbnR9I2l6aF91cGRhdGVkaXYgdGh7Ym9yZGVyLXJpZ2h0OjJweCBzb2xpZCAjZmNmY2ZjICFpbXBvcnRhbnR9I2l6aF91cGRhdGVkaXYgdGZvb3QgdGR7Ym9yZGVyOm5vbmUgIWltcG9ydGFudDtib3JkZXItdG9wOjJweCBzb2xpZCAjZmNmY2ZjICFpbXBvcnRhbnQ7Zm9udC1mYW1pbHk6QXJpYWwsc2Fucy1zZXJpZizngLnvv73vv70gIWltcG9ydGFudDtmb250LXNpemU6MTJweCAhaW1wb3J0YW50O2ZvbnQtc3R5bGU6bm9ybWFsICFpbXBvcnRhbnQ7dGV4dC1zaGFkb3c6bm9uZSAhaW1wb3J0YW50fS50X3R4dHNob3d7dGV4dC1hbGlnbjpjZW50ZXI7YmFja2dyb3VuZDojMDA4MGMwO2NvbG9yOiNmMGYwZjA7dXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmV9LnRfZnJzaG93e2ZvbnQtc2l6ZToxLjJlbTtwb3NpdGlvbjpmaXhlZDt6LWluZGV4Ojk5OTk5O3RvcDo0NXB4O3dpZHRoOjIwMHB4O29wYWNpdHk6MC45O2N1cnNvcjpwb2ludGVyfS50X3Rib3h7cGFkZGluZzoxMHB4O3Bvc2l0aW9uOnJlbGF0aXZlO2JvcmRlcjoxcHggc29saWQgI2YwZjBmMDtsaW5lLWhlaWdodDoyMHB4OypoZWlnaHQ6MSU7d2lkdGg6MjAwcHg7LW1vei1ib3gtc2hhZG93OjJweCA1cHggMTVweCAjMzMzOy1tb3otYm9yZGVyLXJhZGl1czo3cHg7LXdlYmtpdC1ib3gtc2hhZG93OjJweCA1cHggMTVweCAjMzMzOy13ZWJraXQtYm9yZGVyLXJhZGl1czo3cHh9LnRfdGJveCBze3Bvc2l0aW9uOmFic29sdXRlO3RvcDotMjBweDtsZWZ0OjE2MHB4O2Rpc3BsYXk6YmxvY2s7aGVpZ2h0OjA7d2lkdGg6MDtmb250LXNpemU6MDtsaW5lLWhlaWdodDowO2JvcmRlci1jb2xvcjp0cmFuc3BhcmVudCB0cmFuc3BhcmVudCAjZjBmMGYwIHRyYW5zcGFyZW50O2JvcmRlci1zdHlsZTpkYXNoZWQgZGFzaGVkIHNvbGlkIGRhc2hlZDtib3JkZXItd2lkdGg6MTBweH0udF90Ym94IGl7cG9zaXRpb246YWJzb2x1dGU7dG9wOi05cHg7bGVmdDotMTBweDtkaXNwbGF5OmJsb2NrO2hlaWdodDowO3dpZHRoOjA7Zm9udC1zaXplOjA7bGluZS1oZWlnaHQ6MDtib3JkZXItY29sb3I6dHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgIzAwODBjMCB0cmFuc3BhcmVudDtib3JkZXItc3R5bGU6ZGFzaGVkIGRhc2hlZCBzb2xpZCBkYXNoZWQ7Ym9yZGVyLXdpZHRoOjEwcHh9QG1lZGlhIHNjcmVlbiBhbmQgKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzowKXsjaVpoaWh1X3J0amRkaXZ7aGVpZ2h0OjQxN3B4fSNpWmhpaHVfc2V0ZGl2e2hlaWdodDI6Mjk1cHh9I2l6aF91cGRhdGVkaXZ7aGVpZ2h0OjMxNXB4fX0nCiAgICAgLCcnXS5qb2luKCdcbicpOwppZihwYWdlSXMuUXVlc3Rpb24mJml6aEF1dGhvckxpc3QpewogICAgY3NzKz1bJ2Rpdi51bm97cG9zaXRpb246YWJzb2x1dGU7bGVmdDowO2JvcmRlcjoxcHggc29saWQgIzA3NzFDMTtib3JkZXItcmlnaHQtd2lkdGg6MDtib3JkZXItdG9wLXJpZ2h0LXJhZGl1czo2cHh9JwogICAgICAgICAsJ2Rpdi51bm8gLmZyYW1le292ZXJmbG93LXg6aGlkZGVuO292ZXJmbG93LXk6YXV0bztkaXJlY3Rpb246cnRsfScKICAgICAgICAgLCdkaXYudW5vIHNwYW4ubWVULGRpdi51bm8gc3Bhbi5tZUIsZGl2LnVubyB1bC5wcCBsaSBzcGFuLm1le3Bvc2l0aW9uOmFic29sdXRlO3JpZ2h0OjA7ZGlzcGxheTpibG9jaztoZWlnaHQ6MXB4O3dpZHRoOjFweDtsaW5lLWhlaWdodDoxcHg7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDtib3JkZXItc3R5bGU6c29saWQ7Ym9yZGVyLWNvbG9yOnRyYW5zcGFyZW50O30nCiAgICAgICAgICwnZGl2LnVubyBzcGFuLm1lVHtib3JkZXItd2lkdGg6NnB4IDRweDtib3JkZXItdG9wLXdpZHRoOjBweDtib3JkZXItYm90dG9tLWNvbG9yOiNmZmY7fScKICAgICAgICAgLCdkaXYudW5vIHNwYW4ubWVCe2JvcmRlci13aWR0aDo2cHggNHB4O2JvcmRlci1ib3R0b20td2lkdGg6MHB4O2JvcmRlci10b3AtY29sb3I6I2ZmZjttYXJnaW4tdG9wOi03cHg7fScKICAgICAgICAgLCdkaXYudW5vIHVse2JhY2tncm91bmQtY29sb3I6IzA3NzFDMTtwYWRkaW5nOjA7bWFyZ2luOjA7ZGlyZWN0aW9uOmx0cn0nCiAgICAgICAgICwnZGl2LnVubyB1bCBsaXtkaXNwbGF5OmJsb2NrO2xpc3Qtc3R5bGUtdHlwZTpub25lO21hcmdpbjowO3BhZGRpbmc6MDt3aGl0ZS1zcGFjZTpub3dyYXA7fScKICAgICAgICAgLCdkaXYudW5vIHVsIGxpIGF7ZGlzcGxheTpibG9jazt9ZGl2LnVubyBsaSBhLnNlbHt0ZXh0LWRlY29yYXRpb246bm9uZTt9JwogICAgICAgICAsJ2Rpdi51bm8gdWwgbGkgYXsnK2Nzc19BdXRob3JMaXN0SXRlbUErJ30nCiAgICAgICAgICwnZGl2LnVubyB1bC5wcCBsaSBzcGFuLm1le3Bvc2l0aW9uOnN0YXRpYzttYXJnaW46NnB4IC04cHg7Ym9yZGVyLXdpZHRoOjRweCA2cHg7Ym9yZGVyLXJpZ2h0LWNvbG9yOiNmZmY7ZmxvYXQ6cmlnaHQ7fScKICAgICAgICAgLCdkaXYudW5vIGxpIGEgc3Bhbi5uYW1le3RleHQtYWxpZ246cmlnaHQ7ZGlzcGxheTpibG9jazsnK2Nzc19BdXRob3JMaXN0SXRlbUFfbmFtZSsnYmFja2dyb3VuZC1jb2xvcjojZmZmO31kaXYudW5vIGxpIGEuc2VsIHNwYW4ubmFtZXtjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6IzA3NzFDMTt9JwogICAgICAgICAsJ2Rpdi51bm8gbGkgYSBzcGFuLm5hbWUubm9uYW1le2NvbG9yOiMwMDA7fScKICAgICAgICAgLCdkaXYudW5vIGxpIGEgc3Bhbi5uYW1lLmNvbGxhcHNlZHtjb2xvcjojOTk5OTk5O30nCiAgICAgICAgICwnZGl2LnVubyBsaSBhIHNwYW4ubmFtZS5mcmllbmR7Zm9udC1zdHlsZTppdGFsaWM7fScKICAgICAgICAgLCdkaXYudW5vIGxpIHNwYW4uaHB7YmFja2dyb3VuZC1jb2xvcjojOTk5OTk5O3Bvc2l0aW9uOnJlbGF0aXZlO2Zsb2F0OnJpZ2h0O21hcmdpbi10b3A6LTJweDtsaW5lLWhlaWdodDoycHg7aGVpZ2h0OjJweDt9JwogICAgICAgICAsJ2Rpdi51bm8gdGFibGUucGx1c3tmbG9hdDpyaWdodDttYXJnaW46N3B4IC05cHg7aGVpZ2h0OjdweDtib3JkZXItY29sbGFwc2U6Y29sbGFwc2U7Ym9yZGVyLXN0eWxlOmhpZGRlbjt9ZGl2LnVubyB0YWJsZS5wbHVzIHRke2JvcmRlcjoxcHggc29saWQgI2ZmZjt3aWR0aDoxcHg7aGVpZ2h0OjFweDt9JwogICAgICAgICAsJ2Rpdi51bm8gYS5zZWwgdGFibGUucGx1c3t9ZGl2LnVubyBhLnNlbCB0YWJsZS5wbHVzIHRke30nCiAgICAgICAgICwnZGl2LnVubyBsaSBhIHNwYW4uZnVuY3t0ZXh0LWFsaWduOmNlbnRlcjt9JwogICAgICAgICAsJ2Rpdi5pemgtYW5zd2VyLXByZXZpZXd7cG9zaXRpb246Zml4ZWQ7bWFyZ2luLXRvcDoxcHg7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JvcmRlcjoxcHggc29saWQgIzA3NzFDMTtib3JkZXItdG9wLXdpZHRoOjIycHg7Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6NnB4O2JveC1zaGFkb3c6NXB4IDVweCA1cHggIzc3Nzt9JwogICAgICAgICAsJ2Rpdi5pemgtYW5zd2VyLXByZXZpZXcgLnptLWVkaXRhYmxlLWNvbnRlbnR7dG9wOjA7Ym90dG9tOjA7bGVmdDowO3JpZ2h0OjA7b3ZlcmZsb3cteTphdXRvO3BhZGRpbmc6MTBweDt9JwogICAgICAgICAsJ2Rpdi5pemgtYW5zd2VyLXByZXZpZXcgaW1nLnptLWxpc3QtYXZhdGFye3Bvc2l0aW9uOmFic29sdXRlO3JpZ2h0OjEwcHg7dG9wOi0zNXB4O2JvcmRlcjoxcHggc29saWQgIzA3NzFDMTtib3JkZXItcmFkaXVzOjZweDt9JwogICAgICAgICAsJ2Rpdi5pemgtYW5zd2VyLXByZXZpZXcgc3Bhbi5jb21tZW50e3Bvc2l0aW9uOmFic29sdXRlO3RvcDotMThweDtsaW5lLWhlaWdodDoxOHB4O2JvcmRlci10b3AtcmlnaHQtcmFkaXVzOjNweDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7cGFkZGluZzowIDVweDt9JwogICAgICAgICAsJyddLmpvaW4oJ1xuJyk7Cn0KY3NzKz1bJy56LWljb24taXpoLWZvbGR7YmFja2dyb3VuZC1wb3NpdGlvbjotMTczcHggLTEwN3B4O3dpZHRoOjE1cHg7aGVpZ2h0OjE1cHg7fScKICAgICAsJyddLmpvaW4oJ1xuJyk7CmNzcys9WycudF9zZXRfdGJ7Zm9udC1mYW1pbHk6Ikx1Y2lkYSBTYW5zIFVuaWNvZGUiLCJMdWNpZGEgR3JhbmRlIixTYW5zLVNlcmlmICFpbXBvcnRhbnQ7Zm9udC1zaXplOjEycHggIWltcG9ydGFudDt0ZXh0LXNoYWRvdzpub25lICFpbXBvcnRhbnQ7Ym9yZGVyLWNvbGxhcHNlOmNvbGxhcHNlICFpbXBvcnRhbnQ7bWFyZ2luOjAgIWltcG9ydGFudDtsaW5lLWhlaWdodDoxMjAlfScKICAgICAsJy50X3NldF90YiB0aGVhZCB0ZHtiYWNrZ3JvdW5kOiMwMDgwYzA7Y29sb3I6I2ZmZjtib3JkZXI6bm9uZSAhaW1wb3J0YW50O3BhZGRpbmc6NHB4IDhweCA0cHggIWltcG9ydGFudDtib3JkZXItdG9wLWxlZnQtcmFkaXVzOjZweDtib3JkZXItdG9wLXJpZ2h0LXJhZGl1czo2cHh9JwogICAgICwnLnRfc2V0X3RiIHRoLC50X3NldF90YiB0ZHtwYWRkaW5nOjhweDtiYWNrZ3JvdW5kOiNlN2YzZjk7Ym9yZGVyOm5vbmUgIWltcG9ydGFudDtib3JkZXItdG9wOjJweCBzb2xpZCAjZmNmY2ZjICFpbXBvcnRhbnQ7Y29sb3I6IzY2OTtsaW5lLWhlaWdodDoxLjFlbSAhaW1wb3J0YW50fScKICAgICAsJy50X3NldF90YiB0ZCBpbnB1dCwudF9zZXRfdGIgdGQgdGV4dGFyZWF7Zm9udC1zaXplOjEycHggIWltcG9ydGFudDtwYWRkaW5nOjAgIWltcG9ydGFudH0nCiAgICAgLCcudF9zZXRfdGIgdGJvZHkgdHI6aG92ZXIgdGgsLnRfc2V0X3RiIHRib2R5IHRyOmhvdmVyIHRke2JhY2tncm91bmQ6I2QwZGFmZH0nCiAgICAgLCcudF9zZXRfdGIgdGZvb3QgdGR7Ym9yZGVyLXJhZGl1cy1ib3R0b21sZWZ0OjEwcHg7Ym9yZGVyLXJhZGl1cy1ib3R0b21yaWdodDoxMHB4Oy1tb3otYm9yZGVyLXJhZGl1cy1ib3R0b21sZWZ0OjEwcHg7LW1vei1ib3JkZXItcmFkaXVzLWJvdHRvbXJpZ2h0OjEwcHg7LXdlYmtpdC1ib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOjEwcHg7LXdlYmtpdC1ib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czoxMHB4fScKICAgICAsJy50X3NldF90YiB0ZHt3aGl0ZS1zcGFjZTpub3dyYXA7fScKICAgICAsJy50X3NldF90YiB0ZCAuaWNvbi1oZWxwe2Zsb2F0OnJpZ2h0O30nCiAgICAgLCcnXS5qb2luKCdcbicpOwpjc3MrPVsnLml6aF9ib3hTaGFkb3d7Ym94LXNoYWRvdzogNXB4IDVweCAzcHggMHB4ICM5OTkgIWltcG9ydGFudDt9JwogICAgICwnI3poLXF1ZXN0aW9uLW1ldGEtd3JhcC5pemhfbm9Cb3JkZXJ7Ym9yZGVyLWJvdHRvbS1jb2xvcjp0cmFuc3BhcmVudCAhaW1wb3J0YW50O30nCiAgICAgLCcjemgtcXVlc3Rpb24tZmlsdGVyLXdyYXAuaXpoX25vQm9yZGVye2JvcmRlci10b3AtY29sb3I6dHJhbnNwYXJlbnQgIWltcG9ydGFudDt9JwogICAgICwnYS5pemgtYnV0dG9uLm9ue2NvbG9yOiMyMjU1OTk7dGV4dC1zaGFkb3c6MCAwIDFweCAjMjI1NTk5O30nCiAgICAgLCdhLml6aC1idXR0b24gLnpnLWljb257b3BhY2l0eTowLjU7fScKICAgICAsJ2EuaXpoLWJ1dHRvbi5vbiAuemctaWNvbntvcGFjaXR5OjE7fScKICAgICAsJ2EuaXpoLWJ1dHRvbi5vZmZ7Y29sb3I6I2VlZTt9JwogICAgICwnYS5pemgtYnV0dG9uLm9mZiAuemctaWNvbntvcGFjaXR5OjAuMjt9JwogICAgICwnLml6aC1mZWVkcy1maWx0ZXJ7fScKICAgICAsJy5pemgtZmVlZHMtZmlsdGVyIC5pemgtZmVlZHMtZmlsdGVyLW9wdGlvbntvcGFjaXR5OjAuNTtjb2xvcjojOTk5OTk5O3BhZGRpbmctbGVmdDo1cHg7dGV4dC1kZWNvcmF0aW9uOm5vbmU7Y3Vyc29yOnBvaW50ZXI7fScKICAgICAsJy5pemgtZmVlZHMtZmlsdGVyIC5pemgtZmVlZHMtZmlsdGVyLW9wdGlvbiBpe2JhY2tncm91bmQtcG9zaXRpb246LTE4M3B4IC00cHg7fScKICAgICAsJy5pemgtZmVlZHMtZmlsdGVyIC5pemgtZmVlZHMtZmlsdGVyLW9wdGlvbi5vbntvcGFjaXR5OjE7Y29sb3I6IzIyNTU5OTt9JwogICAgICwnLml6aC1mZWVkcy1maWx0ZXIgLml6aC1mZWVkcy1maWx0ZXItb3B0aW9uLm9uIGl7YmFja2dyb3VuZC1wb3NpdGlvbjotMTgzcHggLTI0cHg7fScKICAgICAsJyddLmpvaW4oJ1xuJyk7CmlmKGl6aEhvbWVMYXlvdXQpewogICAgY3NzICs9ICBbJyN6aC1xdWVzdGlvbi1saXN0IHsgcGFkZGluZy1sZWZ0OjMwcHghaW1wb3J0YW50IH0nCiAgICAgICAgICAgICwnI3poLW1haW4tZmVlZC1mcmVzaC1idXR0b24geyBtYXJnaW4tbGVmdDotMzBweCFpbXBvcnRhbnQgfScKICAgICAgICAgICAgLCcuZmVlZC1pdGVtIHsnCiAgICAgICAgICAgICwnICAgIGJvcmRlci1ib3R0b206MXB4IHNvbGlkICNFRUUhaW1wb3J0YW50OycKICAgICAgICAgICAgLCcgICAgbWFyZ2luLXRvcDotMXB4IWltcG9ydGFudCcKICAgICAgICAgICAgLCd9JwogICAgICAgICAgICAsJy5mZWVkLWl0ZW0gLmF2YXRhciB7IGRpc3BsYXk6bm9uZSFpbXBvcnRhbnQgfScKICAgICAgICAgICAgLCcnCiAgICAgICAgICAgICwnLmZlZWQtbWFpbiwuZmVlZC1pdGVtLmNvbWJpbmUgeyBtYXJnaW4tbGVmdDowIWltcG9ydGFudCB9JwogICAgICAgICAgICAsJy5mZWVkLWl0ZW0tcSB7IG1hcmdpbi1sZWZ0Oi0zMHB4IWltcG9ydGFudDtwYWRkaW5nLWxlZnQ6MCFpbXBvcnRhbnQgfScKICAgICAgICAgICAgLCcnCiAgICAgICAgICAgICx3aW5kb3cuaVpoaWh1LkNvbW1lbnQuUmlnaHRDb21tZW50ID8gJycgOiAnLmZlZWQtaXRlbS1hIC56bS1jb21tZW50LWJveCB7IG1heC13aWR0aDo2MDJweCFpbXBvcnRhbnQgfScKICAgICAgICAgICAgLHdpbmRvdy5pWmhpaHUuQ29tbWVudC5SaWdodENvbW1lbnQgPyAnJyA6ICcuZmVlZC1pdGVtLXEgLnptLWNvbW1lbnQtYm94IHsgbWF4LXdpZHRoOjYzMnB4IWltcG9ydGFudDsgd2lkdGg6NjMycHghaW1wb3J0YW50IH0nCiAgICAgICAgICAgICwnJwogICAgICAgICAgICAsJy56bS10YWctZWRpdG9yLCcKICAgICAgICAgICAgLCcjemgtcXVlc3Rpb24tdGl0bGUsJwogICAgICAgICAgICAsJyN6aC1xdWVzdGlvbi1kZXRhaWwsJwogICAgICAgICAgICAsJyN6aC1xdWVzdGlvbi1tZXRhLXdyYXAsJwogICAgICAgICAgICAsJy56aC1hbnN3ZXJzLXRpdGxlLCcKICAgICAgICAgICAgLCcjemgtcXVlc3Rpb24tZmlsdGVyLXdyYXAgeycKICAgICAgICAgICAgLCcgICAgbWFyZ2luLWxlZnQ6LTMycHghaW1wb3J0YW50JwogICAgICAgICAgICAsJ30nCiAgICAgICAgICAgICwnJwogICAgICAgICAgICAsJyN6aC1xdWVzdGlvbi1sb2ctcGFnZS13cmFwIC56bS10YWctZWRpdG9yLCcKICAgICAgICAgICAgLCcjemgtcXVlc3Rpb24tbG9nLXBhZ2Utd3JhcCAjemgtcXVlc3Rpb24tdGl0bGUgeycKICAgICAgICAgICAgLCcgICAgbWFyZ2luLWxlZnQ6MCAhaW1wb3J0YW50JwogICAgICAgICAgICAsJ30nCiAgICAgICAgICAgICwnJwogICAgICAgICAgICAsJy56aC1hbnN3ZXJzLXRpdGxlLCcKICAgICAgICAgICAgLCcjemgtcXVlc3Rpb24tZmlsdGVyLXdyYXAgeycKICAgICAgICAgICAgLCcgICAgYm9yZGVyLWJvdHRvbToxcHggc29saWQgI0VFRSFpbXBvcnRhbnQ7JwogICAgICAgICAgICAsJyAgICB6LWluZGV4OjEwMDAhaW1wb3J0YW50JwogICAgICAgICAgICAsJ30nCiAgICAgICAgICAgICwnJwogICAgICAgICAgICAsJyN6aC1xdWVzdGlvbi1tZXRhLXdyYXAgeycKICAgICAgICAgICAgLCcgICAgbWFyZ2luLWJvdHRvbTowIWltcG9ydGFudDsnCiAgICAgICAgICAgICwnICAgIHBhZGRpbmctYm90dG9tOjEwcHghaW1wb3J0YW50OycKICAgICAgICAgICAgLCcgICAgYm9yZGVyLWJvdHRvbToxcHggc29saWQgI0VFRSFpbXBvcnRhbnQnCiAgICAgICAgICAgICwnfScKICAgICAgICAgICAgLCcnCiAgICAgICAgICAgICwnI3poLXF1ZXN0aW9uLWFuc3dlci13cmFwIHsgbWFyZ2luLXRvcDotMXB4IWltcG9ydGFudCB9JwogICAgICAgICAgICAsJycKICAgICAgICAgICAgLCcjemgtcXVlc3Rpb24tY29sbGFwc2VkLXdyYXAsI3poLXF1ZXN0aW9uLWFuc3dlci13cmFwIHsgYm9yZGVyOm5vbmUhaW1wb3J0YW50IH0nCiAgICAgICAgICAgICwnLnp1LXF1ZXN0aW9uLWNvbGxhcC10aXRsZSB7IGJvcmRlci10b3A6MXB4IHNvbGlkICNFRUUhaW1wb3J0YW50IH0nCiAgICAgICAgICAgICwnI3poLXF1ZXN0aW9uLWNvbGxhcHNlZC13cmFwPmRpdjpsYXN0LWNoaWxkLC56bS1pdGVtLWFuc3dlcjpsYXN0LWNoaWxkIHsgYm9yZGVyLWJvdHRvbToxcHggc29saWQgI0VFRSFpbXBvcnRhbnQgfScKICAgICAgICAgICAgLCcnCiAgICAgICAgICAgICwnLnp1LWF1dG9oaWRlLCcKICAgICAgICAgICAgLCcuem0tY29tbWVudC1vcC1saW5rLCcKICAgICAgICAgICAgLCcuem0tc2lkZS10cmVuZC1kZWwsJwogICAgICAgICAgICAsJy51bnBpbiB7JwogICAgICAgICAgICAsJyAgICB2aXNpYmlsaXR5OnZpc2libGUhaW1wb3J0YW50OycKICAgICAgICAgICAgLCcgICAgb3BhY2l0eTowOycKICAgICAgICAgICAgLCd9JwogICAgICAgICAgICAsJy5mZWVkLWl0ZW06aG92ZXIgLnp1LWF1dG9oaWRlLCcKICAgICAgICAgICAgLCcuem0taXRlbS1hbnN3ZXIgLnp1LWF1dG9oaWRlLCcKICAgICAgICAgICAgLCcuem0taXRlbS1jb21tZW50OmhvdmVyIC56bS1jb21tZW50LW9wLWxpbmssJwogICAgICAgICAgICAsJy56bS1zaWRlLXRyZW5kLXJvdzpob3ZlciAuem0tc2lkZS10cmVuZC1kZWwsJwogICAgICAgICAgICAsJy56bS1zaWRlLW5hdi1saTpob3ZlciAudW5waW4geycKICAgICAgICAgICAgLCcgICAgb3BhY2l0eToxOycKICAgICAgICAgICAgLCd9JwogICAgICAgICAgICAsJy56bS1pdGVtLXZvdGUtY291bnQ6aG92ZXIsLnptLXZvdGViYXIgYnV0dG9uOmhvdmVyeycKICAgICAgICAgICAgLCcgICAgYmFja2dyb3VuZDojYTZjZTU2IWltcG9ydGFudDsnCiAgICAgICAgICAgICwnICAgIGNvbG9yOiMzRTVFMDAgIWltcG9ydGFudCcKICAgICAgICAgICAgLCd9JwogICAgICAgICAgICAsJycKICAgICAgICAgICAgLCdhLGE6aG92ZXIsJwogICAgICAgICAgICAsJ2ksJwogICAgICAgICAgICAsJy56dS1hdXRvaGlkZSwnCiAgICAgICAgICAgICwnLnptLXZvdGViYXIgYnV0dG9uLCcKICAgICAgICAgICAgLCcuem0taXRlbS1jb21tZW50OmhvdmVyIC56bS1jb21tZW50LW9wLWxpbmssJwogICAgICAgICAgICAsJy56bS1jb21tZW50LW9wLWxpbmssJwogICAgICAgICAgICAsJy56bS1zaWRlLXRyZW5kLXJvdzpob3ZlciAuem0tc2lkZS10cmVuZC1kZWwsJwogICAgICAgICAgICAsJy56bS1zaWRlLXRyZW5kLWRlbCwnCiAgICAgICAgICAgICwnLnptLXNpZGUtbmF2LWxpLCcKICAgICAgICAgICAgLCcuenUtbWFpbi1mZWVkLWZyZXNoLWJ1dHRvbiwnCiAgICAgICAgICAgICwnLnpnLWljb24sJwogICAgICAgICAgICAsJy56bS1zaWRlLW5hdi1saTpob3ZlciAuemctaWNvbiwnCiAgICAgICAgICAgICwnLnptLXNpZGUtbmF2LWxpOmhvdmVyIGksJwogICAgICAgICAgICAsJy51bnBpbiwnCiAgICAgICAgICAgICwnLnptLXNpZGUtbmF2LWxpOmhvdmVyIC51bnBpbiB7JwogICAgICAgICAgICAsJyAgICAtbW96LXRyYW5zaXRpb246Y29sb3IgLjJzIGxpbmVhcixvcGFjaXR5IC4xNXMgbGluZWFyLGJhY2tncm91bmQtY29sb3IgLjJzIGxpbmVhcixiYWNrZ3JvdW5kLXBvc2l0aW9uIC4ycyBsaW5lYXIgLjFzOycKICAgICAgICAgICAgLCcgICAgLXdlYmtpdC10cmFuc2l0aW9uOmNvbG9yIC4ycyBsaW5lYXIsb3BhY2l0eSAuMTVzIGxpbmVhcixiYWNrZ3JvdW5kLWNvbG9yIC4ycyBsaW5lYXIsYmFja2dyb3VuZC1wb3NpdGlvbiAuMnMgbGluZWFyIC4xczsnCiAgICAgICAgICAgICwnICAgIHRyYW5zaXRpb246Y29sb3IgLjJzIGxpbmVhcixvcGFjaXR5IC4xNXMgbGluZWFyLGJhY2tncm91bmQtY29sb3IgLjJzIGxpbmVhcixiYWNrZ3JvdW5kLXBvc2l0aW9uIC4ycyBsaW5lYXIgLjFzOycKICAgICAgICAgICAgLCd9JwogICAgICAgICAgICAsJycKICAgICAgICAgICAgLCdoM3sgbGluZS1oZWlnaHQ6MjVweCB9JwogICAgICAgICAgICAsJy56dS1mb290ZXItaW5uZXIge3BhZGRpbmc6MTVweCAwIWltcG9ydGFudH0nCiAgICAgICAgICAgICwnLnptLXNpZGUtcGlubmVkLXRvcGljcyAuem0tc2lkZS1uYXYtbGl7ZmxvYXQ6bGVmdDtwYWRkaW5nLXJpZ2h0OjMwcHghaW1wb3J0YW50fScKICAgICAgICAgICAgLCcuem0tc2lkZS1saXN0LWNvbnRlbnR7Y2xlYXI6Ym90aH0nCiAgICAgICAgICAgICwnLnVucGlueyBkaXNwbGF5OmlubGluZS1ibG9jayFpbXBvcnRhbnQgfScKICAgICAgICAgICAsJyddLmpvaW4oJ1xuJyk7Cn0KCnZhciBjc3NfY29tbWVudD0nJzsKaWYocGFnZUlzLkhvbWV8fHBhZ2VJcy5RdWVzdGlvbnx8cGFnZUlzLkFuc3dlcil7CiAgICBjc3NfY29tbWVudCA9IHdpbmRvdy5pWmhpaHUuQ29tbWVudC5jc3M7Cn0KCmNzcyArPSB3aW5kb3cuaVpoaWh1LkFuc3dlci5jc3M7CgppZih3aW5kb3cuaVpoaWh1LlF1aWNrRmF2byl7CiAgICBjc3MgKz0gd2luZG93LmlaaGlodS5RdWlja0Zhdm8uY3NzOwp9CmlmKHdpbmRvdy5pWmhpaHUuUXVpY2tCbG9jayl7CiAgICBjc3MgKz0gd2luZG93LmlaaGlodS5RdWlja0Jsb2NrLmNzczsKfQppZih3aW5kb3cuaVpoaWh1Lk5vdGk3KXsKICAgIGNzcyArPSB3aW5kb3cuaVpoaWh1Lk5vdGk3LmNzczsKICAgIHdpbmRvdy5pWmhpaHUuTm90aTcuZW5oYW5jZSgpOwp9CnZhciBoZWFkcyA9IF9kb2MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImhlYWQiKTsKaWYgKGhlYWRzLmxlbmd0aCA+IDApIHsKICAgIHZhciBub2RlID0gX2RvYy5jcmVhdGVFbGVtZW50KCJzdHlsZSIpOwogICAgbm9kZS50eXBlID0gInRleHQvY3NzIjsKICAgIG5vZGUuaWQgPSAiaXpoQ1NTX21haW4iOwogICAgbm9kZS5hcHBlbmRDaGlsZChfZG9jLmNyZWF0ZVRleHROb2RlKGNzcykpOwogICAgaGVhZHNbMF0uYXBwZW5kQ2hpbGQobm9kZSk7IAogICAgaWYoY3NzX2NvbW1lbnQhPScnKXsKICAgICAgICBub2RlID0gX2RvYy5jcmVhdGVFbGVtZW50KCJzdHlsZSIpCiAgICAgICAgbm9kZS50eXBlID0gInRleHQvY3NzIjsKICAgICAgICBub2RlLmlkID0gIml6aENTU19jb21tZW50IjsKICAgICAgICBub2RlLmFwcGVuZENoaWxkKF9kb2MuY3JlYXRlVGV4dE5vZGUoY3NzX2NvbW1lbnQpKTsKICAgICAgICBoZWFkc1swXS5hcHBlbmRDaGlsZChub2RlKTsKICAgIH0KfQoKaWYoISQoJy5tb2RhbC1kaWFsb2ctYmcnKS5sZW5ndGgpewogICAgJGJvZHkuYXBwZW5kKAogICAgICAgICQoJzxkaXYnLCB7IGlkOiAnaXpoLWRsZy1iZycsICdjbGFzcyc6ICdtb2RhbC1kaWFsb2ctYmcnIH0pLmNzcyh7CiAgICAgICAgICAgICd6LWluZGV4JzogOTUKICAgICAgICAgICwgJ29wYWNpdHknOiAwLjUKICAgICAgICAgICwgJ3Bvc2l0aW9uJzogJ2ZpeGVkJwogICAgICAgICAgLCAndG9wJzogMAogICAgICAgICAgLCAnYm90dG9tJzogMAogICAgICAgICAgLCAnbGVmdCc6IDAKICAgICAgICAgICwgJ3JpZ2h0JzogMAogICAgICAgICAgLCAnZGlzcGxheSc6ICdub25lJwogICAgICAgIH0pCiAgICApOwp9Cgp3aW5kb3cuaVpoaWh1LmdldEl0ZW09ZnVuY3Rpb24oJGMpewogICAgdmFyICRpdGVtPSQobnVsbCk7CiAgICBpZigkYyAmJiAkYy5sZW5ndGgpeyAKICAgICAgICB2YXIgJGl0ZW1NZXRhPSRjLmNsb3Nlc3QoJy56bS1pdGVtLW1ldGEnKTsKICAgICAgICBpZiAoJGl0ZW1NZXRhLmlzKCcuZmVlZC1tZXRhJykgfHwgJGl0ZW1NZXRhLnBhcmVudCgpLmlzKCcuZmVlZC1tZXRhJykpewogICAgICAgICAgICAkaXRlbT0kYy5jbG9zZXN0KCcuZmVlZC1pdGVtJyk7CiAgICAgICAgICAgICRpdGVtLmF0dHIoJ2RhdGEtYWlkJywgJGl0ZW0uY2hpbGRyZW4oJ21ldGFbaXRlbXByb3A9YW5zd2VyLWlkXScpLmF0dHIoJ2NvbnRlbnQnKSkKICAgICAgICB9ZWxzZSBpZigkaXRlbU1ldGEuaXMoJy5hbnN3ZXItYWN0aW9ucycpKXsKICAgICAgICAgICAgJGl0ZW09JGMuY2xvc2VzdCgnLnptLWl0ZW0tYW5zd2VyLC5mZWVkLWl0ZW0nKTsKICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgJGl0ZW09JGl0ZW1NZXRhLnByZXYoKTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gJGl0ZW07Cn07Cgp1dGlscy5vYnNlcnZlRE9NTm9kZUFkZGVkKGRvY3VtZW50LmJvZHksZnVuY3Rpb24oZXZlbnQpewoJaWYoaXpoVG9wTmF2QXV0b0ZvbGQpewoJCXdpbmRvdy5pWmhpaHUuVG9wTmF2Lm9uTm9kZUFkZGVkKGV2ZW50KQoJfQp9KQovKioKICogQGNsYXNzIEFuc3dlcgogKi8KZnVuY3Rpb24gQW5zd2VyKGlaaGlodSkgewogICAgaWYgKCB0eXBlb2YgaVpoaWh1ID09PSAndW5kZWZpbmVkJyB8fCAhaVpoaWh1KSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICBpWmhpaHUuQW5zd2VyID0gdGhpczsKCiAgICB0aGlzLl9lPW51bGw7CiAgICB0aGlzLnBwV2lkdGg9MDsKICAgIHRoaXMucHBIZWlnaHQ9NDAwOwoKICAgIHRoaXMuY3NzID0gCiAgICAgICAgWycuem0tdm90ZWJhciAuaXpoLWJ1dHRvbi5mb2xke21hcmdpbjo1cHggMHB4IDBweDtkaXNwbGF5OmJsb2NrO2NvbG9yOiM2OThFQkY7aGVpZ2h0OjI0cHg7bGluZS1oZWlnaHQ6MjRweDt3aWR0aDozOHB4O2JvcmRlci1yYWRpdXM6M3B4O2JvcmRlcjowcHggbm9uZTtjdXJzb3I6cG9pbnRlcjtiYWNrZ3JvdW5kOm5vbmUgcmVwZWF0IHNjcm9sbCAwJSAwJSAjRUZGNkZBO2ZvbnQtd2VpZ2h0OmZvbnQtd2VpZ2h0O3Bvc2l0aW9uOnJlbGF0aXZlO30nCiAgICAgICAgLCcnXS5qb2luKCdcbicpOwoKICAJdGhpcy5wcm9jZXNzQW5zd2VyPWZ1bmN0aW9uKCRhLCRwcCxiQXV0aG9yUmVhcixiQXV0aG9yTGlzdCl7CiAgICAgICAgaWYoISRhfHwhJGEubGVuZ3RoKXJldHVybjsKICAgICAgICBpZigkYS5hdHRyKCdpemhfcHJvY2Vzc2VkJyk9PScxJylyZXR1cm47CiAgICAgICAgdmFyIHNlbENvbGxhcHNlPScubWV0YS1pdGVtW25hbWU9Y29sbGFwc2VdJwogICAgICAgICAgLCAkbWV0YT0kYS5maW5kKCcuem0taXRlbS1tZXRhJykKICAgICAgICAgICwgJGF1dGhvcj0kYS5maW5kKCcuem0taXRlbS1hbnN3ZXItYXV0aG9yLWluZm8nKQogICAgICAgICAgLCAkZmF2bz0kYS5maW5kKCcubWV0YS1pdGVtW25hbWU9ZmF2b10nKQogICAgICAgICAgLCAkdm90ZT0kYS5maW5kKCcuem0tdm90ZWJhcicpCiAgICAgICAgOwogICAgICAgIGlmKGlaaGlodS5RdWlja0Jsb2NrKXsKICAgICAgICAgICAgLy8gUmVnaW9uOiDlv6vpgJ/lsY/olL0KICAgICAgICAgICAgaVpoaWh1LlF1aWNrQmxvY2suYWRkUXVpY2tCbG9jaygkYSkKCiAgICAgICAgICAgIC8vIFJlZ2lvbiBlbmQKICAgICAgICB9CiAgICAgICAgaWYoJGF1dGhvci5sZW5ndGgpey8vcmVsb2NhdGVQZXJzb25JbmZvCiAgICAgICAgICAgIGlmKGJBdXRob3JSZWFyKXsKICAgICAgICAgICAgICAgICRhdXRob3IuY3NzKHsKICAgICAgICAgICAgICAgICAgICAndGV4dEFsaWduJzoncmlnaHQnCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGlmKCRhLmlzKCcuZmVlZC1pdGVtJykpewogICAgICAgICAgICAgICAgICAgICRhLmZpbmQoJy5lbnRyeS1ib2R5IC56bS1pdGVtLWFuc3dlci1kZXRhaWwgLnptLWl0ZW0tcmljaC10ZXh0JykKICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkYXV0aG9yLmhpZGUoKSkuYmluZCgnRE9NTm9kZUluc2VydGVkJyxmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGM9JChldmVudC50YXJnZXQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJGMuaXMoJy56bS1lZGl0YWJsZS1jb250ZW50JykpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuY2hpbGRyZW4oJy56bS1pdGVtLWFuc3dlci1hdXRob3ItaW5mbycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5pbnNlcnRCZWZvcmUoJGMuY2hpbGRyZW4oJy5hbnN3ZXItZGF0ZS1saW5rLXdyYXAnKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncG9zaXRpb24nOidhYnNvbHV0ZScKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICdyaWdodCc6MAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5zaG93KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAgICAgJGF1dGhvci5pbnNlcnRCZWZvcmUoJG1ldGEpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgICRhdXRob3I9JGF1dGhvci5jaGlsZHJlbigpLmVxKDEpOwogICAgICAgICAgICBpZiAoJHBwICYmIGJBdXRob3JMaXN0KXsKICAgICAgICAgICAgICAgIC8vIFJlZ2lvbjog5Zue562U55uu5b2V6aG5CiAgICAgICAgICAgICAgICB2YXIgY29sbGFwc2VkPSRhLmF0dHIoJ2RhdGEtY29sbGFwc2VkJyk9PScxJwogICAgICAgICAgICAgICAgICAsICRwcGxhPSQoJzxhPicsewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZjonI2Fuc3dlci0nKyRhLmF0dHIoJ2RhdGEtYWlkJykKICAgICAgICAgICAgICAgICAgICAgICAgICAsIHRhcmdldDonX3NlbGYnCiAgICAgICAgICAgICAgICAgICAgICAgICAgLCBzdHlsZTpjc3NfQXV0aG9yTGlzdEl0ZW1BCiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICwgJHBwbD0kKCc8bGk+JykuYXBwZW5kKCRwcGxhKQogICAgICAgICAgICAgICAgICAsICR1bm89aVpoaWh1LiR1bm9BbnN3ZXJzCiAgICAgICAgICAgICAgICBpZihjb2xsYXBzZWQpewogICAgICAgICAgICAgICAgICAgICRwcGwuYXBwZW5kVG8oJHBwKQogICAgICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAgICAgJHBwbC5pbnNlcnRCZWZvcmUoJHVuby4kZW5kT2ZMYXN0QSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmKCRhLmF0dHIoJ2RhdGEtaXNvd25lcicpPT0nMScpewogICAgICAgICAgICAgICAgICAgIGlaaGlodS5BbnN3ZXIuX2U9JGEuZ2V0KDApOwogICAgICAgICAgICAgICAgICAgICRwcGxhLmFwcGVuZCgkKCc8c3Bhbj4nLCB7ICdjbGFzcyc6ICdtZScgfSkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIG5hbWVDU1M9J25hbWUnOwogICAgICAgICAgICAgICAgaWYoJGEuYXR0cignZGF0YS1pc2ZyaWVuZCcpPT0nMScpewogICAgICAgICAgICAgICAgICAgIG5hbWVDU1MrPScgZnJpZW5kJzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmKGNvbGxhcHNlZCl7CiAgICAgICAgICAgICAgICAgICAgbmFtZUNTUys9JyBjb2xsYXBzZWQnCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZighJGF1dGhvci5sZW5ndGgpewogICAgICAgICAgICAgICAgICAgIG5hbWVDU1MrPScgbm9uYW1lJzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICQoJzxzcGFuPicsewogICAgICAgICAgICAgICAgICAgICdjbGFzcyc6bmFtZUNTUwogICAgICAgICAgICAgICAgICAsIHN0eWxlOmNzc19BdXRob3JMaXN0SXRlbUFfbmFtZQogICAgICAgICAgICAgICAgfSkudGV4dCghJGF1dGhvci5sZW5ndGg/J+WMv+WQjeeUqOaItyc6JGF1dGhvci50ZXh0KCkpLmFwcGVuZFRvKCRwcGxhKTsKICAgICAgICAgICAgICAgIGlmICgkcHBsLndpZHRoKCk+aVpoaWh1LkFuc3dlci5wcFdpZHRoKQogICAgICAgICAgICAgICAgICAgIGlaaGlodS5BbnN3ZXIucHBXaWR0aD0kcHBsLndpZHRoKCk7CiAgICAgICAgICAgICAgICAvLyBSZWdpb24gZW5kCiAgICAgICAgICAgICAgICAvLyBSZWdpb246IOWbnuetlOevh+W5heaMh+ekugogICAgICAgICAgICAgICAgdmFyIG5IUD1NYXRoLmNlaWwoJCgnLnptLWVkaXRhYmxlLWNvbnRlbnQnLCRhKS50ZXh0KCkubGVuZ3RoLzEwMCk7CiAgICAgICAgICAgICAgICAkKCc8c3Bhbj4nLHsKICAgICAgICAgICAgICAgICAgICAnY2xhc3MnOidocCcKICAgICAgICAgICAgICAgIH0pLmNzcyh7J3dpZHRoJzpuSFAqMTAsJ21hcmdpbi1sZWZ0JzotbkhQKjEwfSkuYXBwZW5kVG8oJHBwbGEpOwogICAgICAgICAgICAgICAgLy8gUmVnaW9uIGVuZAogICAgICAgICAgICAgICAgJHBwbGEubW91c2VvdmVyKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgdmFyICRmcm09JCh0aGlzLnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlKQogICAgICAgICAgICAgICAgICAgICAgLCAkdW5vPWlaaGlodS4kdW5vQW5zd2VycwogICAgICAgICAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoJ3NlbCcpOwogICAgICAgICAgICAgICAgICAgIGlmKGlaaGlodS5BbnN3ZXIuX2UpewogICAgICAgICAgICAgICAgICAgICAgICAkdW5vLmNoaWxkcmVuKCcubWVUJykuY3NzKCdkaXNwbGF5JywwPmlaaGlodS5BbnN3ZXIuX2Uub2Zmc2V0VG9wLSRmcm0uc2Nyb2xsVG9wKCk/Jyc6J25vbmUnKTsKICAgICAgICAgICAgICAgICAgICAgICAgJHVuby5jaGlsZHJlbignLm1lQicpLmNzcygnZGlzcGxheScsJGZybS5oZWlnaHQoKTxpWmhpaHUuQW5zd2VyLl9lLm9mZnNldFRvcC0kZnJtLnNjcm9sbFRvcCgpK2laaGlodS5BbnN3ZXIuX2Uub2Zmc2V0SGVpZ2h0PycnOidub25lJyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIC8vIFJlZ2lvbjog5Zue562U6aKE6KeICiAgICAgICAgICAgICAgICAgICAgdmFyIG5hbT0kKCdzcGFuLm5hbWUnLHRoaXMpOwogICAgICAgICAgICAgICAgICAgIGlmKCFuYW0ubGVuZ3RoKXJldHVybjsKICAgICAgICAgICAgICAgICAgICB2YXIgYWlkPSQodGhpcykuYXR0cignaHJlZicpLnJlcGxhY2UoJyNhbnN3ZXItJywnJykKICAgICAgICAgICAgICAgICAgICAgICwgcHJ2PSR1bm8ubmV4dCgnLml6aC1hbnN3ZXItcHJldmlldycpCiAgICAgICAgICAgICAgICAgICAgICAsIHRvcD0kKHRoaXMpLnBvc2l0aW9uKCkudG9wKyR1bm8ucG9zaXRpb24oKS50b3AKICAgICAgICAgICAgICAgICAgICAgICwgc2VsPScuem0taXRlbS1hbnN3ZXJbZGF0YS1haWQ9JythaWQrJ10gPiAuem0taXRlbS1yaWNoLXRleHQnCiAgICAgICAgICAgICAgICAgICAgICAsIGN0eD1uYW0uaXMoJy5jb2xsYXBzZWQnKT8nI3poLXF1ZXN0aW9uLWNvbGxhcHNlZC13cmFwJzonI3poLXF1ZXN0aW9uLWFuc3dlci13cmFwJwogICAgICAgICAgICAgICAgICAgICAgLCBkaXY9JChzZWwsY3R4KQogICAgICAgICAgICAgICAgICAgICAgLCBjbXQ9JCgnLnptLWl0ZW0tbWV0YSA+IC56dS1xdWVzdGlvbi1hbnN3ZXItbWV0YS1jb21tZW50JyxkaXYucGFyZW50KCkpCiAgICAgICAgICAgICAgICAgICAgOwogICAgICAgICAgICAgICAgICAgIGlmKCFwcnYubGVuZ3RoKXsKICAgICAgICAgICAgICAgICAgICAgICAgcHJ2PSQoJzxkaXY+Jyx7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NsYXNzJzpkaXYuY2xhc3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ2l6aC1hbnN3ZXItcHJldmlldycpLndpZHRoKGRpdi53aWR0aCgpKzIyKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1vdXNlb3ZlcihmdW5jdGlvbigpeyR1bm8ubW91c2VvdmVyKCk7JCgnbGkgYVtocmVmPSMnKyQodGhpcykuYXR0cignZGF0YS1haWQnKSsnXScsJHVubykuYWRkQ2xhc3MoJ3NlbCcpOyQodGhpcykuc2hvdygpO30pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAubW91c2VvdXQoZnVuY3Rpb24oKXskdW5vLm1vdXNlb3V0KCk7JCgnbGkgYVtocmVmPSMnKyQodGhpcykuYXR0cignZGF0YS1haWQnKSsnXScsJHVubykucmVtb3ZlQ2xhc3MoJ3NlbCcpOyQodGhpcykuaGlkZSgpO30pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2xpY2soZnVuY3Rpb24oKXskKCdsaSBhW2hyZWY9IycrJCh0aGlzKS5hdHRyKCdkYXRhLWFpZCcpKyddJywkdW5vKVswXS5jbGljaygpO30pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuaW5zZXJ0QWZ0ZXIoJHVubykKICAgICAgICAgICAgICAgICAgICAgICAgOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZihwcnYuYXR0cignZGF0YS1haWQnKSE9YWlkKXsKICAgICAgICAgICAgICAgICAgICAgICAgcHJ2LmF0dHIoJ2RhdGEtYWlkJyxhaWQpLmVtcHR5KCkuYXBwZW5kKGRpdi5jbG9uZSgpLmNoaWxkcmVuKCkpLmZpbmQoJ2EnKS5hdHRyKCdvbmNsaWNrJywncmV0dXJuIGZhbHNlOycpOwogICAgICAgICAgICAgICAgICAgICAgICBpZigkKCdzcGFuLm1lJyx0aGlzKS5sZW5ndGgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcnYuZmluZCgnYS56dS1lZGl0LWJ1dHRvbicpLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgICAgICAgICBpZighbmFtLmhhc0NsYXNzKCdub25hbWUnKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJ2ltZy56bS1saXN0LWF2YXRhcicsZGl2LnBhcmVudCgpKS5jbG9uZSgpLmFwcGVuZFRvKHBydik7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0PWNtdC50ZXh0KCksaT10LmluZGV4T2YoJ+adoeivhOiuuicpOwogICAgICAgICAgICAgICAgICAgICAgICBpZihjbXQubGVuZ3RoJiZpPjApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCc8c3Bhbj4nLHsnY2xhc3MnOidjb21tZW50J30pLnRleHQodC5zdWJzdHJpbmcoMCxpKSkucHJlcGVuZChjbXQuY2hpbGRyZW4oJ2knKS5jbG9uZSgpKS5hcHBlbmRUbyhwcnYpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB2YXIgdGg9ZGl2LmhlaWdodCgpKzMzCiAgICAgICAgICAgICAgICAgICAgICAsIG1heFRvcD0kdW5vLnBvc2l0aW9uKCkudG9wKzEyCiAgICAgICAgICAgICAgICAgICAgICAsIGNvbnRlbnRQb3NpdGlvbj0nJzsKICAgICAgICAgICAgICAgICAgICBpZihtYXhUb3ArdGg8JHdpbi5oZWlnaHQoKSl7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRvcCt0aDwkd2luLmhlaWdodCgpKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBydi5jc3Moeyd0b3AnOnRvcD5tYXhUb3A/dG9wOm1heFRvcCwnYm90dG9tJzonJ30pOwogICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBydi5jc3Moeyd0b3AnOicnLCdib3R0b20nOjB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgICAgICBwcnYuY3NzKHsndG9wJzptYXhUb3AsJ2JvdHRvbSc6MH0pOwogICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50UG9zaXRpb249J2Fic29sdXRlJzsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcHJ2LmNzcyh7J2xlZnQnOiR1bm8ud2lkdGgoKX0pLnNob3coKS5jaGlsZHJlbigpLmZpcnN0KCkuY3NzKCdwb3NpdGlvbicsY29udGVudFBvc2l0aW9uKTsKICAgICAgICAgICAgICAgICAgICAvLyBSZWdpb24gZW5kCiAgICAgICAgICAgICAgICB9KS5tb3VzZW91dChmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ3NlbCcpOwogICAgICAgICAgICAgICAgICAgIHZhciAkdW5vPSQodGhpcy5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlKTsKICAgICAgICAgICAgICAgICAgICAkdW5vLm5leHQoKS5oaWRlKCk7CiAgICAgICAgICAgICAgICB9KS5jbGljayhmdW5jdGlvbigpeyQodGhpcykubW91c2VvdXQoKTsKICAgICAgICAgICAgICAgIGlaaGlodS4kdW5vQW5zd2Vycy5jc3MoJ2xlZnQnLDktaVpoaWh1LiR1bm9BbnN3ZXJzLndpZHRoKCkpO30pOwogICAgICAgICAgICAgICAgaWYoaVpoaWh1LkFuc3dlci5fZT09JGEuZ2V0KDApKXsKICAgICAgICAgICAgICAgICAgICBpWmhpaHUuQW5zd2VyLl9lPSRwcGxhLmdldCgwKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYoaVpoaWh1LlF1aWNrRmF2bykKICAgICAgICAgICAgaVpoaWh1LlF1aWNrRmF2by5hZGRRdWlja0Zhdm8oJGZhdm8sJGEpOwoKICAgICAgICAkbWV0YS5iaW5kKCdET01Ob2RlSW5zZXJ0ZWQnLGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICAgICAgaVpoaWh1LkNvbW1lbnQucHJvY2Vzc0NvbW1lbnQoJChldmVudC50YXJnZXQpKTsKICAgICAgICB9KTsKICAgICAgICAKICAgICAgICBpWmhpaHUuQ29tbWVudC5wcm9jZXNzQ29tbWVudEJ1dHRvbigkYSk7CgogICAgICAgIHZhciAkY209JCgnLnptLWNvbW1lbnQtYm94JywkYSk7CiAgICAgICAgaWYoJGNtLmxlbmd0aCAmJiAkY20uaXMoJzp2aXNpYmxlJykpewogICAgICAgIAl2YXIgZm9jdXNOYW1lID0gaVpoaWh1LkNvbW1lbnQuc2Nyb2xsRm9jdXNDb21tZW50T25QYWdlTG9hZCgkY20pOwogICAgCiAgICAgICAgICAgIGlaaGlodS5Db21tZW50Lm1ldGFTY3JvbGxUb1ZpZXdCb3R0b20oJGNtLmNsb3Nlc3QoJy56bS1pdGVtLW1ldGEnKSxmdW5jdGlvbigpewogICAgICAgICAgICAgICAgaVpoaWh1LkNvbW1lbnQucHJvY2Vzc0NvbW1lbnQoJGNtLCBmb2N1c05hbWUpOwogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgJGEuYXR0cignaXpoX3Byb2Nlc3NlZCcsJzEnKTsKICAgIH07CgogICAgcmV0dXJuIHRoaXM7Cn0KCi8qKgogKiBAY2xhc3MgQ29tbWVudAogKi8KZnVuY3Rpb24gQ29tbWVudChpWmhpaHUpIHsKICAgIGlmICggdHlwZW9mIGlaaGlodSA9PT0gJ3VuZGVmaW5lZCcgfHwgIWlaaGlodSkgewogICAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgaVpoaWh1LkNvbW1lbnQgPSB0aGlzOwoKICAgIHZhciBjc3NfY29tbWVudD17CiAgICAgICAgICAgICdiYWNrZ3JvdW5kLWNvbG9yJzonI2ZmZicKICAgICAgICAgICwgJ291dGxpbmUnOidub25lJwogICAgICAgICAgLCAnei1pbmRleCc6Jzk5OTknCiAgICAgICAgICAsICdib3JkZXItcmFkaXVzJzonMCA2cHggMCAwJwogICAgICAgICAgLCAncG9zaXRpb24nOidhYnNvbHV0ZScKICAgICAgICAgICwgJ3Zpc2liaWxpdHknOidoaWRkZW4nCiAgICAgICAgICAsICd0b3AnOi03MAogICAgICAgIH0KICAgIDsKICAgIHRoaXMuUmlnaHRDb21tZW50ID0gaVpoaWh1LmNvbmZpZ1snU2hvd0NvbW1lbnQnXTsKICAgIHRoaXMuQXV0b1Njcm9sbFBhZ2VXaGVuQ2xvc2luZyA9IGlaaGlodS5jb25maWdbJ1JpZ2h0Q29tbWVudF9BdXRvU2Nyb2xsUGFnZVdoZW5DbG9zaW5nJ107CiAgICBpZiAoIXRoaXMuUmlnaHRDb21tZW50KXsKICAgICAgICB0aGlzLmNzcyA9IAogICAgICAgICAgICBbJy56bS1jb21tZW50LWJveC5lbXB0eSAuaXpoLWJ1dHRvbi1jY3tkaXNwbGF5Om5vbmU7fScKICAgICAgICAgICAgLCcnXS5qb2luKCdcbicpOwogICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmNzcyA9IAogICAgICAgICAgICBbJy5tZW50aW9uLXBvcHVwe3otaW5kZXg6MTAwMDAgIWltcG9ydGFudDt9JwogICAgICAgICAgICAsJy56bS1pdGVtLW1ldGEgLm1ldGEtaXRlbS50b2dnbGUtY29tbWVudHtkaXNwbGF5OmJsb2NrO2Zsb2F0OnJpZ2h0O21hcmdpbi1sZWZ0OjdweCAhaW1wb3J0YW50O30nCiAgICAgICAgICAgICwnLnptLWNvbW1lbnQtYm94e3Bvc2l0aW9uOmFic29sdXRlO21hcmdpbi10b3A6MDt9JwogICAgICAgICAgICAsJy56bS1jb21tZW50LWJveCAuaWNvbi1zcGlrZXtkaXNwbGF5Om5vbmUgIWltcG9ydGFudDt9JwogICAgICAgICAgICAsJy56bS1jb21tZW50LWJveCA+IC56bS1jb21tZW50LWJveC1mdHtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7cmlnaHQ6MDt9JwogICAgICAgICAgICAsJy56bS1jb21tZW50LWJveC5lbXB0eXtwYWRkaW5nLXRvcDoxMHB4ICFpbXBvcnRhbnQ7fScKICAgICAgICAgICAgLCcuem0tY29tbWVudC1ib3ggPiAuem0tY29tbWVudC1mb3Jte21hcmdpbjoxNXB4ICFpbXBvcnRhbnQ7fScKICAgICAgICAgICAgLCcuem0tY29tbWVudC1ib3guZW1wdHkgPiAuem0tY29tbWVudC1mb3Jte2JvdHRvbToyNXB4O30nCiAgICAgICAgICAgICwnLnptLWNvbW1lbnQtYm94ID4gLnptLWNvbW1lbnQtZm9ybSAuem0tY29tbWVudC1lZGl0YWJsZXtwb3NpdGlvbjphYnNvbHV0ZTtib3R0b206NjBweDt0b3A6MDtsZWZ0OjA7cmlnaHQ6MDtvdmVyZmxvdzphdXRvO30nCiAgICAgICAgICAgICwnLnptLWNvbW1lbnQtYm94LmVtcHR5ID4gLnptLWNvbW1lbnQtZm9ybSAuem0tY29tbWVudC1lZGl0YWJsZXtib3R0b206MjVweDt9JwogICAgICAgICAgICAsJy56bS1jb21tZW50LWJveCA+IC56bS1jb21tZW50LWZvcm0gLnptLWNvbW1hbmR7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjQwcHg7fScKICAgICAgICAgICAgLCcuem0tY29tbWVudC1ib3guZW1wdHkgPiAuem0tY29tbWVudC1mb3JtIC56bS1jb21tYW5ke2JvdHRvbToxMHB4O30nCiAgICAgICAgICAgICwnLnptLWNvbW1lbnQtYm94IFtjbGFzc149aXpoLWJ1dHRvbnMtY21de3Bvc2l0aW9uOmFic29sdXRlO3RvcDo3MHB4O30nCiAgICAgICAgICAgICwnLnptLWNvbW1lbnQtYm94LmVtcHR5IFtjbGFzc149aXpoLWJ1dHRvbnMtY21de3RvcDphdXRvO2JvdHRvbTozMHB4O3otaW5kZXg6MTA7fScKICAgICAgICAgICAgLCcuem0tY29tbWVudC1ib3ggLml6aC1idXR0b25zLWNtLUx7bGVmdDowO30nCiAgICAgICAgICAgICwnLnptLWNvbW1lbnQtYm94IC5pemgtYnV0dG9ucy1jbS1MID4gYXttYXJnaW4tcmlnaHQ6N3B4O30nCiAgICAgICAgICAgICwnLnptLWNvbW1lbnQtYm94IC5pemgtYnV0dG9ucy1jbS1Se3JpZ2h0OjFlbTt9JwogICAgICAgICAgICAsJy56bS1jb21tZW50LWJveCAuaXpoLWJ1dHRvbnMtY20tUiA+IGF7bWFyZ2luLWxlZnQ6N3B4O30nCiAgICAgICAgICAgICwnLnptLWNvbW1lbnQtYm94IGEuaXpoLWJ1dHRvbi5vbntjb2xvcjojMjI1NTk5O3RleHQtc2hhZG93OjAgMCAxcHggIzIyNTU5OTt9JwogICAgICAgICAgICAsJy56bS1jb21tZW50LWJveCBhLml6aC1idXR0b24gLnpnLWljb257b3BhY2l0eTowLjU7fScKICAgICAgICAgICAgLCcuem0tY29tbWVudC1ib3ggYS5pemgtYnV0dG9uLm9uIC56Zy1pY29ue29wYWNpdHk6MTt9JwogICAgICAgICAgICAsJy56bS1jb21tZW50LWJveCBhLml6aC1idXR0b24ub2Zme2NvbG9yOiNlZWU7fScKICAgICAgICAgICAgLCcuem0tY29tbWVudC1ib3ggYS5pemgtYnV0dG9uLm9mZiAuemctaWNvbntvcGFjaXR5OjAuMjt9JwogICAgICAgICAgICAvLywnLnptLWNvbW1lbnQtYm94LmVtcHR5IFtjbGFzc149aXpoLWJ1dHRvbnMtY21de3RvcDphdXRvO2JvdHRvbTo3cHg7fScKICAgICAgICAgICAgLCcuem0tY29tbWVudC1ib3guZW1wdHkgLnptLWNvbW1lbnQtbGlzdHt2aXNpYmlsaXR5OmhpZGRlbjt9JwogICAgICAgICAgICAsJy56bS1jb21tZW50LWJveCAuem0tY29tbWVudC1saXN0IC56bS1pdGVtLWNvbW1lbnRbaXpoX2hpbGlnaHRde2JhY2tncm91bmQtY29sb3I6cmdiKDI1NSwyNTUsMTYwKTt9JwogICAgICAgICAgICAsJy56bS1jb21tZW50LWJveCAuaXpoLWJ1dHRvbi5vbiAuemctaWNvbi1jb21tZW50LWxpa2V7YmFja2dyb3VuZC1wb3NpdGlvbjotMjIycHggLTc5cHg7fScKICAgICAgICAgICAgLCcuem0tY29tbWVudC1ib3ggLml6aC1idXR0b24gLnotaWNvbi1mb2xke2hlaWdodDo2cHg7fScKICAgICAgICAgICAgLCcnXS5qb2luKCdcbicpOwogICAgICAgIHRoaXMub25XaW5Mb2FkPWZ1bmN0aW9uKCl7CiAgICAgICAgICAgIHZhciBpWmhpaHU9d2luZG93LmlaaGlodTsKICAgICAgICAgICAgaVpoaWh1LiR3aW4uc2Nyb2xsKGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICAgICAgICAgIGlmKGlaaGlodS5Db21tZW50Lk9wZW5pbmcmJiFpWmhpaHUuQ29tbWVudC5QYWdlTm90U2Nyb2xsKXsKICAgICAgICAgICAgICAgICAgICB2YXIgYW5pbWF0ZT10cnVlOwogICAgICAgICAgICAgICAgICAgIGlaaGlodS5Db21tZW50LmJveCgkKGlaaGlodS5Db21tZW50Lk9wZW5pbmcpLHRydWUsYW5pbWF0ZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIAogICAgICAgICAgICBpWmhpaHUuJHdpbi5yZXNpemUoZnVuY3Rpb24oZXZlbnQpewogICAgICAgICAgICAgICAgaWYoaVpoaWh1LkNvbW1lbnQuT3BlbmluZyl7CiAgICAgICAgICAgICAgICAgICAgdmFyICRjbT0kKGlaaGlodS5Db21tZW50Lk9wZW5pbmcpOwogICAgICAgICAgICAgICAgICAgIGlaaGlodS5Db21tZW50Lk9wZW5pbmcgPSBudWxsOwogICAgICAgICAgICAgICAgICAgIGlaaGlodS5Db21tZW50LmNsb3NlKG51bGwsJGNtKTsKICAgICAgICAgICAgICAgICAgICBpWmhpaHUuQ29tbWVudC5vcGVuKG51bGwsJGNtKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGlmKGlaaGlodS5TY3JvbGxUb3ApewogICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3A9aVpoaWh1LlNjcm9sbFRvcDsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB0aGlzLm9uV2luTG9hZCgpCiAgICB9CiAgICB0aGlzLnByb2Nlc3NDb21tZW50QnV0dG9uID0gZnVuY3Rpb24oJGEpewogICAgICAgIGlmKGlaaGlodS5Db21tZW50LlJpZ2h0Q29tbWVudCl7CiAgICAgICAgICAgIHZhciAkYmM9JGEuZmluZCgnLm1ldGEtaXRlbS50b2dnbGUtY29tbWVudCcpOwogICAgICAgICAgICAkYmMucHJlcGVuZFRvKCRiYy5wYXJlbnQoKSk7CiAgICAgICAgfQogICAgfTsKICAgIHRoaXMuc2Nyb2xsRm9jdXNDb21tZW50T25QYWdlTG9hZCA9IGZ1bmN0aW9uKCRjbSl7CiAgICAgICAgaWYoIWlaaGlodS5Db21tZW50LlJpZ2h0Q29tbWVudClyZXR1cm47CiAgICAgICAgdmFyIGZvY3VzTmFtZT11cmwuZGF0YS5hdHRyLmZyYWdtZW50OwogICAgICAgIGlmKCFmb2N1c05hbWV8fGZvY3VzTmFtZT09JycpcmV0dXJuOwogICAgCWlmKHdpbmRvdy5pWmhpaHU0Q1JYKXsKICAgICAgICAgICAgdmFyICRpY20yQz0kY20uZmluZCgnLnptLWNvbW1lbnQtbGlzdCAuem0taXRlbS1jb21tZW50IGEuemctYW5jaG9yLWhpZGRlbltuYW1lPSInK2ZvY3VzTmFtZSsnIl0nKS5wYXJlbnQoKQogICAgICAgICAgICAgICwgb2Zmc2V0VG9wPSRpY20yQy5sZW5ndGg/JGljbTJDLm9mZnNldCgpLnRvcDowCiAgICAgICAgICAgIDtpZihvZmZzZXRUb3Ape2RvY3VtZW50LmJvZHkuc2Nyb2xsVG9wPW9mZnNldFRvcDt9CiAgICAJfQogICAgICAgIHJldHVybiBmb2N1c05hbWU7CiAgICB9OwogICAgCiAgICB0aGlzLm1ldGFTY3JvbGxUb1ZpZXdCb3R0b20gPSBmdW5jdGlvbigkaXRlbU1ldGEsZnVuY0FmdGVyU2Nyb2xsLGFsd2F5cyxhbmltYXRlKXsKICAgICAgICBpZighaVpoaWh1LkNvbW1lbnQuUmlnaHRDb21tZW50IHx8ICFpWmhpaHUuQ29tbWVudC5BdXRvU2Nyb2xsUGFnZVdoZW5DbG9zaW5nKXsKICAgICAgICAgICAgaWYoZnVuY0FmdGVyU2Nyb2xsKXtmdW5jQWZ0ZXJTY3JvbGwoKTt9CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgaWYodHlwZW9mIGFsd2F5cyA9PT0gJ3VuZGVmaW5lZCcpYWx3YXlzPXRydWU7Ly9pZiBmYWxzZSwgc2Nyb2xsaW5nIG9ubHkgd2hlbiB0aGUgLnptLWl0ZW0tbWV0YSBvdXQgb2YgdmlzaWJsZSByYW5nZQogICAgICAgIGlmKHR5cGVvZiBhbmltYXRlID09PSAndW5kZWZpbmVkJylhbmltYXRlPWZhbHNlOy8vaWYgZmFsc2UsIHNjcm9sbGluZyBpbnN0YW50bHkKICAgICAgICBpZihhbHdheXMpJGl0ZW1NZXRhLmNoaWxkcmVuKCcuem0tY29tbWVudC1ib3gnKS5jc3MoJ3Bvc2l0aW9uJywnZml4ZWQnKTsKICAgICAgICB2YXIgd2luSGVpZ2h0PWlaaGlodS4kd2luLmhlaWdodCgpCiAgICAgICAgICAsIHNjcm9sbE9iaj13aW5kb3cuaVpoaWh1NENSWD9kb2N1bWVudC5ib2R5OmRvY3VtZW50LmRvY3VtZW50RWxlbWVudAogICAgICAgICAgLCBzY3JvbGxUb3BOb3c9c2Nyb2xsT2JqLnNjcm9sbFRvcAogICAgICAgICAgLCBuYXZIZWlnaHQ9aVpoaWh1LiRib2R5LmNoaWxkcmVuKCkuZmlyc3QoKS5oZWlnaHQoKQogICAgICAgICAgLCBiYXI9JCgnLnp1LWdsb2JhbC1ub3RpZnkuenUtZ2xvYmFsLW5vdGlmeS1pbmZvOnZpc2libGUnKQogICAgICAgICAgLCBiYXJIZWlnaHQ9IWJhci5sZW5ndGg/MDpiYXIub3V0ZXJIZWlnaHQoKQogICAgICAgICAgLCBiYXNlVG9wPSgoYmFySGVpZ2h0JiZiYXIuY3NzKCdwb3NpdGlvbicpPT0nZml4ZWQnKT9iYXJIZWlnaHQ6KHNjcm9sbFRvcE5vdz5iYXJIZWlnaHQ/MDpiYXJIZWlnaHQtc2Nyb2xsVG9wTm93KSkrbmF2SGVpZ2h0CiAgICAgICAgICAsIG1heEhlaWdodD13aW5IZWlnaHQtYmFzZVRvcAogICAgICAgICAgLCBtZXRhSGVpZ2h0PSRpdGVtTWV0YS5pbm5lckhlaWdodCgpCiAgICAgICAgICAsIG9mZnNldFRvcD0kaXRlbU1ldGEub2Zmc2V0KCkudG9wCiAgICAgICAgICAsIG9mZnNldEJvdHRvbT1vZmZzZXRUb3ArbWV0YUhlaWdodAogICAgICAgICAgLCAkaXRlbT1pWmhpaHUuZ2V0SXRlbSgkaXRlbU1ldGEpCiAgICAgICAgICAsIGl0ZW1IZWlnaHQ9JGl0ZW0uaW5uZXJIZWlnaHQoKQogICAgICAgICAgLCBvZmZzZXRUb3BBPSRpdGVtLm9mZnNldCgpLnRvcAogICAgICAgICAgLCBvZmZzZXRCb3R0b21BPW9mZnNldFRvcEEraXRlbUhlaWdodAogICAgICAgICAgLCBzY3JvbGxUb3BFbmQ9aXRlbUhlaWdodD5tYXhIZWlnaHQ/b2Zmc2V0Qm90dG9tLXdpbkhlaWdodDoob2Zmc2V0VG9wQTw9c2Nyb2xsVG9wTm93P29mZnNldFRvcEEtYmFzZVRvcDpvZmZzZXRCb3R0b20td2luSGVpZ2h0KQogICAgICAgIDsKICAgICAgICBpZighYWx3YXlzKXsKICAgICAgICAgICAgYWx3YXlzPW9mZnNldFRvcDxzY3JvbGxUb3BOb3crYmFzZVRvcHx8b2Zmc2V0Qm90dG9tPnNjcm9sbFRvcE5vdyt3aW5IZWlnaHQtYmFzZVRvcDsKICAgICAgICB9CiAgICAgICAgaWYoYWx3YXlzKXsKICAgICAgICAgICAgaVpoaWh1LlNjcm9sbFRvcD1zY3JvbGxUb3BFbmQ7CiAgICAgICAgICAgIGlmKGFuaW1hdGUpewogICAgICAgICAgICAgICAgJChzY3JvbGxPYmopLmFuaW1hdGUoeydzY3JvbGxUb3AnOnNjcm9sbFRvcEVuZH0sZnVuY0FmdGVyU2Nyb2xsKTsKICAgICAgICAJfWVsc2V7CiAgICAgICAgICAgICAgICAkKHNjcm9sbE9iaikuc2Nyb2xsVG9wKHNjcm9sbFRvcEVuZCk7CiAgICAgICAgICAgICAgICBpZihmdW5jQWZ0ZXJTY3JvbGwpe2Z1bmNBZnRlclNjcm9sbCgpO30KICAgICAgICAJfQogICAgICAgIH1lbHNlewogICAgICAgICAgICBpZihmdW5jQWZ0ZXJTY3JvbGwpe2Z1bmNBZnRlclNjcm9sbCgpO30KICAgICAgICB9CiAgICB9OwogICAgdGhpcy5ib3ggPSBmdW5jdGlvbigkY20sa2VlcFNpemUsYW5pbWF0ZSl7aWYoISRjbXx8ISRjbS5sZW5ndGgpcmV0dXJuOwogICAgICAgICRjbS5zdG9wKCk7CiAgICAgICAgaWYodHlwZW9mIGtlZXBTaXplID09PSAndW5kZWZpbmVkJylrZWVwU2l6ZT1mYWxzZTsKICAgICAgICBpZih0eXBlb2YgYW5pbWF0ZSA9PT0gJ3VuZGVmaW5lZCcpYW5pbWF0ZT1mYWxzZTsKICAgICAgICB2YXIgd2luSGVpZ2h0PWlaaGlodS4kd2luLmhlaWdodCgpCiAgICAgICAgICAsIHRoPWtlZXBTaXplP3BhcnNlSW50KCRjbS5hdHRyKCdpemhfY21IZWlnaHQnKSk6MAogICAgICAgICAgLCBzY3JvbGxUb3A9KGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wKT9kb2N1bWVudC5ib2R5LnNjcm9sbFRvcDpkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wCiAgICAgICAgICAsIG5hdkhlaWdodD1pWmhpaHUuJGJvZHkuY2hpbGRyZW4oKS5maXJzdCgpLmhlaWdodCgpCiAgICAgICAgICAsIGJhcj0kKCcuenUtZ2xvYmFsLW5vdGlmeS56dS1nbG9iYWwtbm90aWZ5LWluZm86dmlzaWJsZScpCiAgICAgICAgICAsIGJhckhlaWdodD0hYmFyLmxlbmd0aD8wOmJhci5vdXRlckhlaWdodCgpCiAgICAgICAgICAsIGJhc2VUb3A9KChiYXJIZWlnaHQmJmJhci5jc3MoJ3Bvc2l0aW9uJyk9PSdmaXhlZCcpP2JhckhlaWdodDooc2Nyb2xsVG9wPmJhckhlaWdodD8wOmJhckhlaWdodC1zY3JvbGxUb3ApKStuYXZIZWlnaHQKICAgICAgICAgICwgbWluSGVpZ2h0PTExMgogICAgICAgICAgLCBtYXhIZWlnaHQ9d2luSGVpZ2h0LWJhc2VUb3AtMzUKICAgICAgICAgICwgdG9vU21hbGw9bWF4SGVpZ2h0PG1pbkhlaWdodAogICAgICAgICAgLCAkbWV0YT0kY20uY2xvc2VzdCgnLnptLWl0ZW0tbWV0YScpCiAgICAgICAgICAsIG1ldGFIZWlnaHQ9MiokbWV0YS5oZWlnaHQoKS0kbWV0YS5pbm5lckhlaWdodCgpCiAgICAgICAgICAsIG9mZnNldFRvcD1zY3JvbGxUb3AtJG1ldGEub2Zmc2V0KCkudG9wCiAgICAgICAgICAsIG9mZnNldEJvdHRvbT0tb2Zmc2V0VG9wLXdpbkhlaWdodAogICAgICAgIDtpZih0b29TbWFsbCltYXhIZWlnaHQ9bWluSGVpZ2h0OwogICAgICAgIGlmKCF0aHx8aXNOYU4odGgpKXsKICAgICAgICAgICAgdmFyICR0PSRjbS5jbG9uZSgpLmNzcyh7J3Bvc2l0aW9uJzonYWJzb2x1dGUnLCd6LWluZGV4JzonLTEnfSkuYXBwZW5kVG8oZG9jdW1lbnQuYm9keSkuc2hvdygpCiAgICAgICAgICAgICAgLCAkbD0kdC5jaGlsZHJlbignLnptLWNvbW1lbnQtbGlzdCcpCiAgICAgICAgICAgIDsKICAgICAgICAgICAgaWYoISRjbS5pcygnLmVtcHR5JykmJiRsLmNoaWxkcmVuKCkubGVuZ3RoPjApJGwuY3NzKHsncG9zaXRpb24nOidhYnNvbHV0ZScsJ2hlaWdodCc6JycsJ3RvcCc6JycsJ2JvdHRvbSc6Jyd9KTsKICAgICAgICAgICAgdGg9JGwuaGVpZ2h0KCk7CiAgICAgICAgICAgIHRoKz10aD09MD9taW5IZWlnaHQ6MTAwOwogICAgICAgICAgICAkdC5yZW1vdmUoKTskdD1udWxsOy8vY29uc29sZS5sb2codGgpOwogICAgICAgICAgICAkY20uY3NzKCdoZWlnaHQnLHRoPD1taW5IZWlnaHQ/bWluSGVpZ2h0Oih0aDxtYXhIZWlnaHQ/dGgtMTAwOm1heEhlaWdodC04MCkpOwogICAgICAgIH0KICAgICAgICB2YXIgdGFyZ2V0PXt9LG90aGVyPXsnaGVpZ2h0JzonJ307CiAgICAgICAgJGNtLmF0dHIoJ2l6aF9jbUhlaWdodCcsdGgpLmNzcyh7J2Rpc3BsYXknOicnLCd2aXNpYmlsaXR5JzondmlzaWJsZScsJ3Bvc2l0aW9uJzonYWJzb2x1dGUnfSk7CiAgICAgICAgaWYodGg8PW1heEhlaWdodCl7CiAgICAgICAgICAgIHZhciB0b3A9LW9mZnNldFRvcC03MCxmaXhIZWlnaHQ9KHRoPD1taW5IZWlnaHQ/LTE6Nyk7CiAgICAgICAgICAgIGlmKCF0b29TbWFsbCYmdG9wK3RoPndpbkhlaWdodCl7CiAgICAgICAgICAgICAgICB0YXJnZXQ9eyd0b3AnOi1vZmZzZXRCb3R0b20tdGgtbWV0YUhlaWdodCtmaXhIZWlnaHQsJ2JvdHRvbSc6b2Zmc2V0Qm90dG9tfTsKICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICBvZmZzZXRUb3ArPSgoIXRvb1NtYWxsKSYmdG9wPmJhc2VUb3A/dG9wOmJhc2VUb3ApOwogICAgICAgICAgICAgICAgdGFyZ2V0PXsndG9wJzpvZmZzZXRUb3AsJ2JvdHRvbSc6LW9mZnNldFRvcC10aC1tZXRhSGVpZ2h0K2ZpeEhlaWdodH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJGNtLmZpbHRlcignLmVtcHR5JykuZmluZCgnLnptLWNvbW1lbnQtZm9ybSAuem0tY29tbWVudC1lZGl0YWJsZScpLmNzcyh7J2JvdHRvbSc6Jyd9KTsKICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgdGFyZ2V0PXsndG9wJzpvZmZzZXRUb3ArYmFzZVRvcCwnYm90dG9tJzpvZmZzZXRCb3R0b219OwogICAgICAgICAgICAkY20uZmlsdGVyKCcuZW1wdHknKS5maW5kKCcuem0tY29tbWVudC1mb3JtIC56bS1jb21tZW50LWVkaXRhYmxlJykuY3NzKHsnYm90dG9tJzonMjBweCd9KTsKICAgICAgICB9CiAgICAgICAgaWYoYW5pbWF0ZSl7CiAgICAgICAgICAgICRjbS5hbmltYXRlKHRhcmdldCxmdW5jdGlvbigpeyRjbS5jc3Mob3RoZXIpO30pOwogICAgICAgIH1lbHNlewogICAgICAgICAgICAkY20uY3NzKCQuZXh0ZW5kKHRhcmdldCxvdGhlcikpOwogICAgICAgIH0KICAgICAgICAkY207CiAgICB9OwogICAgdGhpcy5vcGVuID0gZnVuY3Rpb24oJGFjLCRjbSxpY21Gb2N1cyl7Ly8gaWYgJGFjIGlzIG51bGwsIGp1c3QgcmUtc2l6aW5nIGFuZCByZS1sb2NhdGluZyBjb21tZW50LWJveAogICAgICAgIHZhciBub0NvbW1lbnRPcGVuaW5nID0gaVpoaWh1LkNvbW1lbnQuT3BlbmluZyA9PSBudWxsOwogICAgICAgIGlaaGlodS5Db21tZW50Lk9wZW5pbmcgPSAkY20uYXR0cignaXpoLW9wZW5pbmcnLCcxJykuY3NzKHsnZGlzcGxheSc6J25vbmUnfSkuZ2V0KDApOwogICAgICAgICQoJy56bS1jb21tZW50LWJveDp2aXNpYmxlOm5vdChbaXpoLW9wZW5pbmc9MV0pJykKICAgICAgICAgICAgLmVhY2goZnVuY3Rpb24oaSxlKXsKICAgICAgICAgICAgICAgICQoZSkuY3NzKCd2aXNpYmlsaXR5JywnaGlkZGVuJykuY2xvc2VzdCgnLnptLWl0ZW0tbWV0YScpLmZpbmQoJy50b2dnbGUtY29tbWVudCcpWzBdLmNsaWNrKCk7CiAgICAgICAgICAgIH0pOwogICAgICAgIHZhciB3aW5XaWR0aD1pWmhpaHUuJHdpbi53aWR0aCgpCiAgICAgICAgICAsIG1jTGVmdD1pWmhpaHUuJG1haW4ub2Zmc2V0KCkubGVmdAogICAgICAgICAgLCAkY3Q9JGNtLmNsb3Nlc3QoJy56dS1tYWluLWNvbnRlbnQtaW5uZXInKQogICAgICAgICAgLCBjdE1hcmdpbkw9cGFyc2VJbnQoJGN0LmNzcygnbWFyZ2luLWxlZnQnKSkKICAgICAgICAgICwgY3RXaWR0aD0kY3Qud2lkdGgoKStjdE1hcmdpbkwKICAgICAgICAgICwgY3RMZWZ0PSRjdC5vZmZzZXQoKS5sZWZ0LWN0TWFyZ2luTAogICAgICAgICAgLCAkbWV0YT0kY20uY2xvc2VzdCgnLnptLWl0ZW0tbWV0YScpCiAgICAgICAgICAsIG10V2lkdGg9JG1ldGEuaW5uZXJXaWR0aCgpCiAgICAgICAgICAsIG1pbldpZHRoPWlaaGlodS4kbWFpbi53aWR0aCgpLWN0V2lkdGgKICAgICAgICAgICwgY21XaWR0aD1tdFdpZHRoCiAgICAgICAgICAsIG1heFdpZHRoPXdpbldpZHRoLWN0V2lkdGgKICAgICAgICAgICwgbz1mdW5jdGlvbigpewogICAgICAgICAgICAgICAgJGNtLmF0dHIoJ29wZW5lZCcsJzEnKTsKICAgICAgICAJCWlmKCEkYWMpewogICAgICAgICAgICAgICAgICAgIGlaaGlodS5Db21tZW50LmJveCgkY20pOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAJCX0KICAgICAgICAgICAgICAgIHZhciBjdXJyVG9wPV9kb2MuYm9keS5zY3JvbGxUb3AKICAgICAgICAgICAgICAgICAgLCAkbj0kYWMubmV4dCgpLCRuPSRuLmxlbmd0aD8kbjokYWMucGFyZW50KCkubmV4dCgpCiAgICAgICAgICAgICAgICAgICwgdD0kYWMub2Zmc2V0KCkudG9wLWlaaGlodS4kbWFpbi5vZmZzZXQoKS50b3AKICAgICAgICAgICAgICAgICAgLCBiPSRhYy5vZmZzZXQoKS50b3AtaVpoaWh1LiRtYWluLm9mZnNldCgpLnRvcAogICAgICAgICAgICAgICAgICAsIHc9JGFjLndpZHRoKCkKICAgICAgICAgICAgICAgICAgLCBpbkFuc3dlcj0kYWMuaXMoJy56bS1pdGVtLWFuc3dlcicpCiAgICAgICAgICAgICAgICAgICwgaW5RdWVzdGlvbj0kYWMuaXMoJyN6aC1xdWVzdGlvbi1kZXRhaWwnKQogICAgICAgICAgICAgICAgICAsICRxdWVzdGlvbk1ldGE9JCgnI3poLXF1ZXN0aW9uLW1ldGEtd3JhcCcpLy9xdWVzdGlvbl9tZXRhCiAgICAgICAgICAgICAgICAgICwgaD1pblF1ZXN0aW9uPyRxdWVzdGlvbk1ldGEub2Zmc2V0KCkudG9wKyRxdWVzdGlvbk1ldGEuaGVpZ2h0KCkrcGFyc2VJbnQoJHF1ZXN0aW9uTWV0YS5jc3MoJ3BhZGRpbmctYm90dG9tJykpLWlaaGlodS4kbWFpbi5vZmZzZXQoKS50b3AKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDokYWMuaGVpZ2h0KCkrcGFyc2VJbnQoJGFjLmNzcygncGFkZGluZy1ib3R0b20nKSkrcGFyc2VJbnQoJG4uY3NzKCdwYWRkaW5nLXRvcCcpKQogICAgICAgICAgICAgICAgOwogICAgICAgICAgICAgICAgaWYoISRhYy5maW5kKCcuaXpoX3RhcGVfYSwuaXpoX3RhcGVfYicpLmxlbmd0aCkKICAgICAgICAgICAgICAgICAgICAkYWMKICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8ZGl2PicsIHsgJ2NsYXNzJzogJ2l6aF90YXBlX2EnIH0pKQogICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxkaXY+JywgeyAnY2xhc3MnOiAnaXpoX3RhcGVfYicgfSkpCiAgICAgICAgICAgICAgICBpZighJGNtKSRjbT0kYWMuZmluZCgnLnptLWNvbW1lbnQtYm94Jyk7CiAgICAgICAgICAgICAgICBpZigkY20ubGVuZ3RoKXsKICAgICAgICAgICAgICAgICAgICBpZighJGNtLmF0dHIoJ3RhYmluZGV4JykpewogICAgICAgICAgICAgICAgICAgICAgICAkY20uYXR0cigndGFiaW5kZXgnLCctMScpLmZvY3VzKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmKGluUXVlc3Rpb24pewogICAgICAgICAgICAgICAgICAgICAgICAkKCcjaXpoX1F1ZXN0aW9uU2hhZG93JykuY3NzKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOmgKICAgICAgICAgICAgICAgICAgICAgICAgICAsICdtYXJnaW4tYm90dG9tJzotaAogICAgICAgICAgICAgICAgICAgICAgICB9KS5zaG93KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICRxdWVzdGlvbk1ldGEubmV4dCgnOnZpc2libGUnKS5hbmRTZWxmKCkuYWRkQ2xhc3MoJ2l6aF9ub0JvcmRlcicpOwogICAgICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgICAgICAkYWMuYWRkQ2xhc3MoJ2l6aF9ib3hTaGFkb3cnKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgJGFjLmZpbmQoJy5pemhfdGFwZV9hJykuY3NzKHsKICAgICAgICAgICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJzonYWJzb2x1dGUnCiAgICAgICAgICAgICAgICAgICAgICAsICd3aWR0aCc6MQogICAgICAgICAgICAgICAgICAgICAgLCAnaGVpZ2h0JzpoCiAgICAgICAgICAgICAgICAgICAgICAsICd0b3AnOjAKICAgICAgICAgICAgICAgICAgICAgICwgJ21hcmdpbi1sZWZ0Jzp3LTEKICAgICAgICAgICAgICAgICAgICAgICwgJ3otaW5kZXgnOicxMDAwMCcKICAgICAgICAgICAgICAgICAgICAgICwgJ2JhY2tncm91bmQtY29sb3InOicjZmZmJwogICAgICAgICAgICAgICAgICAgIH0pLnNob3coKTsKICAgICAgICAKICAgICAgICAgICAgICAgICAgICBpWmhpaHUuQ29tbWVudC5ib3goCiAgICAgICAgICAgICAgICAgICAgICAgICRjbS5jc3MoeydsZWZ0JzptdFdpZHRoLTF9KS5hdHRyKCdpemhfaW5RdWVzdGlvbicsaW5RdWVzdGlvbj8nMSc6JzAnKS5yZW1vdmVBdHRyKCdpemgtb3BlbmluZycpCiAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAkKCcubWVudGlvbi1wb3B1cCcpLmF0dHIoJ2RhdGEtYWlkJywkYWMuYXR0cignZGF0YS1haWQnKSk7CiAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAkYWMuZmluZCgnLnp1LXF1ZXN0aW9uLWFuc3dlci1tZXRhLWNvbW1lbnQnKVswXS5jbGljaygpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJGFjLmZpbmQoJy5pemhfdGFwZV9iJykuY3NzKHsKICAgICAgICAgICAgICAgICAgICAncG9zaXRpb24nOidhYnNvbHV0ZScKICAgICAgICAgICAgICAgICAgLCAnd2lkdGgnOjEKICAgICAgICAgICAgICAgICAgLCAnaGVpZ2h0JzpoCiAgICAgICAgICAgICAgICAgICwgJ3RvcCc6MAogICAgICAgICAgICAgICAgICAsICdtYXJnaW4tbGVmdCc6dwogICAgICAgICAgICAgICAgICAsICd6LWluZGV4JzonOTk5OCcKICAgICAgICAgICAgICAgICAgLCAnYmFja2dyb3VuZC1jb2xvcic6JyNlZWUnCiAgICAgICAgICAgICAgICB9KS5zaG93KCk7CiAgICAgICAgICAgICAgICAvLyRhYy5jc3MoJ2JvcmRlci1jb2xvcicsJyM5OTk5OTknKTsKICAgICAgICAgICAgICAgIC8vJG4uY3NzKCdib3JkZXItY29sb3InLCcjOTk5OTk5Jyk7CiAgICAgICAgICAgICAgICAkKCcuemgtYmFja3RvdG9wJykuY3NzKCd2aXNpYmlsaXR5JywnaGlkZGVuJyk7CiAgICAgICAgICAgICAgICBpWmhpaHUuJGJvZHkuc2Nyb2xsVG9wKGN1cnJUb3ApOwogICAgICAgICAgICAgICAgaWYoaWNtRm9jdXMpewogICAgICAgICAgICAgICAgICAgIHZhciAkaWNtPSQoaWNtRm9jdXMpLmF0dHIoJ2l6aF9oaWxpZ2h0JywnMScpCiAgICAgICAgICAgICAgICAgICAgICAsICRsaXN0PSRpY20uY2xvc2VzdCgnLnptLWNvbW1lbnQtbGlzdCcpOwogICAgICAgICAgICAgICAgICAgICRsaXN0LnNjcm9sbFRvcChpY21Gb2N1cy5vZmZzZXRUb3AtJGxpc3QuZ2V0KDApLm9mZnNldFRvcCk7CiAgICAgICAgICAgICAgICAgICAgaVpoaWh1LkNvbW1lbnQuSGlMaWdodEl0ZW09aWNtRm9jdXM7CiAgICAgICAgICAgICAgICAgICAgaVpoaWh1LkNvbW1lbnQuSGlMaWdodENvbG9yPSdyZ2IoMjU1LDI1NSwxNjApJzsKICAgICAgICAgICAgICAgICAgICAkaWNtLmNsaWNrKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpWmhpaHU9d2luZG93LmlaaGlodTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoaVpoaWh1JiZpWmhpaHUuQ29tbWVudC5IaUxpZ2h0SXRlbSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKGlaaGlodS5Db21tZW50LkhpTGlnaHRJdGVtKS5yZW1vdmVBdHRyKCdpemhfaGlsaWdodCcpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CgogICAgICAgIGlmKG1heFdpZHRoPjU0OSltYXhXaWR0aD01NDk7CiAgICAgICAgaWYoY21XaWR0aD5tYXhXaWR0aCkKICAgICAgICAgICAgY21XaWR0aD1tYXhXaWR0aDsKICAgICAgICBpZihjbVdpZHRoPG1pbldpZHRoKQogICAgICAgICAgICBjbVdpZHRoPW1pbldpZHRoOwogICAgICAgICRjbS5hZGRDbGFzcygnaXpoX2JveFNoYWRvdycpLmNzcygkLmV4dGVuZChjc3NfY29tbWVudCx7J3dpZHRoJzpjbVdpZHRoLTl9KSk7CiAgICAgICAgLy9pZighJGNtLmlzKCcuZW1wdHknKSkKICAgICAgICAgICAgJGNtLmNzcyh7J3BhZGRpbmcnOicxMDBweCAwcHggMHB4IDdweCd9KTsKICAgICAgICAkKCdpLnptLWNvbW1lbnQtYnViYmxlJywkY20pLmhpZGUoKTsKICAgICAgICBpZihub0NvbW1lbnRPcGVuaW5nKXsKICAgICAgICAgICAgdmFyIGNtV2lkdGhPdmVyPWNtV2lkdGgtd2luV2lkdGgKICAgICAgICAgICAgICAsIHNoaWZ0TGVmdD1jbVdpZHRoT3ZlcitjdFdpZHRoK2N0TGVmdAogICAgICAgICAgICA7CiAgICAgICAgICAgIGlmKHNoaWZ0TGVmdD4wKXsKICAgICAgICAgICAgICAgIGlmKHNoaWZ0TGVmdD5jdExlZnQpe3NoaWZ0TGVmdD1tY0xlZnQ7fQogICAgICAgICAgICAgICAgZWxzZSBpZihjbVdpZHRoT3Zlcj4wKXtzaGlmdExlZnQtPWNtV2lkdGhPdmVyO30KICAgICAgICAgICAgfQogICAgICAgICAgICBpZihzaGlmdExlZnQ8MCl7c2hpZnRMZWZ0PTA7fQogICAgICAgICAgICBpZihzaGlmdExlZnQgJiYgJGFjKXsKICAgICAgICAgICAgICAgICRjdC5jc3Moeydwb3NpdGlvbic6J3JlbGF0aXZlJywnbGVmdCc6MH0pLmFuaW1hdGUoe2xlZnQ6LXNoaWZ0TGVmdH0sbyk7CiAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgJGN0LmNzcyh7J3Bvc2l0aW9uJzoncmVsYXRpdmUnLCdsZWZ0Jzotc2hpZnRMZWZ0fSk7CiAgICAgICAgICAgICAgICBvKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgbygpOwogICAgICAgIH0JCiAgICB9OwogICAgdGhpcy5jbG9zZSA9IGZ1bmN0aW9uKCRhYywkY20pewogICAgICAgIGlmKCEkY20pJGNtPSRhYy5maW5kKCcuem0tY29tbWVudC1ib3gnKTsKICAgICAgICB2YXIgJGN0PSRjbS5jbG9zZXN0KCcuenUtbWFpbi1jb250ZW50LWlubmVyJyk7CiAgICAgICAgdmFyIG89ZnVuY3Rpb24oKXsKICAgICAgICAgICAgJCh0aGlzKS5jc3MoJ3Bvc2l0aW9uJywnJyk7CiAgICAgICAgICAgIGlmKCEkYWMpcmV0dXJuOwogICAgICAgICAgICB2YXIgJG49JGFjLm5leHQoKQogICAgICAgICAgICAgICwgJG49JG4ubGVuZ3RoPyRuOiRhYy5wYXJlbnQoKS5uZXh0KCkKICAgICAgICAgICAgICAsIGluUXVlc3Rpb249JGFjLmlzKCcjemgtcXVlc3Rpb24tZGV0YWlsJyk7CiAgICAgICAgICAgIGlmKCEkYWMpe3JldHVybjt9CiAgICAgICAgICAgIGlmKGluUXVlc3Rpb24pewogICAgICAgICAgICAgICAgJCgnI2l6aF9RdWVzdGlvblNoYWRvdycpLmhpZGUoKTsKICAgICAgICAgICAgICAgICQoJyN6aC1xdWVzdGlvbi1tZXRhLXdyYXAnKS5uZXh0KCc6dmlzaWJsZScpLmFuZFNlbGYoKS5yZW1vdmVDbGFzcygnaXpoX25vQm9yZGVyJyk7CiAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgJGFjLnJlbW92ZUNsYXNzKCdpemhfYm94U2hhZG93Jyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8kYWMuY3NzKCdib3JkZXItY29sb3InLCcjREREREREJyk7CiAgICAgICAgICAgIC8vJG4uY3NzKCdib3JkZXItY29sb3InLCcjREREREREJyk7CiAgICAgICAgICAgICQoJy5pemhfdGFwZV9hOnZpc2libGUsLml6aF90YXBlX2I6dmlzaWJsZScpLmhpZGUoKTsKICAgICAgICAgICAgJCgnLnpoLWJhY2t0b3RvcCcpLmNzcygndmlzaWJpbGl0eScsJ3Zpc2libGUnKTsKICAgICAgICB9OwoKICAgICAgICBpZihpWmhpaHUuQ29tbWVudC5PcGVuaW5nID09ICRjbS5nZXQoMCkpewogICAgICAgICAgICBpWmhpaHUuQ29tbWVudC5PcGVuaW5nID0gbnVsbDsKICAgICAgICAgICAgJGN0LmFuaW1hdGUoe2xlZnQ6MH0sbyk7CiAgICAgICAgfWVsc2V7CiAgICAgICAgICAgIGlmKCEkYWMpeyRjdC5jc3Moe2xlZnQ6MH0pO30KICAgICAgICAgICAgbygpOwogICAgICAgIH0KICAgICAgICAKICAgIH07CiAgICB0aGlzLnByb2Nlc3NDb21tZW50ID0gZnVuY3Rpb24oJGNtLGZvY3VzTmFtZSl7CiAgICAgICAgdmFyIGxvYWRpbmc9ZmFsc2U7CiAgICAgICAgaWYoJGNtLmlzKCcuem0tY29tbWVudC1zcGlubmVyJykpewogICAgICAgICAgICAkY209JGNtLmNsb3Nlc3QoJy56bS1jb21tZW50LWJveCcpOwogICAgICAgICAgICBsb2FkaW5nPXRydWU7CiAgICAgICAgfQogICAgICAgIGlmKCEkY20uaXMoJy56bS1jb21tZW50LWJveCcpKXJldHVybjsKICAgICAgICB2YXIgJGl0ZW09aVpoaWh1LmdldEl0ZW0oJGNtKTsKICAgICAgICBpZihpWmhpaHUuQ29tbWVudC5SaWdodENvbW1lbnQmJmxvYWRpbmcpewogICAgICAgICAgICB2YXIgY21MZWZ0PSRpdGVtLndpZHRoKCktMTsKICAgICAgICAgICAgJGNtLmNzcyh7J2xlZnQnOmNtTGVmdCwnd2lkdGgnOjIxNiwnei1pbmRleCc6JzEwMDAwJ30pOwogICAgICAgIH0KICAgICAgICBpZigkY20uZmlsdGVyKCcuem0tY29tbWVudC1ib3gnKS5oYXMoJy56bS1jb21tZW50LWxpc3QnKS5sZW5ndGgpewovKiBDb2xsZWN0aW9ucyBmb3IgY29tbWVudAogICAgICAgICAgICAkY20uZmluZCgnLnptLWNvbW1lbnQtZWRpdGFibGUnKS5iaW5kKCdET01Ob2RlSW5zZXJ0ZWQnLGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICAgICAgICAgIHZhciAkYz0kKGV2ZW50LnRhcmdldCksJGNtPSRjLmNsb3Nlc3QoJy56bS1jb21tZW50LWJveCcpOwogICAgICAgICAgICAgICAgaWYoJGMuaXMoJ2EubWVtYmVyX21lbnRpb24nKSl7CiAgICAgICAgICAgICAgICAgICAgaWYoJGNtLmNoaWxkcmVuKCcuaXpoX2NvbGxlY3Rpb25zJykubGVuZ3RoPD0wKXsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnPGRpdiBjbGFzcz0iaXpoX2NvbGxlY3Rpb25zIj5sb2FkaW5nLi4uPC9kaXY+JykuYmluZCgnbW91c2VvdmVyJyxmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5zaG93KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pLmJpbmQoJ21vdXNlb3V0JyxmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5oaWRlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pLmFwcGVuZFRvKCRjbSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICRjLmJpbmQoJ21vdXNlb3ZlcicsZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRjZT0kKHRoaXMpLmNsb3Nlc3QoJy56bS1jb21tZW50LWVkaXRhYmxlJyksJGNtPSQodGhpcykuY2xvc2VzdCgnLnptLWNvbW1lbnQtYm94Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgICRjbS5jaGlsZHJlbignLml6aF9jb2xsZWN0aW9ucycpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYm90dG9tJzokKHRoaXMpLmhlaWdodCgpLSQodGhpcykucG9zaXRpb24oKS50b3AtMQogICAgICAgICAgICAgICAgICAgICAgICAgICwgJ2xlZnQnOiQodGhpcykucG9zaXRpb24oKS5sZWZ0CiAgICAgICAgICAgICAgICAgICAgICAgIH0pLnNob3coKTsKICAgICAgICAgICAgICAgICAgICAgICAgJC5wb3N0KCdodHRwOi8vd3d3LnpoaWh1LmNvbScrJCh0aGlzKS5hdHRyKCdocmVmJykrJy9jb2xsZWN0aW9ucycKICAgICAgICAgICAgICAgICAgICAgICAgICAsICQucGFyYW0oe194c3JmOiQoJ2lucHV0W25hbWU9X3hzcmZdJykudmFsKCl9KQogICAgICAgICAgICAgICAgICAgICAgICAgICwgZnVuY3Rpb24ocmVzdWx0LHN0YXR1cyx4aHIpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAkYy5iaW5kKCdtb3VzZW91dCcsZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRjZT0kKHRoaXMpLmNsb3Nlc3QoJy56bS1jb21tZW50LWVkaXRhYmxlJyksJGNtPSQodGhpcykuY2xvc2VzdCgnLnptLWNvbW1lbnQtYm94Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgICRjbS5jaGlsZHJlbignLml6aF9jb2xsZWN0aW9ucycpLmhpZGUoKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiovCiAgICAgICAgICAgIGlmKGlaaGlodS5Db21tZW50LlJpZ2h0Q29tbWVudCl7CiAgICAgICAgICAgICAgICAkY20uY2xvc2VzdCgnLnptLWl0ZW0tbWV0YScpLmZpbmQoJy50b2dnbGUtY29tbWVudCcpLmNsaWNrKGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICAgICAgICAgICAgICB2YXIgJG9wZW5lZEJ5PSQodGhpcykKICAgICAgICAgICAgICAgICAgICAgICwgJGFjPSRvcGVuZWRCeS5jbG9zZXN0KCcuem0taXRlbS1tZXRhJykKICAgICAgICAgICAgICAgICAgICAgICwgJGNtPSgkYWMucGFyZW50KCkuaXMoJy56bS1pdGVtLW1ldGEuZmVlZC1tZXRhJyk/JGFjLnBhcmVudCgpOiRhYykuZmluZCgnLnptLWNvbW1lbnQtYm94JykuY3NzKCd2aXNpYmlsaXR5JywnaGlkZGVuJykKICAgICAgICAgICAgICAgICAgICA7CiAgICAgICAgICAgICAgICAgICAgaWYoJGNtLmxlbmd0aCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkaXRlbT1pWmhpaHUuZ2V0SXRlbSgkY20pOwogICAgICAgICAgICAgICAgICAgICAgICBpZigkY20uaXMoJzpoaWRkZW4nKSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpWmhpaHUuQ29tbWVudC5vcGVuKCRpdGVtLCRjbSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaVpoaWh1LkNvbW1lbnQuY2xvc2UoJGl0ZW0sJGNtKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vaWYoJGNtLmlzKCcuZW1wdHknKSkgcmV0dXJuOwogICAgICAgICAgICB2YXIgJGxpc3Q9JGNtLmZpbmQoJy56bS1jb21tZW50LWxpc3QnKTsKICAgICAgICAgICAgJGxpc3QuYmluZCgnRE9NTm9kZUluc2VydGVkJyxmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgIC8vdXRpbHMub2JzZXJ2ZURPTU5vZGVBZGRlZCgkbGlzdFswXSxmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgIAkvKmlmKCFldmVudC5hZGRlZE5vZGVzKXJldHVybjsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdOb2RlcyAnK2V2ZW50LmFkZGVkTm9kZXMubGVuZ3RoKycgaW5zZXJ0ZWQnKTsKICAgICAgICAgICAgCWZvcih2YXIgaT0wO2k8ZXZlbnQuYWRkZWROb2Rlcy5sZW5ndGg7aSsrKXsKICAgICAgICAgICAgCQl2YXIgJGljbT0kKGV2ZW50LmFkZGVkTm9kZXNbaV0pOwogICAgICAgICAgICAgICAgfSovCiAgICAgICAgICAgICAgICB2YXIgJGljbT0kKGV2ZW50LnRhcmdldCkuZmlsdGVyKCcuem0taXRlbS1jb21tZW50LC56bS1jb21tZW50LWZvcm0nKTsKICAgICAgICAgICAgICAgIGlmKCEkaWNtLmxlbmd0aClyZXR1cm47CiAgICAgICAgICAgICAgICB2YXIgJGxpc3Q9JCh0aGlzKQogICAgICAgICAgICAgICAgICAsICRjbT0kbGlzdC5jbG9zZXN0KCcuem0tY29tbWVudC1ib3g6dmlzaWJsZScpOwogICAgICAgICAgICAgICAgaWYoJGljbS5pcygnLnptLWl0ZW0tY29tbWVudCcpKXsKICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCRpY20pOwogICAgICAgICAgICAgICAgICAgIGlmKGlaaGlodS5RdWlja0Jsb2NrKXsKICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnQWRkaW5nIFF1aWNrQmxvY2snKTsKICAgICAgICAgICAgICAgICAgICAgICAgaVpoaWh1LlF1aWNrQmxvY2suYWRkUXVpY2tCbG9ja0luT25lQ29tbWVudCgkaWNtKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYoaVpoaWh1LkNvbW1lbnQuUmlnaHRDb21tZW50KXsKICAgICAgICAgICAgICAgICAgICAgICAgJGxpc3QuY3NzKCdoZWlnaHQnLCcxMDAlJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICRpY20uc2hvdygpLmJpbmQoJ0RPTU5vZGVSZW1vdmVkJyxmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGljbT0kKGV2ZW50LnRhcmdldCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZighJGljbS5pcygnLnptLWl0ZW0tY29tbWVudCcpKXJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkbGlzdD0kaWNtLmhpZGUoKS5jbG9zZXN0KCcuem0tY29tbWVudC1saXN0JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAkY209JGxpc3QuY2xvc2VzdCgnLnptLWNvbW1lbnQtYm94OnZpc2libGUnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRjbS5sZW5ndGgpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ1JlZnJlc2hpbmcgY29tbWVudCBsaXN0Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJGxpc3QuY2hpbGRyZW4oKS5sZW5ndGg9PTEpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuaXpoLXF1aWNrLWJsb2NrLXN3aXRjaCcsJGNtKS5hZGQoJy5pemgtYnV0dG9ucy1jbS1SJywkY20pLmhpZGUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaVpoaWh1LkNvbW1lbnQuYm94KCRjbSxmYWxzZSxmYWxzZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRjbS5sZW5ndGgpewogICAgICAgICAgICAJICAgICAgICAgICAgdmFyIGNvdW50Tm93PSRsaXN0LmNoaWxkcmVuKCkubGVuZ3RoCiAgICAgICAgICAgICAgICAgICAgICAgIAkgICwgY291bnRBbGw9cGFyc2VJbnQoJGNtLmF0dHIoJ2RhdGEtY291bnQnKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBjb3VudFJlc3Q9Y291bnRBbGwtY291bnROb3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBub3RBbGw9JCh0aGlzKS5oYXMoJy5sb2FkLW1vcmUnKS5sZW5ndGgKICAgICAgICAgICAgICAgICAgICAgICAgCTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCghbm90QWxsKSYmY291bnRSZXN0PjEpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgCXJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ1JlZnJlc2hpbmcgY29tbWVudCBsaXN0Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuaXpoLXF1aWNrLWJsb2NrLXN3aXRjaCcsJGNtKS5hZGQoJy5pemgtYnV0dG9ucy1jbS1SJywkY20pLnNob3coKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlaaGlodS5Db21tZW50LmJveCgkY20sZmFsc2UsZmFsc2UpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYobm90QWxsfHxjb3VudFJlc3Q8MCkkbGlzdC5zY3JvbGxUb3AoJGljbS5nZXQoMCkub2Zmc2V0VG9wKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH1lbHNlIGlmKCRpY20uaXMoJy56bS1jb21tZW50LWZvcm0nKSl7CiAgICAgICAgICAgICAgICAgICAgaWYoaVpoaWh1LkNvbW1lbnQuUmlnaHRDb21tZW50KXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoJGNtLmxlbmd0aCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJHJjbT0kaWNtOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGljbT0kcmNtLmNsb3Nlc3QoJy56bS1pdGVtLWNvbW1lbnQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyY20uZmluZCgnYS56bS1jb21tZW50LWNsb3NlLnptLWNvbW1hbmQtY2FuY2VsJykuY2xpY2soZnVuY3Rpb24oZXZlbnQpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkcmNtPSQodGhpcykuY2xvc2VzdCgnLnptLWNvbW1lbnQtZm9ybScpLmhpZGUoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAkY209JHJjbS5jbG9zZXN0KCcuem0tY29tbWVudC1ib3g6dmlzaWJsZScpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRjbS5sZW5ndGgpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpWmhpaHUuQ29tbWVudC5ib3goJGNtLGZhbHNlLGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyY20ucGFyZW50KCkuZmluZCgnYS5yZXBseS56bS1jb21tZW50LW9wLWxpbmsnKS5jbGljayhmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRyY209JCh0aGlzKS5jbG9zZXN0KCcuem0tY29tbWVudC1jb250ZW50LXdyYXAnKS5jaGlsZHJlbignLnptLWNvbW1lbnQtZm9ybScpLnRvZ2dsZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICRpY209JCh0aGlzKS5jbG9zZXN0KCcuem0taXRlbS1jb21tZW50JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgJGxpc3Q9JGljbS5jbG9zZXN0KCcuem0tY29tbWVudC1saXN0JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgJGNtPSRsaXN0LmNsb3Nlc3QoJy56bS1jb21tZW50LWJveDp2aXNpYmxlJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJGNtLmxlbmd0aCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlaaGlodS5Db21tZW50LmJveCgkY20sZmFsc2UsZmFsc2UpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkcmNtLmlzKCc6dmlzaWJsZScpKSRsaXN0LnNjcm9sbFRvcCgkaWNtLmdldCgwKS5vZmZzZXRUb3AtJGxpc3QuZ2V0KDApLm9mZnNldFRvcCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyY20udG9nZ2xlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpWmhpaHUuQ29tbWVudC5ib3goJGNtLGZhbHNlLGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRsaXN0LnNjcm9sbFRvcCgkaWNtLmdldCgwKS5vZmZzZXRUb3AtJGxpc3QuZ2V0KDApLm9mZnNldFRvcCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICB2YXIgY21DbG9zZT1mdW5jdGlvbihldmVudCxhbHNvU2Nyb2xsVG9WaWV3Qm90dG9tKXsKICAgICAgICAgICAgICAgICAgICB2YXIgJGNtPSQodGhpcykuY2xvc2VzdCgnLnptLWNvbW1lbnQtYm94Jyk7CiAgICAgICAgICAgICAgICAJCWlmKCQodGhpcykuaXMoJ1tuYW1lPWNsb3NlZm9ybV0nKSYmKCEkY20uaXMoJy5lbXB0eScpKSlyZXR1cm47CiAgICAgICAgICAgICAgICAgICAgdmFyICRpdGVtPWlaaGlodS5nZXRJdGVtKCRjbSkvLy5hdHRyKCd0YWJpbmRleCcsJy0xJykuZm9jdXMoKS5yZW1vdmVBdHRyKCd0YWJpbmRleCcpCiAgICAgICAgICAgICAgICAgICAgICAsICRpdGVtTWV0YT0kY20uY2xvc2VzdCgnLnptLWl0ZW0tbWV0YScpCiAgICAgICAgICAgICAgICAgICAgICAsIGFsc29TY3JvbGw9dGhpcy5nZXRBdHRyaWJ1dGUoJ2l6aC1hbHNvU2Nyb2xsVG9WaWV3Qm90dG9tJyl8fCcnCiAgICAgICAgICAgICAgICAgICAgICAsIHNjcm9sbFRvcD0oZG9jdW1lbnQuYm9keS5zY3JvbGxUb3ApP2RvY3VtZW50LmJvZHkuc2Nyb2xsVG9wOmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AKICAgICAgICAgICAgICAgICAgICA7CiAgICAgICAgICAgICAgICAgICAgaWYoYWxzb1Njcm9sbCE9PScxJyl7CiAgICAgICAgICAgICAgICAgICAgICAgICRpdGVtTWV0YS5maW5kKCcudG9nZ2xlLWNvbW1lbnQnKVswXS5jbGljaygpOwogICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcD1zY3JvbGxUb3A7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wPXNjcm9sbFRvcDsKICAgICAgICAgICAgICAgICAgICAgICAgfSwxMDApOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlaaGlodS5Db21tZW50Lm1ldGFTY3JvbGxUb1ZpZXdCb3R0b20oJGl0ZW1NZXRhLGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgICRpdGVtTWV0YS5maW5kKCcudG9nZ2xlLWNvbW1lbnQnKVswXS5jbGljaygpOwogICAgICAgICAgICAgICAgICAgIH0sZmFsc2UsdHJ1ZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgLCAkYnRuQ0M9JCgnPGE+Jyx7CiAgICAgICAgICAgICAgICAgICAgJ2NsYXNzJzonenUtcXVlc3Rpb24tYW5zd2VyLW1ldGEtY29tbWVudCBpemgtYnV0dG9uLWNjJwogICAgICAgICAgICAgICAgICAsIGhyZWY6J2phdmFzY3JpcHQ6dm9pZCgwKTsnCiAgICAgICAgICAgICAgICAgICwgY2xpY2s6Y21DbG9zZQogICAgICAgICAgICAgICAgICAsICdkYXRhLXRpcCc6J3MkdCTmlLbotbfor4Torrrlubbot7Povazoh7PmiYDlsZ7lm57nrZQnCiAgICAgICAgICAgICAgICB9KS50ZXh0KCfmlLbotbcnKQogICAgICAgICAgICAgICwgJGJ1dHRvbnNMPSQoJzxkaXY+Jyx7CiAgICAgICAgICAgICAgICAJJ2NsYXNzJzonaXpoLWJ1dHRvbnMtY20tTCcKICAgICAgICAgICAgICAgIH0pLnByZXBlbmRUbygkY20pCiAgICAgICAgICAgICAgLCAkYnV0dG9uc1I9JCgnPGRpdj4nLHsKICAgICAgICAgICAgICAgIAknY2xhc3MnOidpemgtYnV0dG9ucy1jbS1SJwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgOwogICAgICAgICAgICBpZihpWmhpaHUuQ29tbWVudC5SaWdodENvbW1lbnQpewogICAgICAgICAgICAgICAgJGNtLmNoaWxkcmVuKCcuem0tY29tbWVudC1mb3JtJykuZmluZCgnW25hbWU9Y2xvc2Vmb3JtXScpLmNsaWNrKGNtQ2xvc2UpOwogICAgICAgICAgICAgICAgJGJ0bkNDLmNsb25lKHRydWUpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgJ2JhY2tncm91bmQtaW1hZ2UnOiAndXJsKCIvc3RhdGljL2ltZy9zcHJpdGVzLTEuOS4yLnBuZyIpJwogICAgICAgICAgICAgICAgICAsICdiYWNrZ3JvdW5kLXBvc2l0aW9uJzogJy0yNjFweCAtNjJweCcKICAgICAgICAgICAgICAgICAgLCAnYmFja2dyb3VuZC1yZXBlYXQnOiAnbm8tcmVwZWF0JwogICAgICAgICAgICAgICAgICAsICdkaXNwbGF5JzogJ2lubGluZS1ibG9jaycKICAgICAgICAgICAgICAgICAgLCAnd2lkdGgnOiAxNQogICAgICAgICAgICAgICAgICAsICdoZWlnaHQnOiAxNQogICAgICAgICAgICAgICAgICAsICdwb3NpdGlvbic6ICdhYnNvbHV0ZScKICAgICAgICAgICAgICAgICAgLCAnbGVmdCc6IDAKICAgICAgICAgICAgICAgICAgLCAndG9wJzogMAogICAgICAgICAgICAgICAgICAsICd6LWluZGV4JzogJzEwMDAwJwogICAgICAgICAgICAgICAgfSkuYXR0cignZGF0YS10aXAnLCdzJGwk5pS26LW36K+E6K66JykudGV4dCgnJykucHJlcGVuZFRvKCRjbSkKICAgICAgICAgICAgICAgICRidXR0b25zUi5wcmVwZW5kVG8oJGNtKTsKICAgICAgICAgICAgICAgIGlmKCRsaXN0LmNoaWxkcmVuKCkubGVuZ3RoPT0wKXsKICAgICAgICAgICAgICAgICAgICAkYnV0dG9uc1IuaGlkZSgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJGJ0bkNDLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgJ2Zsb2F0JzonbGVmdCcKICAgICAgICAgICAgICAgICAgLCAnbWFyZ2luLWxlZnQnOjcKICAgICAgICAgICAgICAgIH0pLmF0dHIoJ2l6aC1hbHNvU2Nyb2xsVG9WaWV3Qm90dG9tJywnMScpLnByZXBlbmQoJzxpIGNsYXNzPSJ6LWljb24taXpoLWZvbGQiLz4nKS5wcmVwZW5kVG8oJGJ1dHRvbnNMKTsKICAgICAgICAgICAgICAgICQoJzxhPicsewogICAgICAgICAgICAgICAgICAgICdjbGFzcyc6J2l6aC1idXR0b24gaXpoLWJhY2stdG9wJwogICAgICAgICAgICAgICAgICAsICdkYXRhLXRpcCc6J3MkbCTov5Tlm57pobbpg6gnCiAgICAgICAgICAgICAgICAgICwgaHJlZjonamF2YXNjcmlwdDp2b2lkKDApOycKICAgICAgICAgICAgICAgICAgLCBjbGljazpmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMucGFyZW50Tm9kZSkubmV4dEFsbCgnLnptLWNvbW1lbnQtbGlzdCcpLnNjcm9sbFRvcCgwKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KS5hcHBlbmQoCiAgICAgICAgICAgICAgICAgICAgJCgnPGk+JywgeyAnY2xhc3MnOiAnemctaWNvbiB6LWljb24tZm9sZCcgfSkKICAgICAgICAgICAgICAgICkuYWRkKAogICAgICAgICAgICAgICAgICAgICQoJzxhPicsewogICAgICAgICAgICAgICAgICAgICAgICAnY2xhc3MnOidpemgtYnV0dG9uIGl6aC1zaG93LWdvb2QnCiAgICAgICAgICAgICAgICAgICAgICAsICdkYXRhLXRpcCc6J3MkbCTkurrmsJTlppnor4QnCiAgICAgICAgICAgICAgICAgICAgICAsIGhyZWY6J2phdmFzY3JpcHQ6dm9pZCgwKTsnCiAgICAgICAgICAgICAgICAgICAgICAsIGNsaWNrOmZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkZT0kKHRoaXMpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAkYz0kZS5jbG9zZXN0KCcuem0tY29tbWVudC1ib3gnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgJGw9JGMuZmluZCgnLnptLWNvbW1lbnQtbGlzdCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAkbj0kbC5maW5kKCcuem0taXRlbS1jb21tZW50JykuaGFzKCdzcGFuLmxpa2UtbnVtLm5pbCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJGUuaGFzQ2xhc3MoJ29uJykpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGUuYXR0cignc2Nyb2xsVG9wX3Nob3dnb29kJywkbFswXS5zY3JvbGxUb3ApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJG4uc2hvdygpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaVpoaWh1LkNvbW1lbnQuYm94KCRjLGZhbHNlLGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRlLnJlbW92ZUNsYXNzKCdvbicpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbFRvcCA9IHBhcnNlSW50KCRlLmF0dHIoJ3Njcm9sbFRvcCcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFpc05hTihzY3JvbGxUb3ApKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRsLnNjcm9sbFRvcChzY3JvbGxUb3ApOwogICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRlLmF0dHIoJ3Njcm9sbFRvcCcsJGxbMF0uc2Nyb2xsVG9wKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRuLmhpZGUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlaaGlodS5Db21tZW50LmJveCgkYyxmYWxzZSxmYWxzZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZS5hZGRDbGFzcygnb24nKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxUb3AgPSBwYXJzZUludCgkZS5hdHRyKCdzY3JvbGxUb3Bfc2hvd2dvb2QnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZighaXNOYU4oc2Nyb2xsVG9wKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbC5zY3JvbGxUb3Aoc2Nyb2xsVG9wKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkuYXBwZW5kKAogICAgICAgICAgICAgICAgICAgICAgICAkKCc8aT4nLCB7ICdjbGFzcyc6ICd6Zy1pY29uIHpnLWljb24tY29tbWVudC1saWtlJyB9KQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICkuY3NzKHsKICAgICAgICAgICAgICAgICAgICAnZmxvYXQnOidyaWdodCcKICAgICAgICAgICAgICAgIH0pLmFwcGVuZFRvKCRidXR0b25zUik7CgogICAgICAgICAgICAgICAgaVpoaWh1LkNvbW1lbnQuUGFnZU5vdFNjcm9sbCA9IHRydWU7CiAgICAgICAgICAgICAgICAkbGlzdC5zY3JvbGwoZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICB2YXIgJGU9JCh0aGlzKQogICAgICAgICAgICAgICAgICAgICAgLCAkYj0kZS5jbG9zZXN0KCcuem0tY29tbWVudC1ib3gnKS5maW5kKCcuaXpoLWJhY2stdG9wJykKICAgICAgICAgICAgICAgICAgICA7CiAgICAgICAgICAgICAgICAgICAgaWYoJGUuaGVpZ2h0KCkgPCB0aGlzLnNjcm9sbFRvcCl7CiAgICAgICAgICAgICAgICAgICAgICAgICRiLnJlbW92ZUNsYXNzKCdvZmYnKTsKICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgJGIuYWRkQ2xhc3MoJ29mZicpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pLnNjcm9sbCgpOwogICAgICAgICAgICAgICAgaVpoaWh1LkNvbW1lbnQuUGFnZU5vdFNjcm9sbCA9IGZhbHNlOwoKICAgICAgICAgICAgICAgIHZhciBpY21Gb2N1cz1udWxsOwogICAgICAgICAgICAgICAgICAgICRsaXN0LmNzcyh7CiAgICAgICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOiRjbS5pcygnLmVtcHR5Jyk/Jyc6JzEwMCUnCiAgICAgICAgICAgICAgICAgICAgICAsICdvdmVyZmxvdyc6J2F1dG8nCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAkbGlzdC5jaGlsZHJlbignLnptLWl0ZW0tY29tbWVudCcpLmVhY2goZnVuY3Rpb24oaSxlKXsKICAgICAgICAgICAgICAgICAgICB2YXIgJGljbT0kKGUpOwogICAgICAgICAgICAgICAgICAgICRpY20uYmluZCgnRE9NTm9kZVJlbW92ZWQnLGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRpY209JChldmVudC50YXJnZXQpOwogICAgICAgICAgICAgICAgICAgICAgICBpZighJGljbS5pcygnLnptLWl0ZW0tY29tbWVudCcpKXJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRjbT0kaWNtLmhpZGUoKS5jbG9zZXN0KCcuem0tY29tbWVudC1ib3g6dmlzaWJsZScpOwogICAgICAgICAgICAgICAgICAgICAgICBpZigkY20ubGVuZ3RoKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCQodGhpcykuY2xvc2VzdCgnLnptLWNvbW1lbnQtbGlzdCcpLmNoaWxkcmVuKCkubGVuZ3RoPT0xKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuaXpoLXF1aWNrLWJsb2NrLXN3aXRjaCcsJGNtKS5hZGQoJy5pemgtYnV0dG9ucy1jbS1SJywkY20pLmhpZGUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlaaGlodS5Db21tZW50LmJveCgkY20sZmFsc2UsZmFsc2UpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgJGljbS5maW5kKCdzcGFuLmxpa2UtbnVtJykuZWFjaChmdW5jdGlvbihpLGUpewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGlwPWUuZ2V0QXR0cmlidXRlKCdkYXRhLXRpcCcpLnJlcGxhY2UoJ3MkciQnLCdzJGwkJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRpcCE9JycpZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGlwJyx0aXApOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIGlmICghaWNtRm9jdXMmJmZvY3VzTmFtZSYmZm9jdXNOYW1lIT0nJwogICAgICAgICAgICAgICAgICAgICAgICAmJiAkaWNtLmNoaWxkcmVuKCdhLnpnLWFuY2hvci1oaWRkZW5bbmFtZT0iJytmb2N1c05hbWUrJyJdJykubGVuZ3RoKXsKICAgICAgICAgICAgICAgICAgICAgICAgaWNtRm9jdXM9JGljbS5nZXQoMCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBpWmhpaHUuQ29tbWVudC5vcGVuKCRpdGVtLCRjbSxpY21Gb2N1cyk7CiAgICAgICAgICAgICAgICB1dGlscy5vYnNlcnZlRE9NTm9kZUFkZGVkKCRjbS5jaGlsZHJlbignLnptLWNvbW1lbnQtZm9ybScpLmNoaWxkcmVuKCcuem0tY29tbWVudC1lZGl0YWJsZScpWzBdLGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICAgICAgICAgICAgICB2YXIgJGU9JChldmVudC50YXJnZXQpCiAgICAgICAgICAgICAgICAgICAgICAsICRmPSRlLmNsb3Nlc3QoJy56bS1jb21tZW50LWZvcm0nKQogICAgICAgICAgICAgICAgICAgICAgLCAkbD0kZi5wcmV2KCcuem0tY29tbWVudC1saXN0JykKICAgICAgICAgICAgICAgICAgICAgICwgJGM9JGYuY2xvc2VzdCgnLnptLWNvbW1lbnQtYm94W29wZW5lZD0xXScpCiAgICAgICAgICAgICAgICAgICAgICAsIGNoPSRjLmhlaWdodCgpCiAgICAgICAgICAgICAgICAgICAgICAsIHdpbkhlaWdodD1pWmhpaHUuJHdpbi5oZWlnaHQoKQogICAgICAgICAgICAgICAgICAgICAgLCBzY3JvbGxUb3A9ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCtkb2N1bWVudC5ib2R5LnNjcm9sbFRvcAogICAgICAgICAgICAgICAgICAgICAgLCBuYXZIZWlnaHQ9aVpoaWh1LiRib2R5LmNoaWxkcmVuKCkuZmlyc3QoKS5oZWlnaHQoKQogICAgICAgICAgICAgICAgICAgICAgLCBiYXI9JCgnLnp1LWdsb2JhbC1ub3RpZnkuenUtZ2xvYmFsLW5vdGlmeS1pbmZvOnZpc2libGUnKQogICAgICAgICAgICAgICAgICAgICAgLCBiYXJIZWlnaHQ9IWJhci5sZW5ndGg/MDpiYXIub3V0ZXJIZWlnaHQoKQogICAgICAgICAgICAgICAgICAgICAgLCBiYXNlVG9wPSgoYmFySGVpZ2h0JiZiYXIuY3NzKCdwb3NpdGlvbicpPT0nZml4ZWQnKT9iYXJIZWlnaHQ6KHNjcm9sbFRvcD5iYXJIZWlnaHQ/MDpiYXJIZWlnaHQtc2Nyb2xsVG9wKSkrbmF2SGVpZ2h0CiAgICAgICAgICAgICAgICAgICAgICAsIG1pbkhlaWdodD0xMTIKICAgICAgICAgICAgICAgICAgICAgICwgbWF4SGVpZ2h0PXdpbkhlaWdodC1iYXNlVG9wLTM1CiAgICAgICAgICAgICAgICAgICAgOwogICAgICAgICAgICAgICAgICAgIGlmKCEkYy5sZW5ndGgpcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIGlmKCEkYy5pcygnLmVtcHR5JykmJiRsLmNoaWxkcmVuKCkubGVuZ3RoPjApewogICAgICAgICAgICAgICAgICAgICAgICBsaD0kbC5oZWlnaHQoKTsKICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgbGg9MDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgdmFyICR0PSRlLmNsb25lKCkuYXBwZW5kVG8oZG9jdW1lbnQuYm9keSkKICAgICAgICAgICAgICAgICAgICAJICAgIC5jc3Moeydwb3NpdGlvbic6J2Fic29sdXRlJywnei1pbmRleCc6Jy0xJywnd2lkdGgnOiRlLndpZHRoKCksJ21pbi1oZWlnaHQnOjIyfSkKICAgICAgICAgICAgICAgICAgICAgICwgZWg9JHQuaGVpZ2h0KCkKICAgICAgICAgICAgICAgICAgICAgICwgaD1NYXRoLm1heChlaCxsaCkrKGxoPT0wPzkwOjEwMCkKICAgICAgICAgICAgICAgICAgICA7CiAgICAgICAgICAgICAgICAgICAgJHQucmVtb3ZlKCk7JHQ9bnVsbDsKICAgICAgICAgICAgICAgICAgICBpZihpc05hTihjaCl8fGNoIT1oKXsKICAgICAgICAgICAgICAgICAgICAgICAgJGMuYXR0cignaXpoX2NtSGVpZ2h0JyxoKTsKICAgICAgICAgICAgICAgICAgICAgICAgaVpoaWh1LkNvbW1lbnQuYm94KCRjLHRydWUsZmFsc2UpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZighJGYuaXMoJy5leHBhbmRlZCcpJiZldmVudC5hZGRlZE5vZGVzLmxlbmd0aCl7CiAgICAgICAgICAgICAgICAgICAgICAgICRmLmNzcyh7J2hlaWdodCc6JycsJ2JvdHRvbSc6Jyd9KTsKICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgZWgrPTMwOwogICAgICAgICAgICAgICAgICAgICAgICAkZi5jc3MobGg9PTB8fGVoPmNoP3snaGVpZ2h0JzonJywnYm90dG9tJzoyNX06eydoZWlnaHQnOmVoLCdib3R0b20nOicnfSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgJGJ0bkNDLnByZXBlbmQoJzxpIGNsYXNzPSJ6LWljb24tZm9sZCIvPicpCiAgICAgICAgICAgICAgICAuY3NzKHsKICAgICAgICAgICAgICAgICAgICAncG9zaXRpb24nOidhYnNvbHV0ZScKICAgICAgICAgICAgICAgICAgLCAnY3Vyc29yJzoncG9pbnRlcicKICAgICAgICAgICAgICAgICAgLCAnbWFyZ2luLWxlZnQnOi0xCiAgICAgICAgICAgICAgICAgICwgJ2xlZnQnOjAKICAgICAgICAgICAgICAgICAgLCAnYmFja2dyb3VuZC1jb2xvcic6JyNmYmZiZmInCiAgICAgICAgICAgICAgICAgICwgJ3BhZGRpbmcnOicycHggNXB4JwogICAgICAgICAgICAgICAgICAsICdib3R0b20nOi0yMgogICAgICAgICAgICAgICAgICAsICdib3JkZXInOicxcHggc29saWQgI2RkZCcKICAgICAgICAgICAgICAgICAgLCAnYm9yZGVyLXJhZGl1cyc6JzRweCcKICAgICAgICAgICAgICAgIH0pLmluc2VydEJlZm9yZSgkY20uZmluZCgnLnptLWNvbW1lbnQtYm94LWZ0JykpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKGlaaGlodS5RdWlja0Jsb2NrKXsKICAgICAgICAgICAgICAgIGlaaGlodS5RdWlja0Jsb2NrLmFkZFF1aWNrQmxvY2tJbkNvbW1lbnRMaXN0KCRidXR0b25zTCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9OwoKICAgIHJldHVybiB0aGlzOwp9CgovKioKICogQGNsYXNzIE5vdGk3CiAqLwpmdW5jdGlvbiBOb3RpNyhpWmhpaHUpIHsKICAgIGlmICggdHlwZW9mIGlaaGlodSA9PT0gJ3VuZGVmaW5lZCcgfHwgIWlaaGlodSB8fCAhaVpoaWh1LmNvbmZpZ1snTm90aTcnXSkgewogICAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgaVpoaWh1Lk5vdGk3ID0gdGhpczsKICAgIAogICAgdGhpcy4kbm90aTcgPSAkKCcjemgtdG9wLW5hdi1saXZlLW5ldycpOwogICAgdGhpcy4kZnJhbWUgPSAkKCcuem0tbm90aTctZnJhbWUnLHRoaXMuJG5vdGk3KTsKICAgIHRoaXMuJGNvbnRlbnQgPSAkKCcuem0tbm90aTctY29udGVudC1ib2R5Jyx0aGlzLiRub3RpNyk7CiAgICB0aGlzLiRmb290ZXIgPSAkKCcuem0tbm90aTctcG9wdXAtZm9vdGVyJyx0aGlzLiRub3RpNyk7CiAgICB0aGlzLiR0YWIgPSAkKCcuem0tbm90aTctcG9wdXAtdGFiLWNvbnRhaW5lcicsJyN6aC10b3AtbmF2LWxpdmUtbmV3LWlubmVyJyk7CgogICAgdGhpcy5jc3MgPSAKICAgICAgICBbJyN6aC10b3AtbmF2LWxpdmUtbmV3IC56bS1ub3RpNy1wb3B1cC1mb290ZXIgYVt1bnJlYWRvbmx5PSIxIl17Y29sb3I6IzIyNTU5OSAhaW1wb3J0YW50O3RleHQtc2hhZG93OjAgMCAxcHggIzIyNTU5OTt9JwogICAgICAgICwnJ10uam9pbignXG4nKTsKICAgIHRoaXMuZW5oYW5jZSA9IGZ1bmN0aW9uKCl7CiAgICAgICAgaVpoaWh1Lk5vdGk3LiR0YWIuZmluZCgnLnptLW5vdGk3LXBvcHVwLXRhYi1pdGVtJykuZWFjaChmdW5jdGlvbihpLGUpewogICAgICAgICAgICB1dGlscy5vYnNlcnZlRE9NQXR0ck1vZGlmaWVkKGUsZnVuY3Rpb24oZXZlbnQpewogICAgICAgICAgICAgICAgdmFyICRlPSQoZXZlbnQudGFyZ2V0KTsKICAgICAgICAgICAgICAgIGlmKCRlLmlzKCcuem0tbm90aTctcG9wdXAtdGFiLWl0ZW0uY3VycmVudCcpKXsKICAgICAgICAgICAgICAgIAl2YXIgY3VycmVudENsYXNzPSRlLmF0dHIoJ2NsYXNzJykKICAgICAgICAgICAgICAgIAkgICwgJGJGaWx0ZXJSZWFkPSQoJy5pemgtZmlsdGVyLXJlYWQnLGlaaGlodS5Ob3RpNy4kZm9vdGVyKTsKICAgICAgICAgICAgICAgIAlpZihjdXJyZW50Q2xhc3MhPSRiRmlsdGVyUmVhZC5hdHRyKCdjdXJyZW50Q2xhc3MnKSl7CiAgICAgICAgICAgICAgICAJICAgICRiRmlsdGVyUmVhZC5hdHRyKHsndW5yZWFkT25seSc6JycsJ2N1cnJlbnRDbGFzcyc6Y3VycmVudENsYXNzfSk7CiAgICAgICAgICAgICAgICAJfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgICBpWmhpaHUuTm90aTcuJGZvb3Rlci5hcHBlbmQoCiAgICAgICAgICAgICQoJzxhPicsewogICAgICAgICAgICAgICAgJ2NsYXNzJzonaXpoLWZpbHRlci1yZWFkJwogICAgICAgICAgICAgICwgaHJlZjonamF2YXNjcmlwdDp2b2lkKDApOycKICAgICAgICAgICAgICAsICd1bnJlYWRPbmx5JzonJwogICAgICAgICAgICAgICwgY2xpY2s6ZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICB2YXIgdW5yZWFkT25seT10aGlzLmdldEF0dHJpYnV0ZSgndW5yZWFkT25seScpPT0nMScKICAgICAgICAgICAgICAgICAgICAgICwgJGNvbnRlbnRWaXNpYmxlPWlaaGlodS5Ob3RpNy4kY29udGVudC5maWx0ZXIoJzp2aXNpYmxlJykKICAgICAgICAgICAgICAgICAgICAgICwgJHNjcm9sbGVyPSRjb250ZW50VmlzaWJsZS5jbG9zZXN0KCcuemgtc2Nyb2xsZXItaW5uZXInKQogICAgICAgICAgICAgICAgICAgICAgLCAkaXRlbXM9JGNvbnRlbnRWaXNpYmxlLmZpbmQoJy56bS1ub3RpNy1jb250ZW50LWl0ZW0nKQogICAgICAgICAgICAgICAgICAgIDsKICAgICAgICAgICAgICAgICAgICB1bnJlYWRPbmx5PSF1bnJlYWRPbmx5OwogICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCd1bnJlYWRPbmx5Jyx1bnJlYWRPbmx5PycxJzonJyk7CiAgICAgICAgICAgICAgICAgICAgaWYodW5yZWFkT25seSl7CiAgICAgICAgICAgICAgICAgICAgICAgICRzY3JvbGxlci5hdHRyKCdzY3JvbGxUb3AnLCRzY3JvbGxlclswXS5zY3JvbGxUb3ApOwogICAgICAgICAgICAgICAgICAgICAgICAkaXRlbXMubm90KCcudW5yZWFkJykuaGlkZSgpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsVG9wID0gcGFyc2VJbnQoJHNjcm9sbGVyLmF0dHIoJ3Njcm9sbFRvcF91bnJlYWQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFpc05hTihzY3JvbGxUb3ApKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjcm9sbGVyLnNjcm9sbFRvcChzY3JvbGxUb3ApOwogICAgICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgICAgICAkc2Nyb2xsZXIuYXR0cignc2Nyb2xsVG9wX3VucmVhZCcsJHNjcm9sbGVyWzBdLnNjcm9sbFRvcCk7CiAgICAgICAgICAgICAgICAgICAgICAgICRpdGVtcy5ub3QoJy51bnJlYWQnKS5zaG93KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxUb3AgPSBwYXJzZUludCgkc2Nyb2xsZXIuYXR0cignc2Nyb2xsVG9wJykpOwogICAgICAgICAgICAgICAgICAgICAgICBpZighaXNOYU4oc2Nyb2xsVG9wKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY3JvbGxlci5zY3JvbGxUb3Aoc2Nyb2xsVG9wKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgCiAgICAgICAgICAgIH0pLnRleHQoJ+makOiXj+W3suivuycpCiAgICAgICAgKTsKICAgIH07CgogICAgcmV0dXJuIHRoaXM7Cn0KCi8qKgogKiBAY2xhc3MgUXVpY2tCbG9jawogKi8KZnVuY3Rpb24gUXVpY2tCbG9jayhpWmhpaHUpIHsKICAgIGlmICggdHlwZW9mIGlaaGlodSA9PT0gJ3VuZGVmaW5lZCcgfHwgIWlaaGlodSB8fCAhaVpoaWh1LmNvbmZpZ1snUXVpY2tCbG9jayddKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICBpWmhpaHUuUXVpY2tCbG9jayA9IHRoaXM7CiAgICAKLyoKICAgIHZhciBjc3NfUXVpY2tCbG9jayA9IHsKICAgICAgICAgICAgJ2JhY2tncm91bmQtcG9zaXRpb24nOictMTQ2cHggLTIwMnB4JwogICAgICAgICAgLCAnd2lkdGgnOjE2CiAgICAgICAgICAsICdoZWlnaHQnOjE2CiAgICAgIAl9CiAgICA7CiovCiAgICB0aGlzLlBlbmRpbmcgPSB7VXNlcnM6JywnLENvdW50OjB9OwogICAgdGhpcy5CbG9ja2luZyA9IHtVc2VyczonLCcsQ291bnQ6MH07CiAgICB0aGlzLlVuZm9sbG93ZWQgPSB7VXNlcnM6JywnLENvdW50OjB9OwogICAgdGhpcy5SZWZvbGxvd2VkID0ge1VzZXJzOicsJyxDb3VudDowfTsKICAgIHRoaXMuVXNlcnMyQiA9IFtdCiAgICB0aGlzLlVzZXJzMkJCUSA9IFtdCiAgICB0aGlzLmNzcyA9IAogICAgICAgIFsnLml6aF9ibG9ja0NhcnR7YmFja2dyb3VuZC1jb2xvcjojMDc3MUMxO3Bvc2l0aW9uOmZpeGVkO3JpZ2h0OjA7ei1pbmRleDo5O3BhZGRpbmc6MCAzMHB4IDAgNjBweDtib3JkZXI6MXB4IHNvbGlkICMwNzcxQzE7Ym9yZGVyLWxlZnQtd2lkdGg6MTBweDtib3JkZXItdG9wLWxlZnQtcmFkaXVzOjZweDt9JwogICAgICAgICwnLml6aF9ibG9ja0NhcnQgLmRve2NvbG9yOiNmZmY7dGV4dC1hbGlnbjpjZW50ZXI7ZGlzcGxheTpibG9jazttYXJnaW46MnB4O21pbi13aWR0aDo4MHB4O3dpZHRoOjEwMCU7aGVpZ2h0OjIwcHg7fScKICAgICAgICAsJy5pemhfYmxvY2tDYXJ0LnBlbmRpbmcgLmRvOmFmdGVye3RleHQtZGVjb3JhdGlvbjpibGluaztjb2xvcjpyZWQ7fScKICAgICAgICAsJy5pemhfYmxvY2tDYXJ0IC5kbzphZnRlcntwb3NpdGlvbjpyZWxhdGl2ZTtjb250ZW50OmF0dHIoaXpoX251bTJCKTt9JwogICAgICAgICwnLml6aF9ibG9ja0NhcnQgLmRvIC5idXR0b257Y29sb3I6I2ZmZjt9JwogICAgICAgICwnLml6aF9ibG9ja0NhcnQgLmZyYW1le292ZXJmbG93LXk6YXV0bztvdmVyZmxvdy14OmhpZGRlbjtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MjVweDtib3R0b206MDtsZWZ0OjA7cmlnaHQ6MDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7cGFkZGluZy10b3A6NXB4O30nCiAgICAgICAgLCcuaXpoX2Jsb2NrQ2FydCAubGlzdHtkaXNwbGF5OmJsb2NrO21hcmdpbjoycHg7d2lkdGg6MTAwJTtwYWRkaW5nLXJpZ2h0OjVweDt9JwogICAgICAgICwnLml6aF9ibG9ja0NhcnQgLmxpc3QgLnJlbHtib3JkZXItd2lkdGg6MCAycHg7Ym9yZGVyLXN0eWxlOnNvbGlkO2JvcmRlci1jb2xvcjojZmZmO3dpZHRoOjI0cHg7aGVpZ2h0OjE4cHg7fScKICAgICAgICAsJy5pemhfYmxvY2tDYXJ0IC5saXN0LmlfZm8gLnJlbHtib3JkZXItbGVmdC1jb2xvcjojMjU5O2JhY2tncm91bmQtcG9zaXRpb246LTEyMHB4IC0xODRweDt9JwogICAgICAgICwnLml6aF9ibG9ja0NhcnQgLmxpc3QuZm9faSAucmVse2JvcmRlci1yaWdodC1jb2xvcjojMjU5O2JhY2tncm91bmQtcG9zaXRpb246LTEyMHB4IC0xNjRweDt9JwogICAgICAgICwnLml6aF9ibG9ja0NhcnQgLmxpc3QuaV9mby5mb19pIC5yZWx7YmFja2dyb3VuZC1wb3NpdGlvbjotNzhweCAtMjAwcHg7fScKICAgICAgICAsJy5pemhfYmxvY2tDYXJ0IC51c2VyMkJ7ZGlzcGxheTpibG9jazttYXJnaW46MnB4IDA7cGFkZGluZzowIDQwcHggMCA2MHB4O30nCiAgICAgICAgLCcuaXpoX2Jsb2NrQ2FydCAudXNlcjJCIGkuemctaWNvbntkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO3JpZ2h0OjA7bWFyZ2luLXRvcDo1cHg7fScKICAgICAgICAsJy5pemhfYmxvY2tDYXJ0IC51c2VyMkIgLm5hbWV7ZGlzcGxheTpibG9jaztjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6IzAwMDt3aGl0ZS1zcGFjZTpub3dyYXA7cGFkZGluZzoycHggNXB4O2JvcmRlci1yYWRpdXM6M3B4O30nCiAgICAgICAgLCcuaXpoX2Jsb2NrQ2FydCAubGlzdCAudXNlcjJCLnVuZm8gLm5hbWV7YmFja2dyb3VuZC1jb2xvcjojZjAwO30nCiAgICAgICAgLCcuaXpoX2Jsb2NrQ2FydCAudXNlcjJCIC5kZWx7ZGlzcGxheTpibG9jaztwb3NpdGlvbjphYnNvbHV0ZTttYXJnaW4tbGVmdDotNC41ZW07fScKICAgICAgICAsJy5pemhfYmxvY2tDYXJ0IC51c2VyMkIgaS5zYXl7ZGlzcGxheTpibG9jaztwb3NpdGlvbjphYnNvbHV0ZTttYXJnaW4tbGVmdDotNDRweDtib3JkZXItcmFkaXVzOjZweCA2cHggMCA2cHg7Ym9yZGVyOjFweCBzb2xpZCAjOTk5O3BhZGRpbmc6MCA1cHggMCAzcHg7fScKICAgICAgICAsJy5pemhfYmxvY2tDYXJ0IC51c2VyMkIgaS5zYXlfMXtkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO21hcmdpbi1sZWZ0Oi0xMHB4O2hlaWdodDo2cHg7YmFja2dyb3VuZC1jb2xvcjojZmZmO3dpZHRoOjZweDttYXJnaW4tdG9wOjE3cHg7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgIzk5OTt9JwogICAgICAgICwnLml6aF9ibG9ja0NhcnQgLnVzZXIyQiBpLnNheV8ye2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246YWJzb2x1dGU7bWFyZ2luLWxlZnQ6LTlweDtoZWlnaHQ6NnB4O2JhY2tncm91bmQtY29sb3I6I2ZmZjt3aWR0aDo2cHg7bWFyZ2luLXRvcDoxN3B4O2JvcmRlci1yYWRpdXM6MCAwIDAgNnB4O2JvcmRlcjoxcHggc29saWQgIzk5OTtib3JkZXItd2lkdGg6MCAwIDFweCAxcHh9JwogICAgICAgICwnLml6aC1xdWljay1ibG9ja3twb3NpdGlvbjphYnNvbHV0ZTt0ZXh0LWFsaWduOmNlbnRlcjt3aWR0aDo0ZW07bWFyZ2luLXRvcDoxLjVlbTt3aGl0ZS1zcGFjZTpub3dyYXA7fScKICAgICAgICAsJy5pemgtcXVpY2stYmxvY2sgW2NsYXNzXj1pemgtcXVpY2stYmxvY2tde3Bvc2l0aW9uOmFic29sdXRlO2Rpc3BsYXk6YmxvY2s7d2hpdGUtc3BhY2U6bm93cmFwO30nCiAgICAgICAgLCcuaXpoLXF1aWNrLWJsb2NrOmFmdGVye2NvbnRlbnQ6YXR0cihpemhfbnVtMkIpO21hcmdpbi10b3A6MWVtO2Rpc3BsYXk6YmxvY2s7fScKICAgICAgICAsJy56bS1jb21tZW50LWhkIC5pemgtcXVpY2stYmxvY2stcGVuZHtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7dG9wOjQwcHg7fScKICAgICAgICAsJycKICAgICAgICBdLmpvaW4oJ1xuJyk7CiAgICB0aGlzLnVuYmxvY2tBbGwgPSBmdW5jdGlvbigpewogICAgICAgICQoJy5ibG9ja2VkLXVzZXJzID4gLml0ZW0tY2FyZCcpLmVhY2goZnVuY3Rpb24oaSxlKXsKICAgICAgICAgICAgdmFyIHVpZD0kKGUpLmF0dHIoJ2RhdGEtaWQnKTsKICAgICAgICAgICAgJC5wb3N0KCcvc2V0dGluZ3MvdW5ibG9ja3VzZXInLCQucGFyYW0oewogICAgICAgICAgICAgICAgX3hzcmY6JCgnaW5wdXRbbmFtZT1feHNyZl0nKS52YWwoKQogICAgICAgICAgICAgICwgdWlkOnVpZAogICAgICAgICAgICB9KSxmdW5jdGlvbihyKXsKICAgICAgICAgICAgCS8vY29uc29sZS5sb2cocik7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pOwoJICB9OwoJICB0aGlzLmRvVW5mb2xsb3cgPSBmdW5jdGlvbigpewogICAgICAgIHZhciAkZSA9IGlaaGlodS5RdWlja0Jsb2NrLlVzZXJzMkJCUS5zaGlmdCgpCiAgICAgICAgaWYodHlwZW9mICRlID09PSAndW5kZWZpbmVkJykgcmV0dXJuCgogICAgICAgIHZhciB1aWQ9JGUuYXR0cigndWlkJyk7CiAgICAgICAgJC5wb3N0KCcvbm9kZS9NZW1iZXJGb2xsb3dCYXNlVjInCiAgICAgICAgICAsICQucGFyYW0oewogICAgICAgICAgICAgICAgbWV0aG9kOid1bmZvbGxvd19tZW1iZXInCiAgICAgICAgICAgICAgLCBwYXJhbXM6SlNPTi5zdHJpbmdpZnkoeydoYXNoX2lkJzp1aWR9KQogICAgICAgICAgICAgICwgX3hzcmY6JCgnaW5wdXRbbmFtZT1feHNyZl0nKS52YWwoKQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAsIGZ1bmN0aW9uKHIpewogICAgICAgICAgICAgICAgICB2YXIgcXVlcnk9ZGVjb2RlVVJJQ29tcG9uZW50KHRoaXMuZGF0YSkKICAgICAgICAgICAgICAgICAgICAsIHBhcmFtcz11dGlscy5nZXRQYXJhbUluUXVlcnkocXVlcnksJ3BhcmFtcycpCiAgICAgICAgICAgICAgICAgIDsKICAgICAgICAgICAgICAgICAgZXZhbCgncGFyYW1zPScrcGFyYW1zKTsKICAgICAgICAgICAgICAgICAgdmFyIGJpZD0nZmItJytwYXJhbXMuaGFzaF9pZAogICAgICAgICAgICAgICAgICAgICwgd2hvPWJpZCsnLCcKICAgICAgICAgICAgICAgICAgICAsIHVuZm9sbG93ZWQ9aVpoaWh1LlF1aWNrQmxvY2suVW5mb2xsb3dlZAogICAgICAgICAgICAgICAgICAgICwgcmVmb2xsb3dlZD1pWmhpaHUuUXVpY2tCbG9jay5SZWZvbGxvd2VkCiAgICAgICAgICAgICAgICAgICAgLCAkY2FydERJVj0kKCcjaXpoX2Jsb2NrQ2FydCcpCiAgICAgICAgICAgICAgICAgICAgLCAkdXNlcj0kY2FydERJVi5maW5kKCcudXNlcjJCW3VpZD0nK3BhcmFtcy5oYXNoX2lkKyddJykKICAgICAgICAgICAgICAgICAgICAsICRsaXN0PSR1c2VyLmNsb3Nlc3QoJy5saXN0JykKICAgICAgICAgICAgICAgICAgOwogICAgICAgICAgICAgICAgICAkdXNlci5wcmVwZW5kVG8oJGxpc3QubmV4dCgpLm5leHQoKSk7CiAgICAgICAgICAgICAgICAgIGlmKHVuZm9sbG93ZWQuVXNlcnMuaW5kZXhPZignLCcrd2hvKTwwKQogICAgICAgICAgICAgICAgICAgICAgdW5mb2xsb3dlZC5Vc2VycyArPSB3aG87CiAgICAgICAgICAgICAgICAgIGlmKHJlZm9sbG93ZWQuVXNlcnMuaW5kZXhPZignLCcrd2hvKT49MCkKICAgICAgICAgICAgICAgICAgICAgIHJlZm9sbG93ZWQuVXNlcnMgPSByZWZvbGxvd2VkLnJlcGxhY2UoJywnK3dobywnLCcpOwogICAgICAgICAgICB9CiAgICAgICAgKS5hbHdheXMoZnVuY3Rpb24oZGF0YSwgdGV4dFN0YXR1cywganFYSFIpewogICAgICAgICAgICBpWmhpaHUuUXVpY2tCbG9jay5kb1VuZm9sbG93KCkKICAgICAgICB9KTsKCSAgfTsKICAgIHRoaXMuZG9RdWlja0Jsb2NrID0gZnVuY3Rpb24oKXsKICAgICAgICB2YXIgJGUgPSBpWmhpaHUuUXVpY2tCbG9jay5Vc2VyczJCQlEuc2hpZnQoKQogICAgICAgIGlmKHR5cGVvZiAkZSA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybgoKICAgICAgICB2YXIgYmxvY2tpbmcgPSBpWmhpaHUuUXVpY2tCbG9jay5CbG9ja2luZwogICAgICAgICAgLCBocmVmID0gJGUuYXR0cignaHJlZicpCiAgICAgICAgICAsIHdobyA9IGhyZWYuc3BsaXQoJy8nKS5wb3AoKSsnLCcKICAgICAgICA7CiAgICAgICAgaWYodHlwZW9mIGJsb2NraW5nID09PSAndW5kZWZpbmVkJyB8fCAhYmxvY2tpbmcpewogICAgICAgICAgICBibG9ja2luZyA9IGlaaGlodS5RdWlja0Jsb2NrLkJsb2NraW5nID0geyBVc2VyczonLCcsIENvdW50OjAgfTsKICAgICAgICB9ZWxzZSBpZihibG9ja2luZy5Vc2Vycy5pbmRleE9mKCcsJyt3aG8pID49IDApewogICAgICAgICAgICByZXR1cm47IC8vIEFscmVhZHkgYmxvY2tpbmcKICAgICAgICB9CiAgICAgICAgdmFyICRjYXJ0RElWPSQoJyNpemhfYmxvY2tDYXJ0Jyk7CiAgICAgICAgJGNhcnRESVYuYWRkQ2xhc3MoJ2Jsb2NraW5nJyk7CiAgICAgICAgYmxvY2tpbmcuVXNlcnMgKz0gd2hvOwogICAgICAgIGJsb2NraW5nLkNvdW50ICsrOwogICAgICAgICQucG9zdChocmVmKycvYmxvY2snLCQucGFyYW0oewogICAgICAgICAgICBhY3Rpb246J2FkZCcKICAgICAgICAgICwgX3hzcmY6JCgnaW5wdXRbbmFtZT1feHNyZl0nKS52YWwoKSAKICAgICAgICB9KSxmdW5jdGlvbihyKXsKICAgICAgICAgICAgdmFyIGhyZWY9dGhpcy51cmwucmVwbGFjZSgnL2Jsb2NrJywnJykKICAgICAgICAgICAgICAsIHVzZXJJRD1ocmVmLnNwbGl0KCcvJykucG9wKCkKICAgICAgICAgICAgICAsIHdobz0nLCcrdXNlcklEKycsJwogICAgICAgICAgICAgICwgYmxvY2tpbmc9aVpoaWh1LlF1aWNrQmxvY2suQmxvY2tpbmcKICAgICAgICAgICAgOwoKICAgICAgICAgICAgaWYoMD09LS1ibG9ja2luZy5Db3VudCkkY2FydERJVi5yZW1vdmVDbGFzcygncGVuZGluZycpOwogICAgCiAgICAgICAgICAgIGlmKGJsb2NraW5nLlVzZXJzLmluZGV4T2Yod2hvKSA8IDApCiAgICAgICAgICAgICAgICByZXR1cm47IC8vIE5vIHRoaXMgdXNlciBpbiBwZW5kaW5nCiAgICAgICAgICAgICAgCiAgICAgICAgICAgIGJsb2NraW5nLlVzZXJzID0gYmxvY2tpbmcuVXNlcnMucmVwbGFjZSh3aG8sJywnKTsKICAgICAgICAgICAgJCgnI2l6aF9ibG9ja0NhcnQgLnVzZXIyQltocmVmPSInK2hyZWYrJyJdJykuZmluZCgnLmRlbCcpWzBdLmNsaWNrKCk7CiAgICAgICAgICAgICQoJ2FbaHJlZiQ9IicraHJlZisnIl0nKS5jc3MoJ3RleHQtZGVjb3JhdGlvbicsJ2xpbmUtdGhyb3VnaCcpOwogICAgICAgIH0pLmFsd2F5cyhmdW5jdGlvbihkYXRhLCB0ZXh0U3RhdHVzLCBqcVhIUil7CiAgICAgICAgICAgIGlaaGlodS5RdWlja0Jsb2NrLmRvUXVpY2tCbG9jaygpCiAgICAgICAgfSk7CiAgCX07CiAgICB0aGlzLnJlc2l6ZUJsb2NrQ2FydCA9IGZ1bmN0aW9uKCRjYXJ0RElWKXsKICAgICAgICBmdW5jdGlvbiBwYXJzZUNzc1B4KCRpdGVtLCBuYW1lKSB7CiAgICAgICAgICAgIHZhciBtID0gJGl0ZW0uY3NzKG5hbWUpOwogICAgICAgICAgICBpZiAobSAhPSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KG0ucmVwbGFjZSgncHgnLCcnKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfQogICAgICAgIHZhciAkdXNlckRJViA9ICRjYXJ0RElWLmZpbmQoJy5saXN0IC51c2VyMkInKTsKICAgICAgICB2YXIgJHRpdGxlQm94ID0gJCgnI2l6aF9ibG9ja0NhcnQgLmRvJyk7CiAgICAgICAgdmFyIGggPSBwYXJzZUNzc1B4KCRjYXJ0RElWLmZpbmQoJ2Rpdi5mcmFtZScpLCdwYWRkaW5nVG9wJykgCiAgICAgICAgICAgICAgICArICgkdXNlckRJVi5oZWlnaHQoKSArIHBhcnNlQ3NzUHgoJHVzZXJESVYsJ21hcmdpblRvcCcpKSAqICR1c2VyRElWLmxlbmd0aCAKICAgICAgICAgICAgICAgICsgJHRpdGxlQm94LmhlaWdodCgpCiAgICAgICAgICAgICAgICArIHBhcnNlQ3NzUHgoJHRpdGxlQm94LCAnbWFyZ2luVG9wJykKICAgICAgICAgICAgICAgICsgcGFyc2VDc3NQeCgkdGl0bGVCb3gsICdtYXJnaW5Cb3R0b20nKTsKICAgICAgICAKICAgICAgICBpZihoK2laaGlodS4kbWFpbi5vZmZzZXQoKS50b3A8aVpoaWh1LiR3aW4uaGVpZ2h0KCkpewogICAgICAgICAgICAkY2FydERJVi5jc3MoeydoZWlnaHQnOmgsJ2JvdHRvbSc6Jyd9KTsKICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgJGNhcnRESVYuY3NzKHsnaGVpZ2h0JzonJywnYm90dG9tJzowfSk7CiAgICAgICAgfQogICAgfTsKICAgIHRoaXMuZ2V0Q2FydERJVj1mdW5jdGlvbigpewogICAgICAgIHZhciAkY2FydERJVj0kKCcjaXpoX2Jsb2NrQ2FydCcpOwogICAgICAgIGlmKCEkY2FydERJVi5sZW5ndGgpewogICAgICAgICAgICAkY2FydERJVj0kKCc8ZGl2PicsIHsgaWQ6ICdpemhfYmxvY2tDYXJ0JywgJ2NsYXNzJzogJ2l6aF9ibG9ja0NhcnQnIH0pLmNzcyh7CiAgICAgICAgICAgICAgICAndG9wJzppWmhpaHUuJG1haW4ub2Zmc2V0KCkudG9wCiAgICAgICAgICAgIH0pLmFwcGVuZCgKICAgICAgICAgICAgICAgICQoJzxkaXY+Jyx7CiAgICAgICAgICAgICAgICAgICAgJ2NsYXNzJzonZG8nCiAgICAgICAgICAgICAgICAgICwgJ2l6aF9udW0yQic6MAogICAgICAgICAgICAgICAgICAsICd0aXRsZSc6J+S4i+S4uuOAjOWAmeWuoeOAjeWIl+ihqFxu54K55Ye75bem5LiK6KeS5Y+v5pS26LW3L+WxleW8gFxu5pWw5a2X5Li65Lq654qv5oC75pWw77yI57qi6Imy6KGo56S65LuN5pyJ5Lq654qv5q2j5b6F5YWl5YiX77yJJwogICAgICAgICAgICAgICAgfSkuYXBwZW5kKAogICAgICAgICAgICAgICAgICAgICQoJzxhPicsewogICAgICAgICAgICAgICAgICAgICAgICAnY2xhc3MnOididXR0b24gZGVsQWxsJwogICAgICAgICAgICAgICAgICAgICAgLCBocmVmOidqYXZhc2NyaXB0OnZvaWQoMCk7JwogICAgICAgICAgICAgICAgICAgICAgLCB0aXRsZTon5riF56m644CM5YCZ5a6h44CN5YiX6KGoJwogICAgICAgICAgICAgICAgICAgICAgLCBjbGljazpmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkY2FydERJVj0kKCcjaXpoX2Jsb2NrQ2FydCcpOwogICAgICAgICAgICAgICAgICAgICAgICAgICRjYXJ0RElWLmNzcygnYm90dG9tJywnJykuZmluZCgnLmxpc3QnKS5lbXB0eSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcy5wYXJlbnROb2RlKS5hdHRyKCdpemhfbnVtMkInLCcwJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgJGNhcnRESVYuY3NzKCdoZWlnaHQnLCcnKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pLnRleHQoJ+Wkp+i1picpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5JzonYmxvY2snCiAgICAgICAgICAgICAgICAgICAgICAsICdwb3NpdGlvbic6J2Fic29sdXRlJwogICAgICAgICAgICAgICAgICAgICAgLCAnbGVmdCc6MjQKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgKS5hcHBlbmQoCiAgICAgICAgICAgICAgICAgICAgJCgnPGlucHV0PicsewogICAgICAgICAgICAgICAgICAgICAgICAnY2xhc3MnOid1bmZvJwogICAgICAgICAgICAgICAgICAgICAgLCBocmVmOidqYXZhc2NyaXB0OnZvaWQoMCk7JwogICAgICAgICAgICAgICAgICAgICAgLCB0eXBlOidjaGVja2JveCcKICAgICAgICAgICAgICAgICAgICAgICwgdGl0bGU6J+mAieS4reWQju+8jOWwhuaIkeWFs+azqOS5i+S6uuagh+WHuu+8jOaUueS7peaUvumAkO+8iOWPlua2iOWFs+azqO+8ieiuuuWkhCcKICAgICAgICAgICAgICAgICAgICAgICwgY2xpY2s6ZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGNhcnRESVY9JCh0aGlzLnBhcmVudE5vZGUucGFyZW50Tm9kZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgJHVzZXJzPSQoJy5mcmFtZSAubGlzdC5pX2ZvIC51c2VyMkInLCRjYXJ0RElWKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAkYWN0aW9uPSQoJy5hY3Rpb24nLHRoaXMucGFyZW50Tm9kZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5jaGVja2VkKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVzZXJzLmFkZENsYXNzKCd1bmZvJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhY3Rpb24udGV4dCgn5pS+6YCQJykuY3NzKCdwYWRkaW5nJywnMCAyZW0gMCAwJykuYXR0cigndGl0bGUnLCflr7nliJfooajlhoXmiJHlhbPms6jkuYvkurrlj5bmtojlhbPms6gnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVzZXJzLnJlbW92ZUNsYXNzKCd1bmZvJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhY3Rpb24udGV4dCgn5pS255uRJykuY3NzKCdwYWRkaW5nJywnMCAwIDAgMmVtJykuYXR0cigndGl0bGUnLCflsIbkuIvliJfkurrniq/pgJDkuIDliqDlhaXpu5HlkI3ljZUnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkuY3NzKHsKICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXknOidibG9jaycKICAgICAgICAgICAgICAgICAgICAgICwgJ2Zsb2F0JzonbGVmdCcKICAgICAgICAgICAgICAgICAgICAgICwgJ2hlaWdodCc6MjIKICAgICAgICAgICAgICAgICAgICAgICwgJ2xpbmUtaGVpZ2h0JzoyMgogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICApLmFwcGVuZCgKICAgICAgICAgICAgICAgICAgICAkKCc8c3Bhbj4nLHsKICAgICAgICAgICAgICAgICAgICAgICAgJ2NsYXNzJzonJwogICAgICAgICAgICAgICAgICAgICAgLCBocmVmOidqYXZhc2NyaXB0OnZvaWQoMCk7JwogICAgICAgICAgICAgICAgICAgICAgLCB0aXRsZTon6YCJ5Lit5ZCO77yM5bCG5oiR5YWz5rOo55qE5Lq65qCH5Ye677yM5YeG5aSH44CM5Y+W5raI5YWz5rOo44CNJwogICAgICAgICAgICAgICAgICAgIH0pLnRleHQoJ+S7jui9uycpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgICAgICdkaXNwbGF5JzonYmxvY2snCiAgICAgICAgICAgICAgICAgICAgICAsICdmbG9hdCc6J2xlZnQnCiAgICAgICAgICAgICAgICAgICAgICAsICdtYXJnaW4tcmlnaHQnOjIwCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICkuYXBwZW5kKAogICAgICAgICAgICAgICAgICAgICQoJzxhPicsewogICAgICAgICAgICAgICAgICAgICAgICAnY2xhc3MnOididXR0b24gYWN0aW9uJwogICAgICAgICAgICAgICAgICAgICAgLCBocmVmOidqYXZhc2NyaXB0OnZvaWQoMCk7JwogICAgICAgICAgICAgICAgICAgICAgLCB0aXRsZTon5bCG5LiL5YiX5Lq654qv6YCQ5LiA5Yqg5YWl6buR5ZCN5Y2VJwogICAgICAgICAgICAgICAgICAgICAgLCBjbGljazpmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRjYXJ0RElWPSQodGhpcy5wYXJlbnROb2RlLnBhcmVudE5vZGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJCgnLnVuZm8nLHRoaXMucGFyZW50Tm9kZSkuaXMoJzpjaGVja2VkJykpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5saXN0LmlfZm8gLnVzZXIyQicsJGNhcnRESVYpLmVhY2goZnVuY3Rpb24oaSxlKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaVpoaWh1LlF1aWNrQmxvY2suVXNlcnMyQkJRLnB1c2goJChlKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpWmhpaHUuUXVpY2tCbG9jay5kb1VuZm9sbG93KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcubGlzdCAudXNlcjJCJywkY2FydERJVikuZWFjaChmdW5jdGlvbihpLGUpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpWmhpaHUuUXVpY2tCbG9jay5Vc2VyczJCQlEucHVzaCgkKGUpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlaaGlodS5RdWlja0Jsb2NrLmRvUXVpY2tCbG9jaygpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkudGV4dCgn5pS255uRJykuY3NzKHsKICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXknOidibG9jaycKICAgICAgICAgICAgICAgICAgICAgICwgJ2Zsb2F0JzoncmlnaHQnCiAgICAgICAgICAgICAgICAgICAgICAsICdtYXJnaW4tbGVmdCc6MjAKICAgICAgICAgICAgICAgICAgICAgICwgJ21hcmdpbi1yaWdodCc6LTEwCiAgICAgICAgICAgICAgICAgICAgICAsICdwYWRkaW5nJzonMCAwIDAgMmVtJwogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICApLmFwcGVuZCgKICAgICAgICAgICAgICAgICAgICAkKCc8YT4nLHsKICAgICAgICAgICAgICAgICAgICAgICAgJ2NsYXNzJzonemctaWNvbiB6Zy1pY29uLWRvdWJsZS1hcnJvdycKICAgICAgICAgICAgICAgICAgICAgICwgaHJlZjonamF2YXNjcmlwdDp2b2lkKDApOycKICAgICAgICAgICAgICAgICAgICAgICwgY2xpY2s6ZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGNhcnRESVY9JCgnI2l6aF9ibG9ja0NhcnQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkY2FydERJVi5hdHRyKCdtaW5pJykhPScxJyl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjYXJ0RElWLmZpbmQoJy5mcmFtZScpLmhpZGUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNhcnRESVYuY3NzKHsnaGVpZ2h0JzonJywnYm90dG9tJzonJ30pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY2FydERJVi5hdHRyKCdtaW5pJywnMScpOwogICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY2FydERJVi5maW5kKCcuZnJhbWUnKS5zaG93KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlaaGlodS5RdWlja0Jsb2NrLnJlc2l6ZUJsb2NrQ2FydCgkY2FydERJVik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjYXJ0RElWLmF0dHIoJ21pbmknLCcwJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgICAgICdwb3NpdGlvbic6J2Fic29sdXRlJwogICAgICAgICAgICAgICAgICAgICAgLCAnbGVmdCc6MAogICAgICAgICAgICAgICAgICAgICAgLCAndG9wJzo1CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgKS5hcHBlbmQoCiAgICAgICAgICAgICAgICAkKCc8ZGl2PicseydjbGFzcyc6J2ZyYW1lJ30KICAgICAgICAgICAgICAgICkuYXBwZW5kKAogICAgICAgICAgICAgICAgICAgICQoJzxkaXY+Jyx7CiAgICAgICAgICAgICAgICAgICAgICAgICdjbGFzcyc6J2xpc3QgaV9mbyBmb19pJwogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICApLmFwcGVuZCgKICAgICAgICAgICAgICAgICAgICAkKCc8ZGl2PicsewogICAgICAgICAgICAgICAgICAgICAgICAnY2xhc3MnOidsaXN0IGlfZm8nCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICkuYXBwZW5kKAogICAgICAgICAgICAgICAgICAgICQoJzxkaXY+Jyx7CiAgICAgICAgICAgICAgICAgICAgICAgICdjbGFzcyc6J2xpc3QgZm9faScKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgKS5hcHBlbmQoCiAgICAgICAgICAgICAgICAgICAgJCgnPGRpdj4nLHsKICAgICAgICAgICAgICAgICAgICAgICAgJ2NsYXNzJzonbGlzdCcKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICApLmFwcGVuZFRvKGlaaGlodS4kYm9keSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gJGNhcnRESVYKICAgIH0KICAgIHRoaXMuaW4yQmxvY2tDYXJ0ID0gZnVuY3Rpb24odXJsLHJldHJpZWRDb3VudCl7CiAgICAgICAgdmFyICRlID0gaVpoaWh1LlF1aWNrQmxvY2suVXNlcnMyQi5zaGlmdCgpIHx8IG51bGwKICAgICAgICAgICwgJGNhcnRESVYgPSBpWmhpaHUuUXVpY2tCbG9jay5nZXRDYXJ0RElWKCkKCiAgICAgICAgJGNhcnRESVYuYWRkQ2xhc3MoJ3BlbmRpbmcnKTsKICAgICAgICBpZih0eXBlb2YgcmV0cmllZENvdW50ID09ICd1bmRlZmluZWQnKQogICAgICAgICAgICByZXRyaWVkQ291bnQgPSAwCgogICAgICAgIC8vY29uc29sZS5sb2cocmV0cmllZENvdW50KQogICAgICAgIGlmICghJGUgfHwgJGUubGVuZ3RoID09PSAwKXsKICAgICAgICAgICAgaWYoKHVybHx8JycpPT0nJyl7CiAgICAgICAgICAgICAgICAkY2FydERJVi5yZW1vdmVDbGFzcygncGVuZGluZycpCiAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgJC5hamF4KFsnJyx1cmxdLmpvaW4oJycpLHsKICAgICAgICAgICAgICAgICAgICB0eXBlOidHRVQnCiAgICAgICAgICAgICAgICAgICwgbWF4UmV0cnlDb3VudDogMwogICAgICAgICAgICAgICAgfSkuZG9uZShmdW5jdGlvbihkYXRhLCB0ZXh0U3RhdHVzLCBqcVhIUil7CiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGRhdGEucGF5bG9hZCxmdW5jdGlvbihpLGUpewogICAgICAgICAgICAgICAgICAgICAgICBpWmhpaHUuUXVpY2tCbG9jay5hZGRVc2VyMkIoZSkKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIGlaaGlodS5RdWlja0Jsb2NrLmluMkJsb2NrQ2FydChkYXRhLnBhZ2luZy5uZXh0KQogICAgICAgICAgICAgICAgfSkuZmFpbChmdW5jdGlvbihkYXRhLHRleHRTdGF0dXMsalhIUil7CiAgICAgICAgICAgICAgICAgICAgaWYgKCsrcmV0cmllZENvdW50IDwgdGhpcy5tYXhSZXRyeUNvdW50KXsKICAgICAgICAgICAgICAgICAgICAgICAgaVpoaWh1LlF1aWNrQmxvY2suaW4yQmxvY2tDYXJ0KHVybCxyZXRyaWVkQ291bnQpCiAgICAgICAgICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAgICAgICAgICRjYXJ0RElWLnJlbW92ZUNsYXNzKCdwZW5kaW5nJykKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybgogICAgICAgIH0KCiAgICAgICAgdmFyIGhyZWYgPSAkZS5hdHRyKCdocmVmJykKICAgICAgICAgICwgdXNlcm5hbWUgPSBocmVmLnNwbGl0KCcvJykucG9wKCkKICAgICAgICAgICwgd2hvID0gdXNlcm5hbWUrJywnCiAgICAgICAgOwoKICAgICAgICBpZigkY2FydERJVi5maW5kKCcudXNlcjJCW2hyZWY9IicraHJlZisnIl0nKS5sZW5ndGgpewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICAkLmFqYXgoJy9ub2RlL01lbWJlclByb2ZpbGVDYXJkVjI/JyskLnBhcmFtKHtwYXJhbXM6SlNPTi5zdHJpbmdpZnkoeyd1cmxfdG9rZW4nOnVzZXJuYW1lfSl9KSwgewogICAgICAgICAgICB0eXBlOiAnR0VUJwogICAgICAgICAgLCB1c2VyMkI6ICRlCiAgICAgICAgICAsIG1heFJldHJ5Q291bnQ6IDMKICAgICAgICB9KS5kb25lKGZ1bmN0aW9uKGRhdGEsIHRleHRTdGF0dXMsIGpxWEhSKXsKICAgICAgICAgICAgaVpoaWh1LlF1aWNrQmxvY2suYWRkVXNlcjJCKGRhdGEpCiAgICAgICAgICAgIGlaaGlodS5RdWlja0Jsb2NrLmluMkJsb2NrQ2FydCh1cmwpCiAgICAgICAgfSkuZmFpbChmdW5jdGlvbihkYXRhLHRleHRTdGF0dXMsalhIUil7CiAgICAgICAgICAgIGlmICgrK3JldHJpZWRDb3VudCA8IHRoaXMubWF4UmV0cnlDb3VudCl7CiAgICAgICAgICAgICAgICBpWmhpaHUuUXVpY2tCbG9jay5Vc2VyczJCLnVuc2hpZnQodGhpcy51c2VyMkIpCiAgICAgICAgICAgICAgICBpWmhpaHUuUXVpY2tCbG9jay5pbjJCbG9ja0NhcnQodXJsLHJldHJpZWRDb3VudCkKICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgIH0KICAgICAgICB9KS5hbHdheXMoZnVuY3Rpb24oZGF0YSx0ZXh0U3RhdHVzLGpYSFIpewogICAgICAgICAgICAkKCcjaXpoX2Jsb2NrQ2FydCcpLnJlbW92ZUNsYXNzKCdwZW5kaW5nJyk7CiAgICAgICAgfSk7CiAgICB9OwogICAgdGhpcy5hZGRVc2VyMkI9ZnVuY3Rpb24oZGF0YSl7CiAgICAgICAgaWYgKGRhdGEgPT09ICcnKSByZXR1cm4KICAgICAgICB2YXIgJGh0bWw9JChkYXRhLnJlcGxhY2UodXRpbHMuUmVnZXhTcmNQaWMsICcnKSkKICAgICAgICAgICwgaXNaSFBDPSRodG1sLmlzKCcuemgtcHJvZmlsZS1jYXJkJykKICAgICAgICAgICwgJGF2YXRhckxpbms9aXNaSFBDPyRodG1sLmZpbmQoJy5hdmF0YXItbGluazpmaXJzdCcpOiRodG1sLmZpbmQoJy56bS1pdGVtLWxpbmstYXZhdGFyOmZpcnN0JykKICAgICAgICAgICwgaHJlZj0kYXZhdGFyTGluay5hdHRyKCdocmVmJykKICAgICAgICBpZigoaHJlZnx8JycpPT0nJylyZXR1cm4KCiAgICAgICAgdmFyIHVzZXJJRD1ocmVmLnN1YnN0cig4KQogICAgICAgICAgLCB1c2VyTmFtZT1pc1pIUEM/JGF2YXRhckxpbmsudGV4dCgpOiRhdmF0YXJMaW5rLmF0dHIoJ3RpdGxlJykKICAgICAgICAgICwgJGJ0bkZvbGxvdz0kaHRtbC5maW5kKCdidXR0b25bZGF0YS1mb2xsb3ddJykKICAgICAgICAgICwgaGFzaElEPSEkYnRuRm9sbG93Lmxlbmd0aD8nJzokYnRuRm9sbG93LmF0dHIoJ2RhdGEtaWQnKQogICAgICAgICAgLCBmXz0kYnRuRm9sbG93Lmxlbmd0aCYmJGJ0bkZvbGxvdy5pcygnLnpnLWJ0bi11bmZvbGxvdycpCiAgICAgICAgICAsIF9mPSRidG5Gb2xsb3cubGVuZ3RoJiYkYnRuRm9sbG93LmlzKCdbZGF0YS1mb2xsb3dtZT0xXScpCiAgICAgICAgICAsIGNzc0Y9X2Z8fGZfPyd6Zy1pY29uIHJlbCAnOicnCiAgICAgICAgICAsICRjYXJ0RElWPWlaaGlodS5RdWlja0Jsb2NrLmdldENhcnRESVYoKQogICAgICAgICAgLCAkY2FydD0kY2FydERJVi5maW5kKCcubGlzdCcpCiAgICAgICAgICAsIHdobz0nLCcrdXNlcklEKycsJwogICAgICAgIDsKCiAgICAgICAgaWYoaGFzaElEPT0nJyl7CiAgICAgICAgICAgIHJldHVybjsgLy8gVXNlciBibG9ja2VkIG9yIHlvdSBibG9ja2VkCiAgICAgICAgfQogICAgICAgIAogICAgICAgIGlmKCRjYXJ0RElWLmZpbmQoJy5saXN0IC51c2VyMkJbaHJlZj0iJytocmVmKyciXScpLmxlbmd0aCl7CiAgICAgICAgICAgIHJldHVybjsgLy8gVXNlciBhbHJlYWR5IGluIGJsb2NrIGxpc3QKICAgICAgICB9CgogICAgICAgIHZhciAkdXNlcjJCPSQoJzxkaXY+Jyx7CiAgICAgICAgICAgICAgICAnY2xhc3MnOid1c2VyMkInKyhmXyYmJGNhcnRESVYuZmluZCgnLmRvIC51bmZvOmNoZWNrZWQnKS5sZW5ndGg/JyB1bmZvJzonJykKICAgICAgICAgICAgICAsICdocmVmJzpocmVmCiAgICAgICAgICAgICAgLCAndWlkJzpoYXNoSUQKICAgICAgICAgICAgfSkKICAgICAgICAgICAgLmFwcGVuZCgKICAgICAgICAgICAgICAgICQoJzxhPicsewogICAgICAgICAgICAgICAgICAgICdjbGFzcyc6J2J1dHRvbiBkZWwnCiAgICAgICAgICAgICAgICAgICwgaHJlZjonamF2YXNjcmlwdDp2b2lkKDApOycKICAgICAgICAgICAgICAgICAgLCBjbGljazpmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgJHVzZXI9JCh0aGlzKS5jbG9zZXN0KCcudXNlcjJCJykKICAgICAgICAgICAgICAgICAgICAgICAgICAsICRjYXJ0RElWPSQoJyNpemhfYmxvY2tDYXJ0JykKICAgICAgICAgICAgICAgICAgICAgICAgOwogICAgICAgICAgICAgICAgICAgICAgICAkdXNlci5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG51bTJCPSRjYXJ0RElWLmZpbmQoJy5saXN0IC51c2VyMkInKS5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgICAgICRjYXJ0RElWLmNoaWxkcmVuKCcuZG8nKS5hdHRyKCdpemhfbnVtMkInLG51bTJCPT0wPycwJzpudW0yQj45OTk/JzFrKyc6bnVtMkIpOwogICAgICAgICAgICAgICAgICAgICAgICBpZihudW0yQikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlaaGlodS5RdWlja0Jsb2NrLnJlc2l6ZUJsb2NrQ2FydCgkY2FydERJVik7CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjYXJ0RElWLmNzcygnaGVpZ2h0JywnJyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkudGV4dCgn6LWmJykKICAgICAgICAgICAgKS5hcHBlbmQoCiAgICAgICAgICAgICAgICAkKCc8aT4nLHsKICAgICAgICAgICAgICAgICAgICAnY2xhc3MnOidzYXknCiAgICAgICAgICAgICAgICAgICwgJ2RhdGEtdGlwJzoncCR0JCcrdXNlcklECiAgICAgICAgICAgICAgICB9KS50ZXh0KCflhqTmnoknKQogICAgICAgICAgICApLmFwcGVuZCgkKCc8aT4nLHsnY2xhc3MnOidzYXlfMSd9KQogICAgICAgICAgICApLmFwcGVuZCgkKCc8aT4nLHsnY2xhc3MnOidzYXlfMid9KQogICAgICAgICAgICApLmFwcGVuZCgkKCc8aT4nLHsnY2xhc3MnOmNzc0Z9KQogICAgICAgICAgICApLmFwcGVuZCgKICAgICAgICAgICAgICAgICQoJzxhPicsewogICAgICAgICAgICAgICAgICAgICdjbGFzcyc6J25hbWUnCiAgICAgICAgICAgICAgICAgICwgaHJlZjpocmVmCiAgICAgICAgICAgICAgICAgICwgdGFyZ2V0OidfYmxhbmsnCiAgICAgICAgICAgICAgICB9KS50ZXh0KHVzZXJOYW1lKQogICAgICAgICAgICApLnNob3coKQogICAgICAgIDsKICAgICAgICBpZihmXyYmX2YpewogICAgICAgICAgICAkY2FydC5lcSgwKS5hcHBlbmQoJHVzZXIyQik7CiAgICAgICAgfWVsc2UgaWYoZl8pewogICAgICAgICAgICAkY2FydC5lcSgxKS5hcHBlbmQoJHVzZXIyQik7CiAgICAgICAgfWVsc2UgaWYoX2YpewogICAgICAgICAgICAkY2FydC5lcSgyKS5hcHBlbmQoJHVzZXIyQik7CiAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICRjYXJ0LmVxKDMpLmFwcGVuZCgkdXNlcjJCKTsKICAgICAgICB9CiAgICAgICAgdmFyIG51bTJCPSRjYXJ0RElWLmZpbmQoJy5saXN0IC51c2VyMkInKS5sZW5ndGg7CiAgICAgICAgJGNhcnRESVYuY2hpbGRyZW4oJy5kbycpLmF0dHIoJ2l6aF9udW0yQicsbnVtMkI9PTA/JzAnOm51bTJCPjk5OTk/JzEwaysnOm51bTJCKTsKICAgICAgICBpWmhpaHUuUXVpY2tCbG9jay5yZXNpemVCbG9ja0NhcnQoJGNhcnRESVYpOwogICAgfQogICAgdGhpcy5hZGRRdWlja0Jsb2NrID0gZnVuY3Rpb24oJGEpewogICAgICAgIHZhciAkdm90ZUluZm89JCgnLnptLWl0ZW0tdm90ZS1pbmZvJywkYSkKICAgICAgICBpZigkdm90ZUluZm8ubGVuZ3RoKXsKICAgICAgICAgICAgdmFyICR2b3RlcnM9JHZvdGVJbmZvLmNoaWxkcmVuKCcudm90ZXJzJykKICAgICAgICAgICAgaWYoJHZvdGVycy5sZW5ndGgpewogICAgICAgICAgICAgICAgdmFyIHM9WyfvvIwnLCR2b3RlSW5mby5hdHRyKCdkYXRhLXZvdGVjb3VudCcpLCfkuKrkuZ/kuI3og73lv43vvIzmnpzmlq3mkpUnXS5qb2luKCcnKQogICAgICAgICAgICAgICAgICAsIGFpZD0kYS5hdHRyKCdkYXRhLWFpZCcpfHwkYS5jaGlsZHJlbignW2l0ZW1wcm9wPSJaUmVhY3RvciJdJykuYXR0cignZGF0YS1pZCcpCiAgICAgICAgICAgICAgICAgICwgdXJsPVsnLycsJGEuYXR0cignZGF0YS10eXBlJyk9PSdwJz8ncG9zdCc6J2Fuc3dlcicsJy8nLGFpZCwnL3ZvdGVyc19wcm9maWxlJ10uam9pbignJykKICAgICAgICAgICAgICAgICQoJzxhPicse2hyZWY6J2phdmFzY3JpcHQ6OycsJ2NsYXNzJzondGV4dCd9KS50ZXh0KHMpLmJpbmQoJ2NsaWNrJyxmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgICAgICAgICAgdmFyICR0PSRhLmZpbmQoJy5hdXRob3ItaW5mbyA+IGEubmFtZSwuem0taXRlbS1hbnN3ZXItYXV0aG9yLWluZm8gPiBhLmF1dGhvci1saW5rJykKICAgICAgICAgICAgICAgICAgICBpZigkdCYmJHQubGVuZ3RoKXsKICAgICAgICAgICAgICAgICAgICAgICAgaVpoaWh1LlF1aWNrQmxvY2suVXNlcnMyQi5wdXNoKCR0KQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpWmhpaHUuUXVpY2tCbG9jay5pbjJCbG9ja0NhcnQodXJsKQogICAgICAgICAgICAgICAgfSkuYXBwZW5kVG8oJHZvdGVJbmZvKQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfTsKICAgIHRoaXMuYWRkUXVpY2tCbG9ja0luT25lQ29tbWVudCA9IGZ1bmN0aW9uKCRjbUl0ZW0pewogICAgICAgIHZhciAkd2hlcmU9JCgnLnptLWNvbW1lbnQtaGQnLCRjbUl0ZW0pOwogICAgICAgIGlmKCR3aGVyZS5maW5kKCcuaXpoLXF1aWNrLWJsb2NrLXBlbmQnKS5sZW5ndGgpcmV0dXJuOwogICAgICAgICQoJzxhPicsewogICAgICAgICAgICAnY2xhc3MnOidpemgtcXVpY2stYmxvY2stcGVuZCBpemgtYnV0dG9uJwogICAgICAgICAgLCBocmVmOidqYXZhc2NyaXB0OnZvaWQoMCk7JwogICAgICAgICAgLCAnZGF0YS10aXAnOidzJGwk5bCG5q2k5Lq65YiX5YWl5YCZ5a6h5ZCN5Y2V5Lul5b6F5pS255uRJwogICAgICAgIH0pLnRleHQoJ+WAmeWuoScpLmNsaWNrKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIHZhciAkZSA9ICQodGhpcykubmV4dCgpCiAgICAgICAgICAgIGlaaGlodS5RdWlja0Jsb2NrLlVzZXJzMkIucHVzaCgkZSkKICAgICAgICAgICAgaVpoaWh1LlF1aWNrQmxvY2suaW4yQmxvY2tDYXJ0KCk7CiAgICAgICAgfSkucHJlcGVuZFRvKCR3aGVyZSkuaGlkZSgpOwogICAgfTsKICAgIHRoaXMuYWRkUXVpY2tCbG9ja0luQ29tbWVudExpc3QgPSBmdW5jdGlvbigkd2hlcmUpewogICAgICAgIC8vIFJlZ2lvbjog5b+r6YCf5bGP6JS9CiAgICAgICAgdmFyICRjbT0kd2hlcmUuaXMoJy56bS1jb21tZW50LWJveCcpPyR3aGVyZTokd2hlcmUuY2xvc2VzdCgnLnptLWNvbW1lbnQtYm94JykKICAgICAgICAgICwgJHU9JCgnLnptLWl0ZW0tY29tbWVudCcsJGNtKQogICAgICAgIDsKICAgICAgICAkdS5lYWNoKGZ1bmN0aW9uKGksZSl7CiAgICAgICAgICAgIGlaaGlodS5RdWlja0Jsb2NrLmFkZFF1aWNrQmxvY2tJbk9uZUNvbW1lbnQoJChlKSk7CiAgICAgICAgfSk7CiAgICAgICAgdmFyICRidG5RdWlja0Jsb2NrPSQoJzxhPicsewogICAgICAgICAgICAgICAgJ2NsYXNzJzonaXpoLXF1aWNrLWJsb2NrLXN3aXRjaCBpemgtYnV0dG9uJwogICAgICAgICAgICAgICwgaHJlZjonamF2YXNjcmlwdDp2b2lkKDApOycKICAgICAgICAgICAgICAsICdkYXRhLXRpcCc6J3MkdCTlvIDlp4vku47or4TorrrogIXkuK3pgInmi6nlsY/olL3lr7nosaEnCiAgICAgICAgICAgIH0pLnRleHQoJ+W/q+mAn+Wxj+iUvScpLmNzcyh7J21hcmdpbi1sZWZ0Jzo3fSkucHJlcGVuZFRvKCR3aGVyZSkuY2xpY2soZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIGlmKHRoaXMuZ2V0QXR0cmlidXRlKCdvbicpPT0nMScpewogICAgICAgICAgICAgICAgICAgICQoJy56bS1jb21tZW50LWhkIC5pemgtcXVpY2stYmxvY2stcGVuZCcpLmhpZGUoKTsKICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoeydkYXRhLXRpcCc6J3MkdCTlvIDlp4vku47or4TorrrogIXkuK3pgInmi6nlsY/olL3lr7nosaEnLCdvbic6JzAnfSkucmVtb3ZlQ2xhc3MoJ29uJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlewogICAgICAgICAgICAgICAgICAgICQoJy56bS1jb21tZW50LWhkIC5pemgtcXVpY2stYmxvY2stcGVuZCcpLnNob3coKTsKICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoeydkYXRhLXRpcCc6J3MkdCTnu5PmnZ/ku47or4TorrrogIXkuK3pgInmi6nlsY/olL3lr7nosaEnLCdvbic6JzEnfSkuYWRkQ2xhc3MoJ29uJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCiAgICAgICAgOwogICAgICAgIGlmKCRjbS5pcygnLmVtcHR5JykpewogICAgICAgICAgICAkYnRuUXVpY2tCbG9jay5oaWRlKCk7CiAgICAgICAgfQogICAgICAgIC8vIFJlZ2lvbiBlbmQKICAgIH07CiAgICAKICAgIGlaaGlodS4kYm9keS5iaW5kKCdET01Ob2RlSW5zZXJ0ZWQnLGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICAkKGV2ZW50LnRhcmdldCkuZmlsdGVyKCcjemgtdG9vbHRpcCcpLmJpbmQoJ0RPTU5vZGVJbnNlcnRlZCcsZnVuY3Rpb24oZXZlbnQpewogICAgICAgICAgICB2YXIgJGE9JChldmVudC50YXJnZXQpLmZpbHRlcignI3poLXRvb2x0aXAtcGVvcGxlJykuZmluZCgnYVtuYW1lPWZvY3VzXScpCiAgICAgICAgICAgICAgLCBiaWQ9JGEuYXR0cignaWQnKQogICAgICAgICAgICAgICwgd2hvPScsJytiaWQrJywnCiAgICAgICAgICAgIDsKICAgICAgICAgICAgaWYoJGEuaXMoJy56Zy1idG4tdW5mb2xsb3cnKSYmaVpoaWh1LlF1aWNrQmxvY2suVW5mb2xsb3dlZC5Vc2Vycy5pbmRleE9mKHdobyk+PTApewogICAgICAgICAgICAgICAgJGEudGV4dCgn5YWz5rOoJykucmVtb3ZlQ2xhc3MoJ3pnLWJ0bi11bmZvbGxvdycpLmFkZENsYXNzKCd6Zy1idG4tZm9sbG93Jyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoJGEuaXMoJy56Zy1idG4tZm9sbG93JykmJmlaaGlodS5RdWlja0Jsb2NrLlJlZm9sbG93ZWQuVXNlcnMuaW5kZXhPZih3aG8pPj0wKXsKICAgICAgICAgICAgICAgICRhLnRleHQoJ+WPlua2iOWFs+azqCcpLnJlbW92ZUNsYXNzKCd6Zy1idG4tZm9sbG93JykuYWRkQ2xhc3MoJ3pnLWJ0bi11bmZvbGxvdycpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9KTsKICAgIHJldHVybiB0aGlzOwp9CgovKioKICogQGNsYXNzIFF1aWNrRmF2bwogKi8KZnVuY3Rpb24gUXVpY2tGYXZvKGlaaGlodSkgewogICAgaWYgKCB0eXBlb2YgaVpoaWh1ID09PSAndW5kZWZpbmVkJyB8fCAhaVpoaWh1IHx8ICFpWmhpaHUuY29uZmlnWydRdWlja0Zhdm8nXSkgewogICAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgaVpoaWh1LlF1aWNrRmF2byA9IHRoaXM7CiAgICAKICAgIHRoaXMuRGVmYXVsdENvdW50ID0gNDsKICAgIHRoaXMuUGlubmVkTGlzdCA9IGlaaGlodS5jb25maWdbJ1F1aWNrRmF2b1Bpbm5lZCddOwogICAgdGhpcy5jc3MgPSAKICAgICAgICBbJy5pemgtUGluNFF1aWNrRmF2b3twYWRkaW5nOjNweCA1cHggMDtmbG9hdDpyaWdodDtkaXNwbGF5OmJsb2NrO21hcmdpbi10b3A6NHB4O21hcmdpbi1yaWdodDoyZW07bGluZS1oZWlnaHQ6MS4yNTt9JwogICAgICAgICwnLml6aC1QaW40UXVpY2tGYXZvIC56bS1pdGVtLXRvcC1idG57dmlzaWJpbGl0eTp2aXNpYmxlO21hcmdpbjowIDRweDtmbG9hdDpyaWdodDt9JwogICAgICAgICwnZGl2Lml6aF9mYXZ7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDo5OTk5O2Rpc3BsYXk6bm9uZTtib3JkZXI6MXB4IHNvbGlkICM5OTk5OTk7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JvcmRlci1yYWRpdXM6NXB4IDVweCA1cHggMDttYXJnaW4tbGVmdDotMXB4O30nCiAgICAgICAgLCdkaXYuaXpoX2ZhdiAudGl0bGV7cGFkZGluZzowIDVweDtiYWNrZ3JvdW5kLWNvbG9yOiMwODc0YzQ7Y29sb3I6I2ZmZjtmb250LXdlaWdodDpib2xkO2ZvbnQtc2l6ZToxNXB4O3RleHQtYWxpZ246Y2VudGVyO2JvcmRlci1yYWRpdXM6M3B4IDNweCAwIDA7fScKICAgICAgICAsJ2Rpdi5pemhfZmF2IGEuZmF2e2Rpc3BsYXk6YmxvY2s7Y2xlYXI6Ym90aDtmbG9hdDtsZWZ0O3BhZGRpbmc6MCAzNnB4IDAgMjRweDtsaW5lLWhlaWdodDoyO30nCiAgICAgICAgLCdkaXYuaXpoX2ZhdiBhLmZhdiBpe3Bvc2l0aW9uOmFic29sdXRlO21hcmdpbi10b3A6MC41ZW07fScKICAgICAgICAsJ2Rpdi5pemhfZmF2IGEuZmF2IGkuc3Bpbm5lci1ncmF5e2xlZnQ6MDt9JwogICAgICAgICwnZGl2Lml6aF9mYXYgYS5mYXYgaS56LWljb24tY29sbGVjdHtsZWZ0OjEwcHg7dmlzaWJpbGl0eTpoaWRkZW47YmFja2dyb3VuZC1wb3NpdGlvbjotNTZweCAtMzZweDt9JwogICAgICAgICwnZGl2Lml6aF9mYXYgYS5mYXYuc2VsZWN0ZWQgaS56LWljb24tY29sbGVjdHt2aXNpYmlsaXR5OnZpc2libGU7fScKICAgICAgICAsJ2Rpdi5pemhfZmF2IGEuZmF2OmhvdmVye3RleHQtZGVjb3JhdGlvbjpub25lfScKICAgICAgICAsJ2Rpdi5pemhfZmF2IGEuZmF2IHNwYW57ZmxvYXQ6cmlnaHQ7ZGlzcGxheTpibG9jazttYXJnaW4tcmlnaHQ6LTMycHh9JwogICAgICAgICwnLm1ldGEtaXRlbS5vbntwb3NpdGlvbjpyZWxhdGl2ZTt6LWluZGV4OjEwMDAwO2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3JkZXI6MXB4IHNvbGlkICM5OTk5OTk7Ym9yZGVyLXRvcC1jb2xvcjojZmZmO21hcmdpbjotMXB4IC04cHggLTFweCAtMXB4O3BhZGRpbmc6MCA3cHg7Ym9yZGVyLXJhZGl1czoycHggMnB4IDNweCAzcHg7fScKICAgICAgICAsJyddLmpvaW4oJ1xuJyk7CiAgICB0aGlzLmFkZFF1aWNrRmF2byA9IGZ1bmN0aW9uKCR2LCRhKXsKICAgICAgICBpZigkdi5sZW5ndGgpewogICAgICAgICAgICBpZigkYS5jaGlsZHJlbignLml6aF9mYXYnKS5sZW5ndGg8PTApewogICAgICAgICAgICAgICAgJCgnPGRpdj4nLCB7ICdjbGFzcyc6ICdpemhfZmF2JyB9KQogICAgICAgICAgICAgICAgCS5hcHBlbmQoJCgnPGk+JywgeyAnY2xhc3MnOiAnc3Bpbm5lci1ncmF5JyB9KSkKICAgICAgICAgICAgICAgIAkuYXBwZW5kKCcmbmJzcDvliqDovb3kuK0uLi4mbmJzcDsnKQogICAgICAgICAgICAgICAgCS5iaW5kKCdtb3VzZW92ZXInLCBmdW5jdGlvbigpewoJICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnNob3coKS5wYXJlbnQoKS5maW5kKCcubWV0YS1pdGVtW25hbWU9ZmF2b10nKS5hZGRDbGFzcygnb24nKTsKICAgICAgICAgICAgICAgIAl9KQogICAgICAgICAgICAgICAgCS5iaW5kKCdtb3VzZW91dCcsIGZ1bmN0aW9uKCl7CgkgICAgICAgICAgICAgICAgICAgICQodGhpcykuaGlkZSgpLnBhcmVudCgpLmZpbmQoJy5tZXRhLWl0ZW1bbmFtZT1mYXZvXScpLnJlbW92ZUNsYXNzKCdvbicpOwoJICAgICAgICAgICAgICAgIH0pCgkgICAgICAgICAgICAuYXBwZW5kVG8oJGEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgICR2LmJpbmQoJ21vdXNlZW50ZXInLGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICB2YXIgJGE9aVpoaWh1LmdldEl0ZW0oJCh0aGlzKSkKICAgICAgICAgICAgICAgICAgLCAkbT0kKHRoaXMpLmFkZENsYXNzKCdvbicpLmNsb3Nlc3QoJy56bS1pdGVtLW1ldGEnKQogICAgICAgICAgICAgICAgICAsIGFpZD0kYS5hdHRyKCdkYXRhLWFpZCcpCiAgICAgICAgICAgICAgICAgICwgJG9wPSQodGhpcykub2Zmc2V0UGFyZW50KCkKICAgICAgICAgICAgICAgICAgLCBib3R0b20xPXBhcnNlSW50KCRvcC5jc3MoJ21hcmdpbi1ib3R0b20nKSkKICAgICAgICAgICAgICAgICAgLCBib3R0b20yPXBhcnNlSW50KCRhLmNzcygncGFkZGluZy1ib3R0b20nKSkKICAgICAgICAgICAgICAgICAgLCBwb3M9JCh0aGlzKS5wb3NpdGlvbigpCiAgICAgICAgICAgICAgICA7CiAgICAgICAgICAgICAgICAkYS5jaGlsZHJlbignLml6aF9mYXYnKS5jc3MoewogICAgICAgICAgICAgICAgICAgICdib3R0b20nOihpc05hTihib3R0b20xKT8wOmJvdHRvbTEpKyhpc05hTihib3R0b20yKT8wOmJvdHRvbTIpKyRvcC5oZWlnaHQoKS1wb3MudG9wCiAgICAgICAgICAgICAgICAgICwgJ2xlZnQnOnBvcy5sZWZ0KyRtLnBvc2l0aW9uKCkubGVmdAogICAgICAgICAgICAgICAgfSkuc2hvdygpOwogICAgICAgICAgICAgICAgJC5nZXRKU09OKCcvY29sbGVjdGlvbnMvanNvbicsJC5wYXJhbSh7YW5zd2VyX2lkOmFpZH0pLGZ1bmN0aW9uKHJlc3VsdCxzdGF0dXMseGhyKXsKICAgICAgICAgICAgICAgICAgICB2YXIgYWlkPXRoaXMudXJsLnN1YnN0cih0aGlzLnVybC5pbmRleE9mKCdhbnN3ZXJfaWQ9JykrMTApCiAgICAgICAgICAgICAgICAgICAgICAsIHNlbD1wYWdlSXMuUXVlc3Rpb24/Jy56bS1pdGVtLWFuc3dlcicKICAgICAgICAgICAgICAgICAgICAgICAgICAgOnBhZ2VJcy5Ib21lPycuZmVlZC1pdGVtJwogICAgICAgICAgICAgICAgICAgICAgICAgICA6cGFnZUlzLkFuc3dlcj8nLnptLWl0ZW0tYW5zd2VyJwogICAgICAgICAgICAgICAgICAgICAgICAgICA6JycKICAgICAgICAgICAgICAgICAgICAgICwgJGE9JChzZWwrJ1tkYXRhLWFpZD0nK2FpZCsnXScpCiAgICAgICAgICAgICAgICAgICAgICAsICR2PSRhLmNoaWxkcmVuKCcuaXpoX2ZhdicpLmVtcHR5KCkuYXBwZW5kKCQoJzxkaXY+Jyx7J2NsYXNzJzondGl0bGUnLHRpdGxlOifku6XkuIvkuLrmnIDov5HpgInmi6nnmoTmlLbol4/lpLknfSkuYXBwZW5kKCflv6vpgJ/mlLbol48nKSkKICAgICAgICAgICAgICAgICAgICA7CiAgICAgICAgICAgICAgICAgICAgaWYoJyc9PXNlbClyZXR1cm47CiAgICAgICAgICAgICAgICAgICAgdmFyIGZhdkFsbD1yZXN1bHQubXNnWzBdCiAgICAgICAgICAgICAgICAgICAgICAsIGZhdlNlbD1yZXN1bHQubXNnWzFdCiAgICAgICAgICAgICAgICAgICAgICAsIG51bT1pWmhpaHUuUXVpY2tGYXZvLkRlZmF1bHRDb3VudAogICAgICAgICAgICAgICAgICAgICAgLCBmYXY9bmV3IEFycmF5KCkKICAgICAgICAgICAgICAgICAgICAgICwgZmF2Tm9ybWFsPW5ldyBBcnJheSgpCiAgICAgICAgICAgICAgICAgICAgOwogICAgICAgICAgICAgICAgICAgICQuZWFjaChmYXZBbGwsZnVuY3Rpb24oaSxlKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZJRD1lWzBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgLCBwaW5uZWQ9aVpoaWh1LlF1aWNrRmF2by5QaW5uZWRMaXN0W2ZJRF0KICAgICAgICAgICAgICAgICAgICAgICAgOwogICAgICAgICAgICAgICAgICAgICAgICBpZihwaW5uZWQpewogICAgICAgICAgICAgICAgICAgICAgICAgIGZhdi5wdXNoKGUpOwogICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgICBmYXZOb3JtYWwucHVzaChlKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIG51bSAtPSBmYXYubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgIGlmKG51bSA+IDApewogICAgICAgICAgICAgICAgICAgICAgICBmYXY9ZmF2LmNvbmNhdChmYXZOb3JtYWwuc2xpY2UoMCxudW0pKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZmF2Tm9ybWFsLmxlbmd0aD0wOwogICAgICAgICAgICAgICAgICAgIHdoaWxlKGZhdi5sZW5ndGgpewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZT1mYXYuc2hpZnQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICwgZklEPWVbMF0KICAgICAgICAgICAgICAgICAgICAgICAgICAsIGZOYW1lPWVbMV0KICAgICAgICAgICAgICAgICAgICAgICAgOwogICAgICAgICAgICAgICAgICAgICAgICBmYXZOb3JtYWxbZklEXT1mTmFtZTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRmPSQoJzxhLz4nLHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2xhc3MnOidmYXYnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgaHJlZjonamF2YXNjcmlwdDo7JwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIGFpZDphaWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBmaWQ6ZklECiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS50ZXh0KGZOYW1lKS5jbGljayhmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1PScvY29sbGVjdGlvbi8nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICRmPSQodGhpcykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgJGk9JGYuY2hpbGRyZW4oJzpmaXJzdCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRpLmhhc0NsYXNzKCdzcGlubmVyLWdyYXknKSlyZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdSs9JGYuaGFzQ2xhc3MoJ3NlbGVjdGVkJyk/J3JlbW92ZSc6J2FkZCc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGkuYXR0cignY2xhc3MnLCdzcGlubmVyLWdyYXknKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLnBvc3QodSwkLnBhcmFtKHtfeHNyZjokKCdpbnB1dFtuYW1lPV94c3JmXScpLnZhbCgpLGFuc3dlcl9pZDokKHRoaXMpLmF0dHIoJ2FpZCcpLGZhdmxpc3RfaWQ6JCh0aGlzKS5hdHRyKCdmaWQnKX0pLGZ1bmN0aW9uKHJlc3VsdCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhY3Q9dGhpcy51cmwuc3Vic3RyaW5nKHRoaXMudXJsLmxhc3RJbmRleE9mKCcvJykrMSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIGZpZD11dGlscy5nZXRQYXJhbUluUXVlcnkodGhpcy5kYXRhLCdmYXZsaXN0X2lkJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIGFpZD11dGlscy5nZXRQYXJhbUluUXVlcnkodGhpcy5kYXRhLCdhbnN3ZXJfaWQnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgc2VsPXBhZ2VJcy5RdWVzdGlvbj8nLnptLWl0ZW0tYW5zd2VyJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnBhZ2VJcy5Ib21lPycuZmVlZC1pdGVtJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOicnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAkdmk9Jyc9PXNlbD9udWxsOiQoc2VsKydbZGF0YS1haWQ9JythaWQrJ10gLml6aF9mYXYgYVtmaWQ9JytmaWQrJ10nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgaW5jPTA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCcnPT1zZWwpcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihhY3Q9PSdyZW1vdmUnJiZyZXN1bHQubXNnPT0nT0snKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR2aS5yZW1vdmVDbGFzcygnc2VsZWN0ZWQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluYz0tMTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYoYWN0PT0nYWRkJyYmcmVzdWx0Lm1zZy5sZW5ndGgpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHZpLmFkZENsYXNzKCdzZWxlY3RlZCcpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5jPTE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoaW5jIT0wKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR2aS5jaGlsZHJlbignc3BhbicpLnRleHQocGFyc2VJbnQoJHZpLmNoaWxkcmVuKCdzcGFuJykudGV4dCgpKStpbmMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR2aS5jaGlsZHJlbignOmZpcnN0JykuYXR0cignY2xhc3MnLCd6LWljb24tY29sbGVjdCcpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkucHJlcGVuZCgkKCc8aS8+Jyx7J2NsYXNzJzonei1pY29uLWNvbGxlY3QnfSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHNwYW4vPicpLnRleHQoZVszXSkpOwogICAgICAgICAgICAgICAgICAgICAgICAkZi5hcHBlbmRUbygkdi8qLmNoaWxkcmVuKHBpbm5lZD8nLnBpbm5lZCc6Jy5ub3JtYWwnKSovKTsKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICQuZWFjaChmYXZTZWwsZnVuY3Rpb24oaSxlKXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoZmF2Tm9ybWFsW2VdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHYuZmluZCgnYS5mYXZbZmlkPScrZSsnXScpLmFkZENsYXNzKCdzZWxlY3RlZCcpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAkdi5iaW5kKCdtb3VzZWxlYXZlJyxmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyICRhPWlaaGlodS5nZXRJdGVtKCQodGhpcykucmVtb3ZlQ2xhc3MoJ29uJykpOwogICAgICAgICAgICAgICAgJGEuY2hpbGRyZW4oJy5pemhfZmF2JykuaGlkZSgpOwogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICB9OwoKICAgIGlaaGlodS4kYm9keS5iaW5kKCdET01Ob2RlSW5zZXJ0ZWQnLGZ1bmN0aW9uKGV2ZW50KXsKCQl2YXIgJGU9JChldmVudC50YXJnZXQpOwoJCWlmKCRlLmlzKCcubW9kYWwtZGlhbG9nJykpewoJCQkkZS5iaW5kKCdET01Ob2RlSW5zZXJ0ZWQnLGZ1bmN0aW9uKGV2ZW50KXsKCQkJCXZhciAkZT0kKGV2ZW50LnRhcmdldCkKICAgICAgICAgICAgICAgICAgLCAkZmF2TGlzdD0kZS5maW5kKCcuem0tZmF2by1saXN0LWNvbnRlbnQnKQogICAgICAgICAgICAgICAgOwoJCQkJaWYoJGZhdkxpc3QubGVuZ3RoKXsKCQkJCQl2YXIgJGZhdkl0ZW1zPSRmYXZMaXN0LmNoaWxkcmVuKCcuem0tZmF2by1saXN0LWl0ZW0tbGlua1tkYXRhLWxpZF0nKQogICAgICAgICAgICAgICAgICAgICAgLCBmdW5jUGluPWZ1bmN0aW9uKGUpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBpbm5lZD1lLmNoZWNrZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAkZT0kKGUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgJGY9JGUuY2xvc2VzdCgnLnptLWZhdm8tbGlzdC1pdGVtLWxpbmsnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgO2lmKCEkZi5sZW5ndGgpcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxpZD0kZS5hdHRyKCdsaWQnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICRjaGVja3M9JGUuY2xvc2VzdCgnLnptLWZhdm8tbGlzdC1jb250ZW50JykuZmluZCgnLml6aC1QaW40UXVpY2tGYXZvIC50X2pjaGtib3gnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIHRpbWU9NTAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBjc3NTdGFydD17cG9zaXRpb246J3JlbGF0aXZlJywnYmFja2dyb3VuZC1jb2xvcic6JyMwODc0QzQnLCd6LWluZGV4JzonMTAwJ30KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBjc3NFbmQ9e3Bvc2l0aW9uOicnLCdiYWNrZ3JvdW5kLWNvbG9yJzonJywnei1pbmRleCc6Jyd9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgZnVuY1JvbGxVcD1mdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGI9JGUuY2xvc2VzdCgnLnptLWZhdm8tbGlzdC1pdGVtLWxpbmsnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgJGE9JGIucHJldigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoISRhLmxlbmd0aHx8KCRhLmhhc0NsYXNzKCdwaW5uZWQnKSYmcGFyc2VJbnQoJGEuYXR0cignZGF0YS1saWQnKSk8cGFyc2VJbnQoJGIuYXR0cignZGF0YS1saWQnKSkpKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYi5hbmltYXRlKHtib3R0b206JGEub3V0ZXJIZWlnaHQoKX0sewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246dGltZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgc3RlcDpmdW5jdGlvbihub3cpeyRiLmNzcyhjc3NTdGFydCk7fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgY29tcGxldGU6ZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYi5jc3MoJC5leHRlbmQoe2JvdHRvbTowfSxjc3NFbmQpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYi5pbnNlcnRCZWZvcmUoJGEpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmNSb2xsVXAoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIGZ1bmNSb2xsRG93bj1mdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGE9JGUuY2xvc2VzdCgnLnptLWZhdm8tbGlzdC1pdGVtLWxpbmsnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgJGI9JGEubmV4dCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoISRiLmxlbmd0aHx8KCEkYi5oYXNDbGFzcygncGlubmVkJykmJnBhcnNlSW50KCRiLmF0dHIoJ2luZGV4JykpPnBhcnNlSW50KCRhLmF0dHIoJ2luZGV4JykpKSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGEuYW5pbWF0ZSh7dG9wOiRiLm91dGVySGVpZ2h0KCl9LHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOnRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIHN0ZXA6ZnVuY3Rpb24obm93KXskYS5jc3MoY3NzU3RhcnQpO30KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIGNvbXBsZXRlOmZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGEuY3NzKCQuZXh0ZW5kKHt0b3A6MH0sY3NzRW5kKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGEuaW5zZXJ0QWZ0ZXIoJGIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmNSb2xsRG93bigpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihwaW5uZWQpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRmLmFkZENsYXNzKCdwaW5uZWQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jUm9sbFVwKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZi5yZW1vdmVDbGFzcygncGlubmVkJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY1JvbGxEb3duKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpWmhpaHUuUXVpY2tGYXZvLlBpbm5lZExpc3RbbGlkXT1waW5uZWQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlscy5zZXRDZmcoJ1F1aWNrRmF2b1Bpbm5lZCcsaVpoaWh1LlF1aWNrRmF2by5QaW5uZWRMaXN0KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIDsKCQkJCQkkZmF2SXRlbXMuZWFjaChmdW5jdGlvbihpLGUpewoJCQkJCQl2YXIgbGlkPWUuZ2V0QXR0cmlidXRlKCdkYXRhLWxpZCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgLCAkcGluPSQoJzxhLz4nLHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmOidqYXZhc2NyaXB0OnZvaWQoMCk7JwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICdjbGFzcyc6J2l6aC1QaW40UXVpY2tGYXZvJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICdsaWQnOmxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICdkYXRhLXRpcCc6J3MkYiTkv53mjIHlnKjjgIzlv6vpgJ/mlLbol4/jgI3oj5zljZXpobbpg6jmmL7npLonCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5hcHBlbmQoJCgnPHNwYW4vPicpLmFwcGVuZCgn572u6aG2JykuYWRkKCc8aS8+Jyx7J2NsYXNzJzonem0taXRlbS10b3AtYnRuJ30pKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kVG8oJCgnLnpnLWdyYXknLGUpKS5hdHRyKCdpbmRleCcsaSkKICAgICAgICAgICAgICAgICAgICAgICAgOwogICAgICAgICAgICAgICAgICAgICAgICBlLnNldEF0dHJpYnV0ZSgnaW5kZXgnLGkpOwogICAgICAgICAgICAgICAgICAgICAgICAkcGluLmJpbmQoJ2NsaWNrJyxmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrZWQ9IXRoaXMuY2hlY2tlZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmNQaW4odGhpcyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih0aGlzLmNoZWNrZWQpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuY2hpbGRyZW4oJ3NwYW4nKS50ZXh0KCflj5bmtojnva7pobYnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmNoaWxkcmVuKCdpJykuYWRkQ2xhc3MoJ3ptLWl0ZW0tdG9wLWJ0bi1jYW5jZWwnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuY2hpbGRyZW4oJ3NwYW4nKS50ZXh0KCfnva7pobYnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmNoaWxkcmVuKCdpJykucmVtb3ZlQ2xhc3MoJ3ptLWl0ZW0tdG9wLWJ0bi1jYW5jZWwnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGV2ZW50LnByZXZlbnREZWZhdWx0KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKGV2ZW50LnN0b3BQcm9wYWdhdGlvbikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5jYW5jZWxCdWJibGU9dHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgfSlbMF0uY2hlY2tlZD1mYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoaVpoaWh1LlF1aWNrRmF2by5QaW5uZWRMaXN0W2xpZF0pewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBpbi5jbGljaygpOwogICAgICAgICAgICAgICAgICAgICAgICB9CgkJCQkJfSk7CgkJCQl9CgkJCX0pOwoJCX0KCX0pOwoKICAgIHJldHVybiB0aGlzOwp9CgovKioKICogQGNsYXNzIFNlYXJjaGluZ0xpc3QKICovCmZ1bmN0aW9uIFNlYXJjaGluZ0xpc3QoaVpoaWh1KSB7CiAgICBpZiAoIHR5cGVvZiBpWmhpaHUgPT09ICd1bmRlZmluZWQnIHx8ICFpWmhpaHUpIHsKICAgICAgICByZXR1cm4gbnVsbAogICAgfQogICAgaVpoaWh1LlNlYXJjaGluZ0xpc3QgPSB0aGlzCiAgICAKICAgIHRoaXMuJHRvcFNlYXJjaCA9ICQoJyN6aC10b3Atc2VhcmNoLWZvcm0nKQogICAgdGhpcy4kdG9wU2VhcmNoSW5wdXQgPSAkKCcjemgtdG9wLXNlYXJjaC1mb3JtID4gaW5wdXQjcScpCiAgICBpZiAoIXRoaXMuJHRvcFNlYXJjaC5sZW5ndGgpIHJldHVybgoKICAgIHRoaXMuU2VhcmNoRW5naW5lT3V0c2lkZUxpc3QgPSB7CiAgICAgICAgJ2dvb2dsZSc6IHtpY29uOidodHRwczovL3d3dy5nb29nbGUuY29tL2Zhdmljb24uaWNvJyx1cmw6J2h0dHBzOi8vd3d3Lmdvb2dsZS5jb20vP3E9c2l0ZTp6aGlodS5jb20lMjB7MH0jcT1zaXRlOnpoaWh1LmNvbSt7MH0nfQogICAgICAsICdiYWlkdSc6IHtpY29uOidodHRwOi8vd3d3LmJhaWR1LmNvbS9mYXZpY29uLmljbycsdXJsOidodHRwOi8vd3d3LmJhaWR1LmNvbS9zP3dkPXNpdGU6emhpaHUuY29tJTIwezB9J30KICAgIH0KCiAgICB1dGlscy5vYnNlcnZlRE9NTm9kZUFkZGVkKHRoaXMuJHRvcFNlYXJjaFswXSxmdW5jdGlvbihldmVudCl7CiAgICAgICAgdmFyIF9hID0gZXZlbnQuYWRkZWROb2RlcyB8fCBbXQogICAgICAgIGlmICghX2EubGVuZ3RoKSByZXR1cm4KICAgICAgICB1dGlscy5vYnNlcnZlRE9NTm9kZUFkZGVkKF9hWzBdLGZ1bmN0aW9uKGV2ZW50KXtjb25zb2xlLmxvZyhpWmhpaHUuY29uZmlnWydTZWFyY2hFbmdpbmVPdXRzaWRlJ10pCiAgICAgICAgICAgIHZhciBfYSA9IGV2ZW50LmFkZGVkTm9kZXMgfHwgW251bGxdCiAgICAgICAgICAgICAgLCAkaXRlbSA9ICQoX2FbMF0pCiAgICAgICAgICAgICAgLCBzZW9LZXkgPSBpWmhpaHUuY29uZmlnWydTZWFyY2hFbmdpbmVPdXRzaWRlJ10gfHwgJ2JhaWR1JwogICAgICAgICAgICAgICwgc2VvID0gaVpoaWh1LlNlYXJjaGluZ0xpc3QuU2VhcmNoRW5naW5lT3V0c2lkZUxpc3Rbc2VvS2V5XSB8fCB7aWNvbjonJyx1cmw6Jyd9CiAgICAgICAgICAgICAgLCBzdHJTZWFyY2hVcmwgPSBzZW8udXJsLnJlcGxhY2UoL1x7MFx9L2csIGZ1bmN0aW9uKCl7cmV0dXJuIGlaaGlodS5TZWFyY2hpbmdMaXN0LiR0b3BTZWFyY2hJbnB1dC52YWwoKX0pCiAgICAgICAgICAgIGNvbnNvbGUubG9nKHNlb0tleSkKICAgICAgICAgICAgaWYgKCRpdGVtLmlzKCcuYWMtcm93W3JvbGU9b3B0aW9uXScpKXsKICAgICAgICAgICAgICAgIHZhciAkYSA9ICRpdGVtLmNoaWxkcmVuKCdhJykKICAgICAgICAgICAgICAgICAgLCBocmVmID0gJGEuYXR0cignaHJlZicpCiAgICAgICAgICAgICAgICAgICwgY3NzID0gJ2Zsb2F0OnJpZ2h0O2JhY2tncm91bmQtcG9zaXRpb246LTI4NHB4IC0ycHg7JwogICAgICAgICAgICAgICAgICAsICRhTmV3ID0gJCgnPGE+Jywge2NsYXNzOid6Zy1pY29uJyxzdHlsZTpjc3MsaHJlZjpocmVmLHRhcmdldDonX2JsYW5rJyxjbGljazpmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpCiAgICAgICAgICAgICAgICAgICAgfX0pCiAgICAgICAgICAgICAgICBpZiAoaHJlZi5pbmRleE9mKCcvc2VhcmNoPycpID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgJGFOZXcuY3NzKHttYXJnaW5Ub3A6JzAuNWVtJ30pCiAgICAgICAgICAgICAgICAgICAgJGl0ZW0uYXBwZW5kKCQoJzxhPicsIHtjbGFzczonaWNvbicsc3R5bGU6J21hcmdpbi10b3A6MC41ZW07ZmxvYXQ6bGVmdCcsaHJlZjpzdHJTZWFyY2hVcmwsdGFyZ2V0OidfYmxhbmsnLGNsaWNrOmZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCkKICAgICAgICAgICAgICAgICAgICB9fSkuYXBwZW5kKCQoJzxpbWc+Jywge2JvcmRlcjowLHNyYzpzZW8uaWNvbix3aWR0aDoxNixoZWlnaHQ6MTZ9KSkpCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGhyZWYuaW5kZXhPZignL3F1ZXN0aW9uLycpIDwgMCkgewogICAgICAgICAgICAgICAgICAgICRhTmV3LmNzcyh7bWFyZ2luVG9wOictMS41ZW0nfSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRpdGVtLmFwcGVuZCgkYU5ldykKICAgICAgICAgICAgfQogICAgICAgIH0pCiAgICB9KQoKICAgIHJldHVybiB0aGlzCn0KCi8qKgogKiBAY2xhc3MgVG9wTmF2CiAqLwpmdW5jdGlvbiBUb3BOYXYoaVpoaWh1KSB7CiAgICBpZiAoIHR5cGVvZiBpWmhpaHUgPT09ICd1bmRlZmluZWQnIHx8ICFpWmhpaHUgfHwgIWlaaGlodS5jb25maWdbJ1RvcE5hdkF1dG9Gb2xkJ10pIHsKICAgICAgICByZXR1cm4gbnVsbAogICAgfQogICAgaVpoaWh1LlRvcE5hdiA9IHRoaXMKICAgIAogICAgdGhpcy4kdG9wTmF2ID0gJCgnYm9keSA+IC56dS10b3A6Zmlyc3QnKQogICAgICAgIC5vbignbW91c2VvdmVyJywgZnVuY3Rpb24oZXZlbnQpewogICAgICAgICAgICB0aGlzLnN0eWxlLnRvcCA9ICcwJwogICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnaXpoLW1vdXNlb3ZlcicsICcxJykKICAgICAgICAgICAgJCgnI2l6aENTU19Ob3RpTnVtJykucmVtb3ZlKCkKICAgICAgICB9KQogICAgICAgIC5vbignbW91c2VvdXQnLCBmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdpemgtbW91c2VvdmVyJywgJzAnKQogICAgICAgICAgICBpWmhpaHUuVG9wTmF2LmZ1bmNGb2xkKCkKICAgICAgICB9KQogICAgaWYgKCF0aGlzLiR0b3BOYXYubGVuZ3RoKSByZXR1cm4KCiAgICB0aGlzLnRvcE5hdkhlaWdodCA9IHRoaXMuJHRvcE5hdi5oZWlnaHQoKSAtIDUKCiAgICB0aGlzLmZ1bmNGb2xkID0gZnVuY3Rpb24oZXZlbnQpewogICAgICAgIHZhciBzY3JvbGxUb3AgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIHx8IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wIHx8IDAKICAgICAgICAgICwgX3NlbGYgPSBpWmhpaHUuVG9wTmF2CiAgICAgICAgICAsIGlzTW91c2VPdmVyID0gJzEnID09PSAoX3NlbGYuJHRvcE5hdi5hdHRyKCdpemgtbW91c2VvdmVyJykgfHwgJycpCiAgICAgICAgICAsICRoZWFkID0gJCgnaGVhZDpmaXJzdCcpCiAgICAgICAgICAsICRjc3NOb3RpTnVtID0gJCgnI2l6aENTU19Ob3RpTnVtJykKICAgICAgICAgICwgJGZsb2F0aW5nQmFyID0gJCgnYm9keSA+IC5nb29nLXNjcm9sbGZsb2F0ZXItZmxvYXRpbmcnKQogICAgICAgIGlmIChzY3JvbGxUb3AgPT09IDApIHsKICAgICAgICAgICAgX3NlbGYuJHRvcE5hdi5jc3Moe3RvcDowfSkKICAgICAgICB9IGVsc2UgaWYgKCFpc01vdXNlT3ZlcikgewogICAgICAgICAgICBpZiAoc2Nyb2xsVG9wIDwgX3NlbGYudG9wTmF2SGVpZ2h0KSB7CiAgICAgICAgICAgICAgICBfc2VsZi4kdG9wTmF2LmNzcyh7dG9wOi1zY3JvbGxUb3B9KQogICAgICAgICAgICAgICAgJGZsb2F0aW5nQmFyLmNzcyh7bWFyZ2luVG9wOi1zY3JvbGxUb3B9KQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgX3NlbGYuJHRvcE5hdi5jc3Moe3RvcDotX3NlbGYudG9wTmF2SGVpZ2h0fSkKICAgICAgICAgICAgICAgICRmbG9hdGluZ0Jhci5jc3Moe21hcmdpblRvcDotX3NlbGYudG9wTmF2SGVpZ2h0fSkKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoc2Nyb2xsVG9wID4gMjApIHsKICAgICAgICAgICAgICAgIGlmICghJGNzc05vdGlOdW0ubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgJCgnPHN0eWxlPicsIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICdpemhDU1NfTm90aU51bScKICAgICAgICAgICAgICAgICAgICAgICwgdHlwZTogJ3RleHQvY3NzJwogICAgICAgICAgICAgICAgICAgIH0pLmFwcGVuZFRvKCdoZWFkOmZpcnN0JykudGV4dCgnI3poLXRvcC1uYXYtY291bnQsI3poLXRvcC1uYXYtbmV3LXBte3Bvc2l0aW9uOmFic29sdXRlO3RvcDo0MHB4O2JvcmRlci1yYWRpdXM6MCAhaW1wb3J0YW50fS50b3AtbmF2LXByb2ZpbGUgLnp1LXRvcC1uYXYtdXNlcmluZm97b3ZlcmZsb3c6dmlzaWJsZSAhaW1wb3J0YW50fScpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAkY3NzTm90aU51bS5yZW1vdmUoKQogICAgfQoKICAgIGlaaGlodS4kd2luLnNjcm9sbCh0aGlzLmZ1bmNGb2xkKQoKICAgIHRoaXMub25Ob2RlQWRkZWQgPSBmdW5jdGlvbihldmVudCl7CiAgICAgICAgaVpoaWh1LlRvcE5hdi5mdW5jRm9sZCgpCiAgICAgICAgJC5lYWNoKGV2ZW50LnJlbW92ZWROb2RlcywgZnVuY3Rpb24oaSwgZSl7CiAgICAgICAgICAgIHZhciAkZmxvYXRpbmdCYXIgPSAkKGUpLmZpbHRlcignLmdvb2ctc2Nyb2xsZmxvYXRlcicpLmNzcyh7bWFyZ2luVG9wOicnfSkKICAgICAgICB9KQogICAgfQoKICAgIHJldHVybiB0aGlzCn0KCmFsbExpbmtzID0gZnVuY3Rpb24oX25hbWUsIF9saXN0U2VsLCBfbGlzdE5hbWUpIHsKICAgIHRoaXMubmFtZSA9IF9uYW1lCiAgICB0aGlzLmxpc3RTZWwgPSBfbGlzdFNlbAogICAgdGhpcy5saXN0TmFtZSA9IF9saXN0TmFtZQogICAgdGhpcy5kbGdJRCA9ICdpemgtZGxnLScgKyBfbmFtZQogICAgdGhpcy4kZGxnID0gbnVsbAogICAgdmFyIF9pbml0aWFsVGl0bGUgPSBfbGlzdE5hbWUgKyAn5Zyw5Z2A5riF5Y2VJwogICAgICAsIF9yZXN1bHQgPSBuZXcgQXJyYXkoKQogICAgICAsIF9sb2FkVGltZXMgPSAwCgogICAgLy/liIbmnpDlhoXlrrkKICAgIHZhciBwcm9jZXNzTm9kZSA9IGZ1bmN0aW9uKGNvbnRlbnQsJGRsZyl7CiAgICAgIHZhciAkcUN1cnJlbnQgPSBudWxsOwogICAgICAkKCcuem0taXRlbS1hbnN3ZXInLCBjb250ZW50KS5lYWNoKGZ1bmN0aW9uKGluZGV4LCBpdGVtKXsKICAgICAgICB2YXIgJGEgPSAkKGl0ZW0pCiAgICAgICAgICAsICRxID0gJGEuY2xvc2VzdCgiLnptLWl0ZW0iKS5jaGlsZHJlbigiaDIiKS5jaGlsZHJlbigiYSIpCiAgICAgICAgOwogICAgICAgIGlmKCRxLmxlbmd0aCl7CiAgICAgICAgICAkcUN1cnJlbnQ9JHE7CiAgICAgICAgfWVsc2UgaWYoJHFDdXJyZW50KXsKICAgICAgICAgICRxPSRxQ3VycmVudDsKICAgICAgICB9ZWxzZXsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgdmFyIGhyZWZRdWVzdGlvbiA9IHVybC5kYXRhLmF0dHJbImJhc2UiXSArICRxLmF0dHIoImhyZWYiKS5yZXBsYWNlKHVybC5kYXRhLmF0dHJbImJhc2UiXSwnJyk7CiAgICAgICAgdmFyIG9iaiA9IHsKICAgICAgICAgICAgdGl0bGU6ICRxLnRleHQoKSwKICAgICAgICAgICAgLy9xdWVzdGlvblVybDogaHJlZlF1ZXN0aW9uLAogICAgICAgICAgICBhbnN3ZXJVcmw6IGhyZWZRdWVzdGlvbiArICgkYS5wYXJlbnQoKS5pcygiLnptLWl0ZW0tZmF2IikgPyAiL2Fuc3dlci8iICsgJGEuYXR0cigiZGF0YS1hdG9rZW4iKSA6ICIiKSwKICAgICAgICAgICAgYW5zd2VyQXV0aG9yOiAkYS5maW5kKCcuem0taXRlbS1hbnN3ZXItYXV0aG9yLXdyYXAgYVtocmVmXj0iL3Blb3BsZSJdJykudGV4dCgpLnRyaW0oKSwKICAgICAgICAgICAgc3VtbWFyeTogJGEuZmluZCgiLnptLWl0ZW0tYW5zd2VyLXN1bW1hcnkiKS5jaGlsZHJlbigpLnJlbW92ZSgpLmVuZCgpLnRleHQoKSwKICAgICAgICAgICAgY29udGVudDogJGEuZmluZCgiLnptLWVkaXRhYmxlLWNvbnRlbnQiKS5odG1sKCkKICAgICAgICB9OwogICAgICAgIF9yZXN1bHQucHVzaChvYmopOwogICAgICAgIHZhciBzdHJUaXRsZSA9IHV0aWxzLmZvcm1hdFN0cignKiDjgIp7dGl0bGV944CLJiMxMzsqIHthbnN3ZXJBdXRob3J977yaJiMxMzsqIHtzdW1tYXJ5fScsIG9iaikKICAgICAgICAgICwgc3RyVVJMID0gdXRpbHMuZm9ybWF0U3RyKCd7YW5zd2VyVXJsfScsIG9iaikKICAgICAgICAgICwgJGxpID0gJCgnPGxpPicpLmFwcGVuZCgkKCc8YT4nLCB7IGhyZWY6IHN0clVSTCwgdGl0bGU6IHN0clRpdGxlIH0pLnRleHQoc3RyVVJMKSkuY3NzKHsgJ2xpc3Qtc3R5bGUtdHlwZSc6ICdub25lJyB9KQogICAgICAgICQoJy5pemhpaHUtY29sbGVjdGlvbi1saW5rcycsJGRsZykuYXBwZW5kKCRsaSk7CiAgICAgICAgdmFyIGNvdW50PV9yZXN1bHQubGVuZ3RoOwogICAgICAgICQoJy5pemhpaHUtY29sbGVjdGlvbi1pbmZvJywkZGxnKS50ZXh0KCfvvIjliqrlipvliqDovb3kuK0uLi7lt7LlvpfliLDorrDlvZUgJyArIGNvdW50ICsgJyDmnaHvvIknKTsKICAgICAgfSk7CiAgICB9OwogICAgICAgIAogICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbihwYWdlV2FudCxwYWdlTm93LCRkbGcpewogICAgICBpZiAoIXBhZ2VOb3cpcGFnZU5vdz0xOwogICAgICBpZigkZGxnLmlzKCc6aGlkZGVuJykpewogICAgICAgIHZhciBjb3VudD1fcmVzdWx0Lmxlbmd0aDsKICAgICAgICAkKCcuaXpoaWh1LWNvbGxlY3Rpb24taW5mbycsJGRsZykudGV4dCgn77yI5Yqg6L296KKr57uI5q2iLi4u5bey5b6X5Yiw6K6w5b2VICcgKyBjb3VudCArICcg5p2h77yJJyk7CiAgICAgICAgJCgnI3poLWdsb2JhbC1zcGlubmVyJykuaGlkZSgpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICAKICAgICAgaWYocGFnZVdhbnQ9PTEpewogICAgICAgICQoJy5pemhpaHUtY29sbGVjdGlvbi1saW5rcycsJGRsZykuZW1wdHkoKTsKICAgICAgICAkKCcjemgtZ2xvYmFsLXNwaW5uZXInKS5zaG93KCk7CiAgICAgICAgX3Jlc3VsdC5sZW5ndGg9MDsKICAgICAgICBfbG9hZFRpbWVzKys7CiAgICAgICAgJCgnLml6aGlodS1jb2xsZWN0aW9uLWluZm8nLCRkbGcpLnRleHQoJycpOwogICAgICB9CiAgICAgIHZhciAkcGFnZXI9JChfbGlzdFNlbCkucGFyZW50KCkuZmluZCgnLnptLWludml0ZS1wYWdlcicpCiAgICAgICAgLCAkbGFzdFBhZ2U9JHBhZ2VyLmNoaWxkcmVuKCdzcGFuJykubGFzdCgpLnByZXYoKQogICAgICAgICwgdG90YWxDb3VudD0kcGFnZXIubGVuZ3RoPT0wPzE6TnVtYmVyKCRsYXN0UGFnZS50ZXh0KCkpCiAgICAgIDsKICAgICAgaWYocGFnZVdhbnQ+dG90YWxDb3VudCl7CiAgICAgICAgJCgnLml6aGlodS1jb2xsZWN0aW9uLWluZm8nLCRkbGcpLnRleHQoJ++8iOWKoOi9veWujOaIkO+8jOWFseW+l+WIsOiusOW9lSAnICsgX3Jlc3VsdC5sZW5ndGggKyAnIOadoe+8iScpOwogICAgICAgICQoJyN6aC1nbG9iYWwtc3Bpbm5lcicpLmhpZGUoKTsKICAgICAgICAkKCcuc2VsQWxsJywkZGxnKS5jbGljaygpOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdmFyIHBhZ2VOZXh0PXBhZ2VXYW50KzE7CiAgICAgIGlmKHBhZ2VXYW50PT1wYWdlTm93KXsKICAgICAgICBwcm9jZXNzTm9kZSgkKF9saXN0U2VsKS5odG1sKCksJGRsZyk7CiAgICAgICAgaGFuZGxlcihwYWdlTmV4dCxwYWdlTm93LCRkbGcpCiAgICAgIH1lbHNlewogICAgICAgIHZhciBfdXJsPXVybC5kYXRhLmF0dHJbJ2Jhc2UnXSt1cmwuZGF0YS5hdHRyWydwYXRoJ10rJz9wYWdlPScrcGFnZVdhbnQ7CiAgICAgICAgJC5hamF4KF91cmwse3R5cGU6J2dldCcsY29udGV4dDp7bG9hZFRpbWVzOl9sb2FkVGltZXN9fSkuZG9uZShmdW5jdGlvbihyZXN1bHQpewogICAgICAgICAgaWYodGhpcy5sb2FkVGltZXMhPV9sb2FkVGltZXMpcmV0dXJuOwogICAgICAgICAgcHJvY2Vzc05vZGUocmVzdWx0LCRkbGcpOwogICAgICAgICAgaGFuZGxlcihwYWdlTmV4dCxwYWdlTm93LCRkbGcpCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH07CgogICAgLy/liJ3lp4vljJblvLnlh7rmoYYKICAgIHRoaXMuaW5pdERpYWxvZyA9IGZ1bmN0aW9uKCl7CiAgICAgICAgdGhpcy4kZGxnPSQoJyMnK3RoaXMuZGxnSUQpOwogICAgICAgIHZhciByZXRWYWw9MDx0aGlzLiRkbGcubGVuZ3RoOwogICAgICAgIGlmKCFyZXRWYWwpewogICAgICAgICAgICB0aGlzLiRkbGcgPSAkKCc8ZGl2PicsIHsgaWQ6IHRoaXMuZGxnSUQsICdjbGFzcyc6ICdtb2RhbC1kaWFsb2cgYWxsTGlua3MnLCB0YWJpbmRleDogJzAnLCBzdHlsZTogJ2Rpc3BsYXk6IG5vbmU7d2lkdGg6NTAwcHgnLCBuYW1lOiBfbmFtZSwgJ2xpc3RTZWwnOiBfbGlzdFNlbCB9KQogICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8ZGl2PicsIHsgJ2NsYXNzJzogJ21vZGFsLWRpYWxvZy10aXRsZSBtb2RhbC1kaWFsb2ctdGl0bGUtZHJhZ2dhYmxlJyB9KQogICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHNwYW4+JywgeyAnY2xhc3MnOiAnbW9kYWwtZGlhbG9nLXRpdGxlLXRleHQnIH0pLnRleHQoX2luaXRpYWxUaXRsZSkpCiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8c3Bhbj4nLCB7ICdjbGFzcyc6ICdtb2RhbC1kaWFsb2ctdGl0bGUtdGV4dCBpemhpaHUtY29sbGVjdGlvbi1pbmZvJyB9KSkKICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxzcGFuPicsIHsKICAgICAgICAgICAgICAgICAgICAgICAgJ2NsYXNzJzogJ21vZGFsLWRpYWxvZy10aXRsZS1jbG9zZScKICAgICAgICAgICAgICAgICAgICAgICwgY2xpY2s6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3poLWdsb2JhbC1zcGlubmVyJykuaGlkZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcubW9kYWwtZGlhbG9nLWJnJykuaGlkZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmNsb3Nlc3QoJy5tb2RhbC1kaWFsb2cnKS5oaWRlKCkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pKQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8ZGl2PicsIHsgJ2NsYXNzJzogJ21vZGFsLWRpYWxvZy1jb250ZW50JyB9KQogICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGRpdj4nKQogICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxkaXY+JywgeyAnY2xhc3MnOiAnemctc2VjdGlvbicgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGRpdj4nLCB7ICdjbGFzcyc6ICdpemhpaHUtY29sbGVjdGlvbi1saW5rcyB6Zy1mb3JtLXRleHQtaW5wdXQnLCB0YWJJbmRleDogJy0xJywgc3R5bGU6ICdoZWlnaHQ6MzAwcHg7b3ZlcmZsb3cteTpzY3JvbGw7b3V0bGluZTpub25lOycgfSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxmb3JtPicsIHsgYWN0aW9uOiAnaHR0cDovL2lsb3ZlemhpaHUuZHVhcHAuY29tL3NhdmVNZS5weScsIG1ldGhvZDogJ3Bvc3QnLCB0YXJnZXQ6ICdfYmxhbmsnLCBzdHlsZTogJ2Rpc3BsYXk6bm9uZScgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZXh0YXJlYT4nLCB7IHN0eWxlOiAid2lkdGg6IDEwMCU7IiwgbmFtZTogImxpbmtzIiwgJ2NsYXNzJzogIml6aGlodS1jb2xsZWN0aW9uLWxpbmtzLXBvc3QiIH0pKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGlucHV0PicsIHsgbmFtZTogJ3RpdGxlJyB9KSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxkaXY+JywgeyAnY2xhc3MnOiAnem0tY29tbWFuZCcgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGRpdj4nLCB7ICdjbGFzcyc6ICd6Zy1sZWZ0JyB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGE+JywgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2xhc3MnOiAnemctYnRuLWJsdWUgcmVsb2FkJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBocmVmOiAnamF2YXNjcmlwdDp2b2lkKDApOycKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgY2xpY2s6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRkID0gJCh0aGlzKS5jbG9zZXN0KCcubW9kYWwtZGlhbG9nJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXIoMSwgTnVtYmVyKHVybC5kYXRhLnBhcmFtLnF1ZXJ5WydwYWdlJ10pLCAkZCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLnRleHQoJ+mHjeaWsOiOt+WPlicpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8YT4nLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NsYXNzJzogJ3pnLWJ0bi1ibHVlIHNhdmUnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgaHJlZjogJ2phdmFzY3JpcHQ6dm9pZCgwKTsnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgY2xpY2s6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGRsZyA9ICQodGhpcykuY2xvc2VzdCgnLm1vZGFsLWRpYWxvZy1jb250ZW50JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICRsaW5rcyA9ICRkbGcuZmluZCgnLml6aGlodS1jb2xsZWN0aW9uLWxpbmtzJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICRsaW5rc1Bvc3QgPSAkZGxnLmZpbmQoJy5pemhpaHUtY29sbGVjdGlvbi1saW5rcy1wb3N0JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICRsaW5rc1RpdGxlID0gJGxpbmtzUG9zdC5uZXh0KCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICRmb3JtID0gJGxpbmtzUG9zdC5wYXJlbnQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgbGlua3MgPSAnJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRsaW5rcy5maW5kKCdsaSBhJykuZWFjaChmdW5jdGlvbihpLCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rcyArPSBlLmdldEF0dHJpYnV0ZSgnaHJlZicpICsgJ1xuJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbGlua3NQb3N0LnZhbChsaW5rcykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGxpbmtzVGl0bGUudmFsKCQoJyN6aC1mYXYtaGVhZC10aXRsZSwuem0tcHJvZmlsZS1oZWFkZXItbWFpbiAudGl0bGUtc2VjdGlvbiBhLm5hbWUnKS50ZXh0KCkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRmb3JtLnN1Ym1pdCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkudGV4dCgn5L+d5a2YJykpCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICApLmFwcGVuZFRvKGRvY3VtZW50LmJvZHkpCiAgICAgICAgICAgICAgICAuZHJhZ2dhYmxlKHsgaGFuZGxlOiAnLm1vZGFsLWRpYWxvZy10aXRsZS1kcmFnZ2FibGUnIH0pCgogICAgICAgICAgICBpZih0aGlzLiRkbGcubGVuZ3RoKQogICAgICAgICAgICAgICAgcmV0VmFsID0gdHJ1ZQoKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJldFZhbAogICAgfQoKICAgIHRoaXMuc3RhcnQgPSBmdW5jdGlvbigkZCkgewogICAgICAgIGlmICgkKCcjemgtZ2xvYmFsLXNwaW5uZXI6dmlzaWJsZScpLmxlbmd0aCkgcmV0dXJuCiAgICAgICAgaWYgKCEkZCkgJGQgPSB0aGlzLiRkbGcKICAgICAgICBpZiAoISRkKSByZXR1cm4KICAgICAgICBpZiAoISQoJy5pemhpaHUtY29sbGVjdGlvbi1saW5rcycsICRkKS5jaGlsZHJlbigpLmxlbmd0aCkgewogICAgICAgICAgICBoYW5kbGVyKDEsIE51bWJlcih1cmwuZGF0YS5wYXJhbS5xdWVyeVsncGFnZSddKSwgJGQpCiAgICAgICAgfQogICAgfQoKfQoKLyoqCiAqIOWbnuetlOmhtQogKi8KCiAgaWYocGFnZUlzLkFuc3dlcil7Cgp2YXIgJGxibFF1ZXN0aW9uTWV0YT0kKCcjemgtcXVlc3Rpb24tbWV0YS13cmFwJykvL3F1ZXN0aW9uX21ldGEKOwoKICAgIHZhciAkcXVlc3Rpb25XcmFwPSQoJyN6aC1xdWVzdGlvbi1tZXRhLXdyYXAnKTsKICAgICRxdWVzdGlvbldyYXAuY2hpbGRyZW4oJy5wYW5lbC1jb250YWluZXInKS5iaW5kKCdET01Ob2RlSW5zZXJ0ZWQnLGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICB3aW5kb3cuaVpoaWh1LkNvbW1lbnQucHJvY2Vzc0NvbW1lbnQoJChldmVudC50YXJnZXQpKTsKICAgIH0pOwogICAgaWYod2luZG93LmlaaGlodS5Db21tZW50LlJpZ2h0Q29tbWVudCl7CiAgICAgICAgLy8kcXVlc3Rpb25XcmFwLmNoaWxkcmVuKCcubWV0YS1pdGVtW25hbWU9YWRkY29tbWVudF0nKS5wcmVwZW5kVG8oJHF1ZXN0aW9uV3JhcCk7CiAgICAgICAgd2luZG93LmlaaGlodS5Db21tZW50LnByb2Nlc3NDb21tZW50QnV0dG9uKCRxdWVzdGlvbldyYXApOwogICAgICAgIGlmKCEkKCcjaXpoX1F1ZXN0aW9uU2hhZG93JykubGVuZ3RoKXsKICAgICAgICAgICAgJCgnPGRpdj4nLHsnY2xhc3MnOidpemhfYm94U2hhZG93JyxpZDonaXpoX1F1ZXN0aW9uU2hhZG93J30pLmNzcyh7CiAgICAgICAgICAgICAgICAnei1pbmRleCc6ICctMScKICAgICAgICAgICAgICAsICdwb3NpdGlvbic6ICdyZWxhdGl2ZScKICAgICAgICAgICAgICAsICd0b3AnOiAtMjUKICAgICAgICAgICAgICAsICdtYXJnaW4tbGVmdCc6IC0zMgogICAgICAgICAgICB9KS5wcmVwZW5kVG8oJ2JvZHk+Lnp1LW1haW46Zmlyc3QnKS5oaWRlKCk7CiAgICAgICAgfSAgIAogICAgfQoKICAgIC8vcHJvY2VzcyBlYWNoIGFuc3dlcgogICAgdmFyICRsaXN0QW5zd2Vycz0kKCcuem0taXRlbS1hbnN3ZXIsLmZlZWQtaXRlbScsJyN6aC1xdWVzdGlvbi1hbnN3ZXItd3JhcCcpOwogICAgaWYoJGxpc3RBbnN3ZXJzJiYkbGlzdEFuc3dlcnMubGVuZ3RoKXsKICAgICAgICAkbGlzdEFuc3dlcnMuZWFjaChmdW5jdGlvbihpLGUpewogICAgICAgICAgICB3aW5kb3cuaVpoaWh1LkFuc3dlci5wcm9jZXNzQW5zd2VyKCQoZSksbnVsbAogICAgICAgICAgICAgICwgaXpoQXV0aG9yUmVhcgogICAgICAgICAgICAgICwgZmFsc2UpOwogICAgICAgIH0pOwogICAgfQoKICAgICQoJyN6aC1xdWVzdGlvbi1hbnN3ZXItd3JhcCcpLmJpbmQoJ0RPTU5vZGVJbnNlcnRlZCcsZnVuY3Rpb24oZXZlbnQpewogICAgICAgIHZhciAkbmE9JChldmVudC50YXJnZXQpLmZpbHRlcignLnptLWl0ZW0tYW5zd2VyJyk7CiAgICAgICAgaWYoJG5hLmxlbmd0aCl7CiAgICAgICAgICAgIHdpbmRvdy5pWmhpaHUuQW5zd2VyLnByb2Nlc3NBbnN3ZXIoJG5hLG51bGwKICAgICAgICAgICAgICAgICwgaXpoQXV0aG9yUmVhcgogICAgICAgICAgICAgICAgLCBmYWxzZSk7CiAgICAgICAgfQogICAgfSk7CgogICAgdmFyICRjbT0kKCcuem0tY29tbWVudC1ib3gnLCRxdWVzdGlvbldyYXApOwogICAgaWYoJGNtLmxlbmd0aCAmJiAkY20uaXMoJzp2aXNpYmxlJykpewogICAgCXZhciBmb2N1c05hbWUgPSBpWmhpaHUuQ29tbWVudC5zY3JvbGxGb2N1c0NvbW1lbnRPblBhZ2VMb2FkKCRjbSk7CgogICAgCWlaaGlodS5Db21tZW50Lm1ldGFTY3JvbGxUb1ZpZXdCb3R0b20oJGNtLmNsb3Nlc3QoJy56bS1pdGVtLW1ldGEnKSxmdW5jdGlvbigpewogICAgICAgICAgICBpWmhpaHUuQ29tbWVudC5wcm9jZXNzQ29tbWVudCgkY20sIGZvY3VzTmFtZSk7CiAgICAgICAgfSk7CiAgICB9CiAgfQoKLyoqCiAqIOaUtuiXj+mhtQogKi8KICBpZihwYWdlSXMuQ29sbGVjdGlvbil7CiAgICAvL+a3u+WKoOaMiemSrgogICAgJCgnI3poLWxpc3QtbWV0YS13cmFwJykKICAgICAgLmFwcGVuZCgkKCc8c3Bhbj4nLCB7ICdjbGFzcyc6ICd6Zy1idWxsJyB9KS50ZXh0KCfigKInKSkKICAgICAgLmFwcGVuZCgkKCc8YT4nLCB7IGhyZWY6ICdqYXZhc2NyaXB0OjsnLCBpZDogJ2dldEFsbExpbmtzJyB9KS50ZXh0KCflnLDlnYDmuIXljZUnKSk7CgogICAgdmFyIGJ0biA9ICQoJyNnZXRBbGxMaW5rcycpOwogICAgdmFyIHJlc3VsdCA9IFtdOwogICAgICAgIAogICAgLy/ms6jlhozngrnlh7vkuovku7YKICAgIGJ0bi5jbGljayhmdW5jdGlvbigpewogICAgICB2YXIgYWxsTGlua3NDb2xsZWN0aW9uPW5ldyBhbGxMaW5rcygnQ29sbGVjdGlvbnMnLCcjemgtbGlzdC1hbnN3ZXItd3JhcCcsJ+aUtuiXj+WkueWGheWuuScpOwoJICBpZighYWxsTGlua3NDb2xsZWN0aW9uLmluaXREaWFsb2coKSlyZXR1cm47CiAgICAgICQoJy5tb2RhbC1kaWFsb2ctYmcnKS5zaG93KCk7CiAgICAgIHZhciB5ID0gKCR3aW4uaGVpZ2h0KCkgLSBhbGxMaW5rc0NvbGxlY3Rpb24uJGRsZy53aWR0aCgpKSAvIDIKICAgICAgICAsIHggPSAoJHdpbi53aWR0aCgpIC0gYWxsTGlua3NDb2xsZWN0aW9uLiRkbGcud2lkdGgoKSkgLyAyCiAgICAgIDsKICAgICAgYWxsTGlua3NDb2xsZWN0aW9uLiRkbGcuY3NzKHsndG9wJzogeSwgJ2xlZnQnOiB4fSkuZmFkZUluKCdzbG93Jyk7CiAgICAgIGFsbExpbmtzQ29sbGVjdGlvbi5zdGFydCgpOwogICAgfSk7CiAgfQogIGlmKHBhZ2VJcy5BbnN3ZXJzKXsKICAgIC8v5re75Yqg5oyJ6ZKuCiAgICAkKCcuem0tcHJvZmlsZS1zZWN0aW9uLW5hbWUnKQogICAgICAuYXBwZW5kKCQoJzxzcGFuPicsIHsgJ2NsYXNzJzogJ3pnLWJ1bGwnIH0pLnRleHQoJ+KAoicpKQogICAgICAuYXBwZW5kKCQoJzxhPicsIHsgaHJlZjogJ2phdmFzY3JpcHQ6OycsIGlkOiAnZ2V0QWxsTGlua3MnIH0pLnRleHQoJ+WcsOWdgOa4heWNlScpKTsKCiAgICB2YXIgYnRuID0gJCgnI2dldEFsbExpbmtzJyk7CiAgICB2YXIgcmVzdWx0ID0gW107CiAgICAgICAgCiAgICAvL+azqOWGjOeCueWHu+S6i+S7tgogICAgYnRuLmNsaWNrKGZ1bmN0aW9uKCl7CiAgICAgIHZhciBhbGxMaW5rc0Fuc3dlcnM9bmV3IGFsbExpbmtzKCdBbnN3ZXJzJywnI3poLXByb2ZpbGUtYW5zd2VyLWxpc3QnLCfnlKjmiLflm57nrZQnKTsKCSAgaWYoIWFsbExpbmtzQW5zd2Vycy5pbml0RGlhbG9nKCkpcmV0dXJuOwogICAgICAkKCcubW9kYWwtZGlhbG9nLWJnJykuc2hvdygpOwogICAgICB2YXIgeSA9ICgkd2luLmhlaWdodCgpIC0gYWxsTGlua3NBbnN3ZXJzLiRkbGcud2lkdGgoKSkgLyAyCiAgICAgICAgLCB4ID0gKCR3aW4ud2lkdGgoKSAtIGFsbExpbmtzQW5zd2Vycy4kZGxnLndpZHRoKCkpIC8gMgogICAgICA7CiAgICAgIGFsbExpbmtzQW5zd2Vycy4kZGxnLmNzcyh7J3RvcCc6IHksICdsZWZ0JzogeH0pLmZhZGVJbignc2xvdycpOwogICAgICBhbGxMaW5rc0Fuc3dlcnMuc3RhcnQoKTsKICAgIH0pOwogIH0KCiAgaWYocGFnZUlzLk15Q29sbGVjdGlvbiYmd2luZG93LmlaaGlodS5RdWlja0Zhdm8pewogICAgdmFyICRmYXZJdGVtcz0kKCcjemgtZmF2bGlzdHMtd3JhcCcpLmNoaWxkcmVuKCcuem0taXRlbScpOwogICAgJGZhdkl0ZW1zLmVhY2goZnVuY3Rpb24oaSxlKXsKICAgIH0pOwogIH0KCi8qCiAqIOmmlumhtQogKi8KICAgIHZhciAkdG9wc3Rvcnk9JCgnI2lzLXRvcHN0b3J5MicpCiAgICAgICwgaXNUb3BTdG9yeT0kdG9wc3RvcnkmJiR0b3BzdG9yeS5sZW5ndGgKICAgICAgLCBwcm9wRmVlZFR5cGU9J2RhdGEtdHlwZScvLzonZGF0YS1mZWVkdHlwZScKICAgICAgLCAkbGJsSG9tZVRpdGxlPSQoJyN6aC1ob21lLWxpc3QtdGl0bGUnKS8vYWN0aXZpdHlfY2FwdGlvbgogICAgICAsICRidG5OZXdBY3Rpdml0eT0kKCcjemgtbWFpbi1mZWVkLWZyZXNoLWJ1dHRvbicpLy9uZXdfYWN0aXZpdHkKICAgICAgLCAkZmVlZExpc3Q9JCgnLnpoLWdlbmVyYWwtbGlzdCcpLy9mZWVkX2xpc3QKICAgICAgLCAkdG9wTGlua0hvbWU9JCgnI3poLXRvcC1saW5rLWhvbWUnKQogICAgICAsICRmaWx0ZXI9Ly9pc1RvcFN0b3J5PwogICAgICAgICAgICAkKCc8c3Bhbj4nLCB7ICdjbGFzcyc6J2l6aC1mZWVkcy1maWx0ZXInIH0pCiAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxhPicsIHsgJ2NsYXNzJzogJ2l6aC1idXR0b24gaXpoLWZlZWRzLWZpbHRlci1vcHRpb24nLCAnc2hvd0ZlZWRzJzogJ3EnIH0pCiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8aT4nLCB7ICdjbGFzcyc6ICd6Zy1pY29uJyB9KSkKICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCfpl67popgnKQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8YT4nLCB7ICdjbGFzcyc6ICdpemgtYnV0dG9uIGl6aC1mZWVkcy1maWx0ZXItb3B0aW9uJywgJ3Nob3dGZWVkcyc6ICdhJyB9KQogICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGk+JywgeyAnY2xhc3MnOiAnemctaWNvbicgfSkpCiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgn5Zue562UJykKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGE+JywgeyAnY2xhc3MnOiAnaXpoLWJ1dHRvbiBpemgtZmVlZHMtZmlsdGVyLW9wdGlvbicsICdzaG93RmVlZHMnOiAncCxyJywgJ2RhdGEtdGlwJzogJ3MkdCTkuJPmoI/jgIHlnIbmoYwnIH0pCiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8aT4nLCB7ICdjbGFzcyc6ICd6Zy1pY29uJyB9KSkKICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCflhbbku5YnKQogICAgICAgICAgICAgICAgKQogICAgICAsICRmaWx0ZXJJbmZvPSQoJzxhPicseydjbGFzcyc6J2l6aC1mZWVkcy1maWx0ZXItaW5mbyBub3RoaW5nJyxocmVmOidqYXZhc2NyaXB0OnZvaWQoMCk7J30pLm9uKCdjbGljaycsZnVuY3Rpb24oKXskZmlsdGVyLnRyaWdnZXIoJGZpbHRlci5pcygnOmhpZGRlbicpfHwkZmlsdGVyLmF0dHIoJ2RvaW5nJyk9PSdoaWRlJz8nc2hvdyc6J2hpZGUnKTt9KQogICAgICAsIFNob3dGZWVkcz1mdW5jdGlvbih0eXBlLGVuYWJsZSl7CiAgICAgICAgICAgIHZhciBpZD0iaXpoQ1NTX0ZpbHRlckZlZWRfIit0eXBlCiAgICAgICAgICAgICAgLCBuZD1kb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCkKICAgICAgICAgICAgOwogICAgICAgICAgICBpZihlbmFibGUpewogICAgICAgICAgICAgICAgaWYobmQpbmQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChuZCk7CiAgICAgICAgICAgIH1lbHNlIGlmKGhlYWRzLmxlbmd0aCl7CiAgICAgICAgICAgICAgICBpZighbmQpewogICAgICAgICAgICAgICAgICAgIG5kPV9kb2MuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTsKICAgICAgICAgICAgICAgICAgICBuZC50eXBlPSd0ZXh0L2Nzcyc7CiAgICAgICAgICAgICAgICAgICAgbmQuaWQ9aWQ7CiAgICAgICAgICAgICAgICAgICAgbmQuYXBwZW5kQ2hpbGQoX2RvYy5jcmVhdGVUZXh0Tm9kZSgnLmZlZWQtaXRlbVsnK3Byb3BGZWVkVHlwZSsnXj0iJyt0eXBlKyciXXtkaXNwbGF5Om5vbmV9JykpOwogICAgICAgICAgICAgICAgICAgIGhlYWRzWzBdLmFwcGVuZENoaWxkKG5kKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8ve1JPVU5EVEFCTEVfQUREX1JFTEFURUQ6ICJyb3VuZHRhYmxlIixBUlRJQ0xFX1ZPVEVfVVA6ICJwb3N0X3ZvdGUiLEFSVElDTEVfQ1JFQVRFOiAicG9zdF9jcmVhdGUiLFJFQ09NTUVOREVEOiAiZmVlZF9yZWNvbW1lbmRlZCIsUVVFU1RJT05fRk9MTE9XOiAiZmVlZF9xdWVzdGlvbl9mb2xsb3ciLFFVRVNUSU9OX0NSRUFURTogImZlZWRfcXVlc3Rpb24iLEFOU1dFUl9WT1RFX1VQOiAiZmVlZF9hbnN3ZXJfdm90ZSIsQU5TV0VSX0NSRUFURTogImZlZWRfYW5zd2VyX2Fuc3dlciJ9OwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAsIHJlZnJlc2hGaWx0ZXJJbmZvPWZ1bmN0aW9uKCl7CiAgICAgICAgICAgIHZhciBjb3VudD0kZmVlZExpc3QuY2hpbGRyZW4oJy5mZWVkLWl0ZW06aGlkZGVuJykubGVuZ3RoCiAgICAgICAgICAgICAgLCBpbmZvPScgPui/h+a7pOmAiemhuTwnCiAgICAgICAgICAgIDsKICAgICAgICAgICAgaWYoY291bnQpewogICAgICAgICAgICAgICAgaW5mbz0n77yIJytjb3VudCsn5p2h5Yqo5oCB6KKr6ZqQ6JeP77yJJzsKICAgICAgICAgICAgICAgICRmaWx0ZXJJbmZvLnJlbW92ZUNsYXNzKCdub3RoaW5nJykuY3NzKHtkaXNwbGF5OicnfSk7CiAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgJGZpbHRlckluZm8uYWRkQ2xhc3MoJ25vdGhpbmcnKTsKICAgICAgICAgICAgfSAgIAogICAgICAgICAgICAkZmlsdGVySW5mby50ZXh0KGluZm8pOwogICAgICAgIH0KICAgICAgLCBmZWVkc0NvbHVtbnM9ZnVuY3Rpb24oKXsgLy8gSW1wbGVtZW50ZWQgYnkgbW9ybGV5LCBtb2RpZmllZCBieSB1bm9negogICAgICAgICAgICAvL+WKqOaAgeeahOexu+WeiwogICAgICAgICAgICB2YXIgZmVlZFR5cGVzID0gLy9pc1RvcFN0b3J5PwogICAgICAgICAgICAgICAgW3sKICAgICAgICAgICAgICAgICBpbmRleDogMCwKICAgICAgICAgICAgICAgICBuYW1lOiAn5YWo6YOoJywKICAgICAgICAgICAgICAgICBjb2RlTmFtZTogJycKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICBpbmRleDogMSwKICAgICAgICAgICAgICAgICBuYW1lOiAn6Zeu6aKYJywKICAgICAgICAgICAgICAgICBjb2RlTmFtZTogJ3EnCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgaW5kZXg6IDIsCiAgICAgICAgICAgICAgICAgbmFtZTogJ+WbnuetlCcsCiAgICAgICAgICAgICAgICAgY29kZU5hbWU6ICdhJwogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgIGluZGV4OiAzLAogICAgICAgICAgICAgICAgIG5hbWU6ICfkuJPmoI8nLAogICAgICAgICAgICAgICAgIGNvZGVOYW1lOiAncCcKICAgICAgICAgICAgICAgIH1dOwogICAgICAgICAgICAKICAgICAgICAgICAgLy/oh6rlrprkuYkgQ1NTIOWIsCBoZWFkCiAgICAgICAgICAgIHZhciBzdHlsZXMgPSBbXTsKICAgICAgICAgICAgCiAgICAgICAgICAgIHN0eWxlcy5wdXNoKCcuemEtZmlsdGVye2Rpc3BsYXk6IGlubGluZS1ibG9jazttYXJnaW4tcmlnaHQ6MTBweDtjdXJzb3I6cG9pbnRlcjtjb2xvcjojOTk5O30nKTsKICAgICAgICAgICAgc3R5bGVzLnB1c2goJy56YS1maWx0ZXIuYWN0aXZle2NvbG9yOiMyNTk7fScpOwogICAgICAgICAgICBzdHlsZXMucHVzaCgnLnphLWZpbHRlcj4uemctbnVtLmhpZGV7ZGlzcGxheTpub25lO30nKTsKICAgICAgICAgICAgCiAgICAgICAgICAgICQoJzxzdHlsZS8+JykudGV4dChzdHlsZXMuam9pbignJykpLmFwcGVuZFRvKCdoZWFkJyk7CiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgJHpoSG9tZUxpc3RUaXRsZSA9ICRsYmxIb21lVGl0bGU7CiAgICAgICAgICAgIAogICAgICAgICAgICAvL+agueaNruexu+Wei+a3u+WKoOi/h+a7pOaMiemSriDliLAgI3poLWhvbWUtbGlzdC10aXRsZQogICAgICAgICAgICB2YXIgZmlsdGVyQnRucyA9IFtdCiAgICAgICAgICAgICAgLCBpID0gZmVlZFR5cGVzLmxlbmd0aDsKICAgICAgICAgICAgCiAgICAgICAgICAgIHdoaWxlIChpLS0pIHsKICAgICAgICAgICAgIGZpbHRlckJ0bnMucHVzaCgKICAgICAgICAgICAgICAgICAkKCc8c3Bhbj4nKS5hZGRDbGFzcygnemEtZmlsdGVyJykKICAgICAgICAgICAgICAgICAuYXR0cigndHlwZUluZGV4JywgZmVlZFR5cGVzW2ldLmluZGV4KQogICAgICAgICAgICAgICAgIC50ZXh0KGZlZWRUeXBlc1tpXS5uYW1lKQogICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHNwYW4+JywgeyAnY2xhc3MnOiAnemctbnVtJyB9KS5hZGRDbGFzcygnaGlkZScpKQogICAgICAgICAgICAgICAgIC5vbignY2xpY2snLCB0b2dnbGVGZWVkVHlwZSkKICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIGZpbHRlckJ0bnMucmV2ZXJzZSgpOwogICAgICAgICAgICBmaWx0ZXJCdG5zWzBdLmFkZENsYXNzKCdhY3RpdmUnKTsKCiAgICAgICAgICAgICR6aEhvbWVMaXN0VGl0bGUuY29udGVudHMoKS5maWx0ZXIoZnVuY3Rpb24oaSxlKXsKICAgICAgICAgICAgICAgIHJldHVybiAoZSE9bnVsbCYmKGUubm9kZVZhbHVlfHwnJykuaW5kZXhPZign5pyA5paw5Yqo5oCBJyk+PTApCiAgICAgICAgICAgIH0pLnJlbW92ZSgpCiAgICAgICAgICAgICR6aEhvbWVMaXN0VGl0bGUuZmluZCgnaScpLmVxKDApLmFmdGVyKGZpbHRlckJ0bnMpLnJlbW92ZSgpOwogICAgICAgICAgICAKICAgICAgICAgICAgdmFyICR0YXJnZXRaZXJvID0gZmlsdGVyQnRuc1swXS5maW5kKCcuemctbnVtJykKICAgICAgICAgICAgICAsIGN1cmZlZWRUeXBlQ29kZU5hbWUgPSAnJwogICAgICAgICAgICAKICAgICAgICAgICAgZnVuY3Rpb24gdHlwZU1hdGNoKCRlbGVtKSB7CiAgICAgICAgICAgICBpZiAoY3VyZmVlZFR5cGVDb2RlTmFtZSA9PSAnJykgewogICAgICAgICAgICAgICAgICRlbGVtLnNob3coKTsKICAgICAgICAgICAgIH0gZWxzZSBpZiAoMCA8PSAkZWxlbS5hdHRyKHByb3BGZWVkVHlwZSkuaW5kZXhPZihjdXJmZWVkVHlwZUNvZGVOYW1lKSkgewogICAgICAgICAgICAgICAgICRlbGVtLnNob3coKTsKICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgJGVsZW0uaGlkZSgpOwogICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICAvL+aMiemSruS6i+S7tgogICAgICAgICAgICBmdW5jdGlvbiB0b2dnbGVGZWVkVHlwZSgpIHsKICAgICAgICAgICAgIHZhciAkY2xpY2tlZCA9ICQodGhpcyk7CiAgICAgICAgICAgICAkY2xpY2tlZE51bSA9ICRjbGlja2VkLmZpbmQoJy56Zy1udW0nKTsKICAgICAgICAgICAgIC8vIOS6pOS6kuaViOaenAogICAgICAgICAgICAgZmlsdGVyQnRucy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHsKICAgICAgICAgICAgICAgICBpdGVtLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTsKICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAKICAgICAgICAgICAgICRjbGlja2VkLmFkZENsYXNzKCdhY3RpdmUnKTsKICAgICAgICAgICAgCiAgICAgICAgICAgICBpZiAoJGNsaWNrZWQuYXR0cigndHlwZUluZGV4JykgPT0gMCkgewogICAgICAgICAgICAgICAgICQoJy56Zy1udW0nLCAnLnphLWZpbHRlcicpLnRleHQoJycpLmFkZENsYXNzKCdoaWRlJyk7CiAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgIHZhciB0b3RhbFVucmVhZCA9IChwYXJzZUludCgkdGFyZ2V0WmVyby50ZXh0KCkpIHx8IDApIC0gKHBhcnNlSW50KCRjbGlja2VkTnVtLnRleHQoKSkgfHwgMCk7CiAgICAgICAgICAgICAgICAgaWYgKHRvdGFsVW5yZWFkICE9IDApIHsKICAgICAgICAgICAgICAgICAgICAgJHRhcmdldFplcm8udGV4dCh0b3RhbFVucmVhZCk7CiAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgJHRhcmdldFplcm8udGV4dCgnJykuYWRkQ2xhc3MoJ2hpZGUnKTsKICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICRjbGlja2VkTnVtLnRleHQoJycpLmFkZENsYXNzKCdoaWRlJyk7CiAgICAgICAgICAgICB9CiAgICAgICAgICAgICBjdXJmZWVkVHlwZUNvZGVOYW1lID0gZmVlZFR5cGVzWyRjbGlja2VkLmF0dHIoJ3R5cGVJbmRleCcpXS5jb2RlTmFtZTsKICAgICAgICAgICAgIC8vIOS/oeaBr+a1gei/h+a7pAogICAgICAgICAgICAgJCgnLmZlZWQtaXRlbScpLmVhY2goZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgdHlwZU1hdGNoKCQodGhpcykpOwogICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFR5cGVJbmRleEJ5Q29kZU5hbWUoY29kZU5hbWUpIHsKICAgICAgICAgICAgIHZhciBpID0gZmVlZFR5cGVzLmxlbmd0aDsKICAgICAgICAgICAgIHdoaWxlIChpLS0pIHsKICAgICAgICAgICAgICAgICBpZiAoY29kZU5hbWUgPT0gZmVlZFR5cGVzW2ldLmNvZGVOYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpOwogICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBNdXRhdGlvbk9ic2VydmVyID0gd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIgfHwgd2luZG93LldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7CiAgICAgICAgICAgIAogICAgICAgICAgICAvL+ebkeWQrOaOqOmAgQogICAgICAgICAgICB2YXIgaGFzTmV3RmVlZCA9IGZhbHNlOwogICAgICAgICAgICAvL2NyZWF0ZSBhbiBvYnNlcnZlciBpbnN0YW5jZQogICAgICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbihtdXRhdGlvbnMpIHsKICAgICAgICAgICAgIGlmICggISEgcGFyc2VJbnQoJGJ0bk5ld0FjdGl2aXR5LnRleHQoKSkpIHsKICAgICAgICAgICAgICAgICBtdXRhdGlvbnMuZm9yRWFjaChmdW5jdGlvbihtdXRhdGlvbikgewogICAgICAgICAgICAgICAgICAgICBpZiAobXV0YXRpb24udHlwZSA9PT0gJ2NoaWxkTGlzdCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdIYXMgTmV3IEZlZWQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOacieaWsOaOqOmAgeWImeinpuWPkeS5iwogICAgICAgICAgICAgICAgICAgICAgICAgaGFzTmV3RmVlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAkYnRuTmV3QWN0aXZpdHkudGV4dCgnJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAkLndoZW4oJGJ0bk5ld0FjdGl2aXR5WzBdLmNsaWNrKCkpLmRvbmUoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzTmV3RmVlZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEwMDApOwogICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAKICAgICAgICAgICAgLy9wYXNzIGluIHRoZSB0YXJnZXQgbm9kZSwgYXMgd2VsbCBhcyB0aGUgb2JzZXJ2ZXIgb3B0aW9ucwogICAgICAgICAgICBvYnNlcnZlci5vYnNlcnZlKAogICAgICAgICAgICAgJGJ0bk5ld0FjdGl2aXR5WzBdLCB7CiAgICAgICAgICAgICAgICAgY2hpbGRMaXN0OiB0cnVlCiAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8v55uR5ZCs5o+S5YWlCiAgICAgICAgICAgICRmZWVkTGlzdC5vbigiRE9NTm9kZUluc2VydGVkIiwgZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgdmFyICRzZWxmID0gJChlLnRhcmdldCk7CiAgICAgICAgICAgIAogICAgICAgICAgICAgaWYgKCRzZWxmLmhhc0NsYXNzKCdmZWVkLWl0ZW0nKSkgewogICAgICAgICAgICAgICAgIGlmIChoYXNOZXdGZWVkKSB7CiAgICAgICAgICAgICAgICAgICAgICRzZWxmLmhpZGUoKTsKICAgICAgICAgICAgICAgICAgICAgdmFyICR0YXJnZXQgPSBmaWx0ZXJCdG5zW2dldFR5cGVJbmRleEJ5Q29kZU5hbWUoJHNlbGYuYXR0cihwcm9wRmVlZFR5cGUpKV0uZmluZCgnLnpnLW51bScpOwogICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0LnRleHQoKHBhcnNlSW50KCR0YXJnZXQudGV4dCgpKSB8fCAwKSArIDEpLnJlbW92ZUNsYXNzKCdoaWRlJyk7CiAgICAgICAgICAgICAgICAgICAgICR0YXJnZXRaZXJvLnRleHQoKHBhcnNlSW50KCR0YXJnZXRaZXJvLnRleHQoKSkgfHwgMCkgKyAxKS5yZW1vdmVDbGFzcygnaGlkZScpOwogICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgIHR5cGVNYXRjaCgkc2VsZik7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAsIGhvbWVGZWVkcz1mdW5jdGlvbihpemhIb21lRmVlZHNDb2x1bW5zKXsKICAgICAgICAgICAgaWYgKGl6aEhvbWVGZWVkc0NvbHVtbnMpewogICAgICAgICAgICAgICAgZmVlZHNDb2x1bW5zKCk7CiAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgJGZpbHRlci5jaGlsZHJlbignLml6aC1mZWVkcy1maWx0ZXItb3B0aW9uJykuYWRkQ2xhc3MoJ29uJykuY2xpY2soZnVuY3Rpb24oZXZlbnQpewogICAgICAgICAgICAgICAgICAgIHZhciBpPTAKICAgICAgICAgICAgICAgICAgICAgICwgJGU9JCh0aGlzKQogICAgICAgICAgICAgICAgICAgICAgLCBmcz0kZS5hdHRyKCdzaG93RmVlZHMnKQogICAgICAgICAgICAgICAgICAgICAgLCBmYT1mcy5zcGxpdCgnLCcpCiAgICAgICAgICAgICAgICAgICAgOwogICAgICAgICAgICAgICAgICAgICQoJy5pemgtZmVlZHMtZmlsdGVyLW9wdGlvbltzaG93RmVlZHM9IicrZnMrJyJdJykudG9nZ2xlQ2xhc3MoJ29uJyk7CiAgICAgICAgICAgICAgICAgICAgZm9yKDtpPGZhLmxlbmd0aDtpKyspewogICAgICAgICAgICAgICAgICAgICAgICBTaG93RmVlZHMoZmFbaV0sJGUuaXMoJy5vbicpKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZpbHRlckluZm8oKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgaWYoJHRvcExpbmtIb21lLmxlbmd0aCl7CiAgICAgICAgICAgICAgICAgICAgdmFyICRmaWx0ZXIyPSQoJzxkaXY+JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jc3Moe3Bvc2l0aW9uOidhYnNvbHV0ZScsYm9yZGVyOicxcHggc29saWQgIzc3NycsYmFja2dyb3VuZENvbG9yOicjZmZmJ30pLmhpZGUoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkZmlsdGVyLmNsb25lKHRydWUsdHJ1ZSkuY3NzKHtkaXNwbGF5OidibG9jayd9KSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5vbignc2hvdycsZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGU9JCh0aGlzKS5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJGUuaXMoJzpoaWRkZW4nKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGUuY3NzKHtkaXNwbGF5OicnLG9wYWNpdHk6MH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGUuYW5pbWF0ZSh7b3BhY2l0eToxfSwnc2xvdycpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5vbignaGlkZScsZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGU9JCh0aGlzKS5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGUuZmFkZU91dCgnc2xvdycpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICA7CiAgICAgICAgICAgICAgICAgICAgJHRvcExpbmtIb21lLmFmdGVyKCRmaWx0ZXIyKS5wYXJlbnQoKQogICAgICAgICAgICAgICAgICAgICAgICAub24oJ21vdXNlZW50ZXInLGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkZT0kKHRoaXMpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgJGY9JGUuY2hpbGRyZW4oKS5sYXN0KCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRmLnRyaWdnZXIoJ3Nob3cnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRmaWx0ZXJJbmZvLmZpbHRlcignLm5vdGhpbmcnKS5oaWRlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIC5vbignbW91c2VsZWF2ZScsZnVuY3Rpb24oZXZlbnQpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRlPSQodGhpcykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAkZj0kZS5jaGlsZHJlbigpLmxhc3QoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGYudHJpZ2dlcignaGlkZScpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGZpbHRlckluZm8uZmlsdGVyKCcubm90aGluZycpLmhpZGUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICA7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZigkbGJsSG9tZVRpdGxlLmxlbmd0aCl7CiAgICAgICAgICAgICAgICAgICAgJGZpbHRlckluZm8uY3NzKHsKICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTonbm9uZScKICAgICAgICAgICAgICAgICAgICAgICwgdGV4dERlY29yYXRpb246J25vbmUnCiAgICAgICAgICAgICAgICAgICAgICAsIGN1cnNvcjoncG9pbnRlcicKICAgICAgICAgICAgICAgICAgICB9KS5pbnNlcnRCZWZvcmUoaXNUb3BTdG9yeT8kdG9wc3Rvcnk6JCgnI2ZlZWQtdmVyJykpOwogICAgICAgICAgICAgICAgICAgICRsYmxIb21lVGl0bGUuY3NzKHtvdmVyZmxvdzonaGlkZGVuJ30pCiAgICAgICAgICAgICAgICAgICAgICAgIC5wcmVwZW5kKCRmaWx0ZXIpCiAgICAgICAgICAgICAgICAgICAgICAgIC8vLmNoaWxkcmVuKCdpOmZpcnN0JykKICAgICAgICAgICAgICAgICAgICAgICAgLm9uKCdtb3VzZWVudGVyJyxmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGU9JCh0aGlzKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICRmPSRlLmNoaWxkcmVuKCcuaXpoLWZlZWRzLWZpbHRlci1pbmZvLm5vdGhpbmcnKS5zdG9wKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRmLmlzKCc6aGlkZGVuJykpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGYuY3NzKHtkaXNwbGF5OicnLG9wYWNpdHk6MH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZi5hbmltYXRlKHtvcGFjaXR5OjF9LCdmYXN0Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIC5vbignbW91c2VsZWF2ZScsZnVuY3Rpb24oZXZlbnQpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRlPSQodGhpcykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAkZj0kZS5jaGlsZHJlbignLml6aC1mZWVkcy1maWx0ZXItaW5mby5ub3RoaW5nJykuc3RvcCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZi5mYWRlT3V0KCdmYXN0Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgOwogICAgICAgICAgICAgICAgICAgICRmaWx0ZXIuY3NzKHttYXJnaW5MZWZ0Oi0kZmlsdGVyLndpZHRoKCksZGlzcGxheTonbm9uZSd9KQogICAgICAgICAgICAgICAgICAgICAgICAub24oJ3Nob3cnLGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGU9JCh0aGlzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRlLmF0dHIoJ2RvaW5nJyk9PT0nc2hvdycpcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGUuYXR0cignZG9pbmcnLCdzaG93Jykuc3RvcCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJGUuaXMoJzpoaWRkZW4nKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZS5jc3Moe2Rpc3BsYXk6Jyd9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGUuYW5pbWF0ZSh7bWFyZ2luTGVmdDowfSwnc2xvdycsZnVuY3Rpb24oKXskKHRoaXMpLmNzcygnZGlzcGxheScsJycpLnJlbW92ZUF0dHIoJ2RvaW5nJyk7fSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIC5vbignaGlkZScsZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkZT0kKHRoaXMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJGUuYXR0cignZG9pbmcnKT09PSdoaWRlJylyZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZS5hdHRyKCdkb2luZycsJ2hpZGUnKS5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZS5hbmltYXRlKHttYXJnaW5MZWZ0Oi0kZmlsdGVyLndpZHRoKCl9LCdzbG93JyxmdW5jdGlvbigpeyQodGhpcykuY3NzKCdkaXNwbGF5Jywnbm9uZScpLnJlbW92ZUF0dHIoJ2RvaW5nJyk7fSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIC5vbignbW91c2VlbnRlcicsZnVuY3Rpb24oZXZlbnQpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRlPSQodGhpcykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRlLnRyaWdnZXIoJ3Nob3cnKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgLm9uKCdtb3VzZWxlYXZlJyxmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGU9JCh0aGlzKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGUudHJpZ2dlcignaGlkZScpOwogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIDsKICAgICAgICAgICAgICAgICAgICByZWZyZXNoRmlsdGVySW5mbygpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgOwogICAgaWYocGFnZUlzLkhvbWV8fHBhZ2VJcy5EZWJ1dHMpewogICAgICAgICRmZWVkTGlzdC5maW5kKCcuZmVlZC1pdGVtJykuZWFjaChmdW5jdGlvbihpLGUpewogICAgICAgICAgICB3aW5kb3cuaVpoaWh1LkFuc3dlci5wcm9jZXNzQW5zd2VyKCQoZSksbnVsbAogICAgICAgICAgICAgICwgaXpoQXV0aG9yUmVhcgogICAgICAgICAgICAgICwgaXpoQXV0aG9yTGlzdAogICAgICAgICAgICApOwogICAgICAgIH0pOwogICAgICAgICRmZWVkTGlzdC5iaW5kKCdET01Ob2RlSW5zZXJ0ZWQnLGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICAgICAgdmFyICRpdGVtPSQoZXZlbnQudGFyZ2V0KTsKICAgICAgICAgICAgaWYoJGl0ZW0uaXMoJy5mZWVkLWl0ZW0nKSl7CiAgICAgICAgICAgICAgICB3aW5kb3cuaVpoaWh1LkFuc3dlci5wcm9jZXNzQW5zd2VyKCRpdGVtLG51bGwKICAgICAgICAgICAgICAgICAgLCAkYm9keS5hdHRyKCdpemhBdXRob3JSZWFyJyk9PScxJwogICAgICAgICAgICAgICAgICAsICRib2R5LmF0dHIoJ2l6aEF1dGhvckxpc3QnKT09JzEnCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgcmVmcmVzaEZpbHRlckluZm8oKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfQoKICAgIGlmIChwYWdlSXMuSG9tZSl7CiAgICAJdmFyIGJIb21lRmVlZHNDb2x1bW5zPXdpbmRvdy5pWmhpaHUuY29uZmlnWydIb21lRmVlZHNDb2x1bW5zJ10KICAgICAgICBpZiAoaXpoSG9tZU5vdGkmJiFiSG9tZUZlZWRzQ29sdW1ucwogICAgICAgICAmJiAkbGJsSG9tZVRpdGxlLmxlbmd0aAogICAgICAgICAmJiAkYnRuTmV3QWN0aXZpdHkubGVuZ3RoCiAgICAgICAgKXsKICAgICAgICAgICAgJGxibEhvbWVUaXRsZS5jc3MoewogICAgICAgICAgICAgICAgJ2Zsb2F0JzonbGVmdCcKICAgICAgICAgICAgICAsICdtYXJnaW4tYm90dG9tJzonMnB4JwogICAgICAgICAgICAgICwgJ2xpbmUtaGVpZ2h0JzonMzJweCcKICAgICAgICAgICAgICAsICd3aWR0aCc6JzEwMCUnCiAgICAgICAgICAgICAgfSkubmV4dCgpLmNzcygnY2xlYXInLCdib3RoJyk7CiAgICAgICAgICAgICRidG5OZXdBY3Rpdml0eS5jc3MoewogICAgICAgICAgICAgICAgJ2Zsb2F0JzoncmlnaHQnCiAgICAgICAgICAgICAgLCAnbWFyZ2luJzonMCcKICAgICAgICAgICAgICAsICdsaW5lLWhlaWdodCc6JzIycHgnCiAgICAgICAgICAgIH0pLmFwcGVuZFRvKCRsYmxIb21lVGl0bGUpOwogICAgICAgIH0KICAgICAgICBob21lRmVlZHMoYkhvbWVGZWVkc0NvbHVtbnMpOwogICAgfQoKCi8qKgogKiDpl67popjpobUKICovCgogIGlmKHBhZ2VJcy5RdWVzdGlvbil7CgogICAgdmFyICRsYmxRdWVzdGlvbk1ldGE9JCgnI3poLXF1ZXN0aW9uLW1ldGEtd3JhcCcpLy9xdWVzdGlvbl9tZXRhCiAgICAgICwgJGxpc3RBbnN3ZXJzPSQoJyN6aC1xdWVzdGlvbi1hbnN3ZXItd3JhcCwjemgtcXVlc3Rpb24tY29sbGFwc2VkLXdyYXAnKS5jaGlsZHJlbigpLy8kKCcuem0taXRlbS1hbnN3ZXInLCcjemgtc2luZ2xlLXF1ZXN0aW9uJykKICAgICAgLCBudW1BbnN3ZXJzQ291bnQ9JGxpc3RBbnN3ZXJzLmxlbmd0aAogICAgICAsICRidG5Db2xsYXBzZWRTd2l0Y2hlcj0kKCcjemgtcXVlc3Rpb24tY29sbGFwc2VkLXN3aXRjaGVyJykKICAgICAgLCBudW1Db2xsYXBzZWRDb3VudD0hJGJ0bkNvbGxhcHNlZFN3aXRjaGVyLmxlbmd0aHx8JGJ0bkNvbGxhcHNlZFN3aXRjaGVyLmlzKCc6aGlkZGVuJyk/MDpwYXJzZUludCgkKCcjemgtcXVlc3Rpb24tY29sbGFwc2VkLW51bScpLnRleHQoKSkKICAgICAgLCBudW1BbnN3ZXJzQ291bnRUb3RhbD1udW1BbnN3ZXJzQ291bnQrbnVtQ29sbGFwc2VkQ291bnQKICAgICAgLCAkcmVwbHk9JCgnI3poLXF1ZXN0aW9uLWFuc3dlci1mb3JtLXdyYXAnKS8vcmVwbHlfZm9ybQogICAgOwogICAgaWYoJGxibFF1ZXN0aW9uTWV0YS5sZW5ndGgpewogICAgICAgIHZhciBzPW5ldyBBcnJheSgpCiAgICAgICAgICAsICRhPSQoJzxhPicpCiAgICAgICAgICAsICRjPSQoJzxzcGFuPicseydjbGFzcyc6J3pnLWJ1bGwnfSkudGV4dCgn4oCiJykKICAgICAgICAgICwgJHA9JGxibFF1ZXN0aW9uTWV0YS5jaGlsZHJlbignLnptLW1ldGEtcGFuZWwnKS5jaGlsZHJlbignYS5tZXRhLWl0ZW06bGFzdCcpCiAgICAgICAgICAsICRtPSQoJy56dS1hbnN3ZXItZm9ybS1kaXNhYmxlZC13cmFwOnZpc2libGUgPiBhJywnI3poLXF1ZXN0aW9uLWFuc3dlci1mb3JtLXdyYXAnKQogICAgICAgIDsKICAgICAgICBpZigkbS5sZW5ndGgpewogICAgICAgICAgICBzLnB1c2goJG0uYXR0cignaHJlZicpKTsKICAgICAgICAgICAgJGEudGV4dCgn5oiR55qE5Zue562UJyk7CiAgICAgICAgfWVsc2UgaWYoJHJlcGx5Lmxlbmd0aCl7CiAgICAgICAgICAgIHZhciBpZD0nbmV3X2Fuc3dlcicKICAgICAgICAgICAgICAsICRiPSQoJzxhPicse25hbWU6aWR9KS5iZWZvcmUoJHJlcGx5LmNoaWxkcmVuKCkuZmlyc3QoKSk7CiAgICAgICAgICAgIHMucHVzaCgnI2RyYWZ0Jyk7CiAgICAgICAgICAgICRhLnRleHQoJ+aIkeimgeWbnuetlCcpOwogICAgICAgIH0KICAgICAgICAkYy5pbnNlcnRBZnRlcigkcCk7CiAgICAgICAgJGEuYXR0cignaHJlZicscy5qb2luKCcnKSkuYXR0cigndGFyZ2V0JywnX3NlbGYnKQogICAgICAgICAgICAuaW5zZXJ0QWZ0ZXIoJGMpOwogICAgfQogICAgaWYgKGl6aEF1dGhvckxpc3QmJgogICAgICAgIG51bUFuc3dlcnNDb3VudFRvdGFsPjEwMCYmCiAgICAgICAgY29uZmlybSgn6L+Z5Liq6Zeu6aKY55qE5Zue562U5pWw6L6D5aSa77yM5piv5ZCm5pqC5pe25YWz6Zet44CMaVpoaWh1IOWbnuetlOebruW9leOAje+8nycpKXsKICAgICAgICAvLyQoJyNpemhDU1NfY29tbWVudCcpLnJlbW92ZSgpOwogICAgICAgIC8vcmV0dXJuOwogICAgICAgIGl6aEF1dGhvckxpc3Q9ZmFsc2U7CiAgICAgICAgJGJvZHkuYXR0cignaXpoQXV0aG9yTGlzdCcsJzAnKTsKICAgIH0KICAgIC8vY29uc29sZS5sb2coKG5ldyBEYXRlKCkpLmdldFRpbWUoKSk7CiAgICAKICAgIHZhciAkbGJsQW5zd2Vyc0NvdW50PSQoJyN6aC1xdWVzdGlvbi1hbnN3ZXItbnVtJykvL2Fuc3dlcnNfY291bnQKICAgICAgLCAkdW5vPSQoJzxkaXY+Jyx7J2NsYXNzJzondW5vJyxzdHlsZTonZmxvYXQ6bGVmdCd9KS8vaXpoX0F1dGhvcnNMaXN0CiAgICAgICwgJHBwVD0kKCc8c3Bhbj4nLHsnY2xhc3MnOidtZVQnLHN0eWxlOidkaXNwbGF5Om5vbmUnfSkvL2l6aF9BdXRob3JzTGlzdF9Ub3BTZWxmSW5kaWNhdG9yCiAgICAgICwgJGZybT0kKCc8ZGl2PicseydjbGFzcyc6J2ZyYW1lJ30pLy9pemhfQXV0aG9yc0xpc3RfZnJhbWUKICAgICAgLCAkcHBCPSQoJzxzcGFuPicseydjbGFzcyc6J21lQicsc3R5bGU6J2Rpc3BsYXk6bm9uZSd9KS8vaXpoX0F1dGhvcnNMaXN0X0JvdHRvbVNlbGZJbmRpY2F0b3IKICAgICAgLCAkcHA9JCgnPHVsPicseydjbGFzcyc6J3BwJ30pLy9pemhfQXV0aG9yc0xpc3RfVUwKICAgICAgLCAkcHBJPSQoJzxkaXY+JykKICAgIAogICAgOwoKICAgIHdpbmRvdy5pWmhpaHUuJHVub0Fuc3dlcnMgPSAkdW5vCi8qCiAgICAvL+etlOahiOaMieaXtumXtOaOkuW6jwogICAgaWYodXRpbHMuZ2V0Q2ZnKCdhbnN3ZXJfb3JkZXJCeVRpbWUnKSl7CiAgICAgIGNsaWVudC5jbGljaygnLnpoLWFuc3dlcnMtZmlsdGVyLXBvcHVwIGRpdltkYXRhLWtleT1hZGRlZF90aW1lXScpOwogICAgfQoqLyAgICAKICAgIHZhciAkcXVlc3Rpb25XcmFwPSQoJyN6aC1xdWVzdGlvbi1tZXRhLXdyYXAnKTsKICAgICRxdWVzdGlvbldyYXAuY2hpbGRyZW4oJy5wYW5lbC1jb250YWluZXInKS5iaW5kKCdET01Ob2RlSW5zZXJ0ZWQnLGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICB3aW5kb3cuaVpoaWh1LkNvbW1lbnQucHJvY2Vzc0NvbW1lbnQoJChldmVudC50YXJnZXQpKTsKICAgIH0pOwogICAgaWYod2luZG93LmlaaGlodS5Db21tZW50LlJpZ2h0Q29tbWVudCl7CiAgICAgICAgLy8kcXVlc3Rpb25XcmFwLmNoaWxkcmVuKCcubWV0YS1pdGVtW25hbWU9YWRkY29tbWVudF0nKS5wcmVwZW5kVG8oJHF1ZXN0aW9uV3JhcCk7CiAgICAgICAgd2luZG93LmlaaGlodS5Db21tZW50LnByb2Nlc3NDb21tZW50QnV0dG9uKCRxdWVzdGlvbldyYXApOwogICAgICAgIGlmKCEkKCcjaXpoX1F1ZXN0aW9uU2hhZG93JykubGVuZ3RoKXsKICAgICAgICAgICAgJCgnPGRpdj4nLHsnY2xhc3MnOidpemhfYm94U2hhZG93JyxpZDonaXpoX1F1ZXN0aW9uU2hhZG93J30pLmNzcyh7CiAgICAgICAgICAgICAgICAnei1pbmRleCc6ICctMScKICAgICAgICAgICAgICAsICdwb3NpdGlvbic6ICdyZWxhdGl2ZScKICAgICAgICAgICAgICAsICd0b3AnOiAtMjUKICAgICAgICAgICAgICAsICdtYXJnaW4tbGVmdCc6IC0zMgogICAgICAgICAgICB9KS5wcmVwZW5kVG8oJ2JvZHk+Lnp1LW1haW46Zmlyc3QnKS5oaWRlKCk7CiAgICAgICAgfSAgIAogICAgfQoKICAgIC8vcHJvY2VzcyBlYWNoIGFuc3dlcgogICAgaWYoJGxpc3RBbnN3ZXJzJiYkbGlzdEFuc3dlcnMubGVuZ3RoKXsKICAgICAgICBpZihpemhBdXRob3JMaXN0KXsKICAgICAgICAgICAgJHVuby5hcHBlbmRUbygkYmFubmVyKTsKICAgICAgICAgICAgJHBwVC5hcHBlbmRUbygkdW5vKTsKICAgICAgICAgICAgJGZybS5hcHBlbmRUbygkdW5vKTsKICAgICAgICAgICAgJHBwLmFwcGVuZFRvKCRmcm0pOwogICAgICAgICAgICAkcHBCLmFwcGVuZFRvKCR1bm8pOwogICAgICAgICAgICAvL3Vuby5hcHBlbmRDaGlsZChwcEkpOwogICAgICAgICAgICAkdW5vLiRlbmRPZkxhc3RBPSQoJzxsaT4nKS5hZGRDbGFzcygnZW5kT2ZMYXN0QScpLmFwcGVuZFRvKCRwcCkKICAgICAgICB9CiAgICAgICAgJGxpc3RBbnN3ZXJzLmVhY2goZnVuY3Rpb24oaSxlKXsKICAgICAgICAgICAgd2luZG93LmlaaGlodS5BbnN3ZXIucHJvY2Vzc0Fuc3dlcigkKGUpLCRwcAogICAgICAgICAgICAgICwgaXpoQXV0aG9yUmVhcgogICAgICAgICAgICAgICwgaXpoQXV0aG9yTGlzdCk7CiAgICAgICAgfSk7CiAgICAgICAgaWYoJHJlcGx5LmNoaWxkcmVuKCcuenUtYW5zd2VyLWZvcm0tZGlzYWJsZWQtd3JhcCcpLmlzKCc6aGlkZGVuJykpewogICAgICAgICAgICB2YXIgJHBwbGE9JCgnPGE+Jyx7aHJlZjonI2RyYWZ0Jyx0YXJnZXQ6J19zZWxmJ30pCiAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0YWJsZT4nLCB7ICdjbGFzcyc6ICdwbHVzJyB9KQogICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRyPicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRkPicpKQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dHI+JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRkPicpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGQ+JykpCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxzcGFuPicsIHsgJ2NsYXNzJzogJ25hbWUgZnVuYycgfSkudGV4dCgnLW5ldy0nKSkKICAgICAgICAgICAgICAsICRwcGw9JCgnPGxpPicpCiAgICAgICAgICAgICAgICAuYXBwZW5kKCRwcGxhKQogICAgICAgICAgICAgICAgLmFwcGVuZFRvKCRwcCkKICAgICAgICAgICAgOwogICAgICAgIH0KICAgIH0KICAgIHZhciByZXNpemVBdXRob3JMaXN0PWZ1bmN0aW9uKCRmKXsKICAgICAgICAvLyBBZGp1c3QgQXV0aG9yTGlzdCdzIHNpemUgYW5kIGxvY2F0ZSBpdHMgcG9zaXRpb24KICAgICAgICBpZighJGZ8fCEkZi5sZW5ndGgpcmV0dXJuOwogICAgICAgIHZhciBmcm09JGYuZ2V0KDApOwogICAgICAgIHZhciB3aWR0aD13aW5kb3cuaVpoaWh1LkFuc3dlci5wcFdpZHRoCiAgICAgICAgICAsIGhlaWdodD0kd2luLmhlaWdodCgpLSRtYWluLm9mZnNldCgpLnRvcC0zLSRmLnBvc2l0aW9uKCkudG9wOwogICAgICAgIGlmKGZybS5zY3JvbGxIZWlnaHQ+aGVpZ2h0KXsKICAgICAgICAgICAgJGYuaGVpZ2h0KGhlaWdodCk7CiAgICAgICAgICAgIHdpZHRoKz0yMDsKICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgJGYuaGVpZ2h0KCcnKTsKICAgICAgICB9CiAgICAgICAgJGYud2lkdGgod2lkdGgpOwogICAgfTsKICAgIGlmKGlzTmFOKG51bUNvbGxhcHNlZENvdW50KSludW1Db2xsYXBzZWRDb3VudD0wOwogICAgaWYoJGxpc3RBbnN3ZXJzLmxlbmd0aHx8bnVtQ29sbGFwc2VkQ291bnQpewogICAgICAgIGlmKGl6aEF1dGhvckxpc3QpewogICAgICAgICAgICAkdW5vLmNzcyh7CiAgICAgICAgICAgICAgICAnZmxvYXQnOidub25lJwogICAgICAgICAgICAgICwgJ2xlZnQnOjktJHVuby53aWR0aCgpCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBpZighJGJ0bkNvbGxhcHNlZFN3aXRjaGVyLmxlbmd0aCYmIW51bUNvbGxhcHNlZENvdW50KQogICAgICAgICAgICAgICAgcmVzaXplQXV0aG9yTGlzdCgkZnJtKTsKICAgICAgICAgICAgJCgnPGRpdj4nLHsnY2xhc3MnOidtb2RhbC1kaWFsb2ctdGl0bGUnfSkuY3NzKHsKICAgICAgICAgICAgICAgICAgJ2JvcmRlci10b3AtbGVmdC1yYWRpdXMnOjAKICAgICAgICAgICAgfSkuaW5zZXJ0QmVmb3JlKCRwcFQpOwogICAgICAgICAgICAkdW5vLm1vdXNlb3ZlcihmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcmVzaXplQXV0aG9yTGlzdCgkKCcuZnJhbWUnLHRoaXMpKTsKICAgICAgICAgICAgICAgICQodGhpcykuY3NzKCdsZWZ0JywnMCcpOwogICAgICAgICAgICB9KS5tb3VzZW91dChmdW5jdGlvbigpewogICAgICAgICAgICAgICAgJCh0aGlzKS5jc3MoJ2xlZnQnLDktJCh0aGlzKS53aWR0aCgpKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGlmKHdpbmRvdy5pWmhpaHUuQW5zd2VyLl9lKXsKICAgICAgICAgICAgICAgICR1bm8uY2hpbGRyZW4oJy5tZVQnKS5jc3MoJ2Rpc3BsYXknLDA+d2luZG93LmlaaGlodS5BbnN3ZXIuX2Uub2Zmc2V0VG9wLSRmcm0uc2Nyb2xsVG9wKCk/Jyc6J25vbmUnKTsKICAgICAgICAgICAgICAgICR1bm8uY2hpbGRyZW4oJy5tZUInKS5jc3MoJ2Rpc3BsYXknLCRmcm0uaGVpZ2h0KCk8d2luZG93LmlaaGlodS5BbnN3ZXIuX2Uub2Zmc2V0VG9wLSRmcm0uc2Nyb2xsVG9wKCkrd2luZG93LmlaaGlodS5BbnN3ZXIuX2Uub2Zmc2V0SGVpZ2h0PycnOidub25lJyk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYoJGJ0bkNvbGxhcHNlZFN3aXRjaGVyLmxlbmd0aCl7CiAgICAgICAgICAgIGlmKG51bUNvbGxhcHNlZENvdW50PjApewogICAgICAgICAgICAgICAgJCgnI3poLXF1ZXN0aW9uLWNvbGxhcHNlZC13cmFwJykuc2hvdygpLmJpbmQoJ0RPTU5vZGVJbnNlcnRlZCcsZnVuY3Rpb24oZXZlbnQpewogICAgICAgICAgICAgICAgICAgIHZhciAkYT0kKGV2ZW50LnRhcmdldCk7CiAgICAgICAgICAgICAgICAgICAgaWYoJGEuaXMoJy56bS1pdGVtLWFuc3dlcicpKXsKICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmlaaGlodS5BbnN3ZXIucHJvY2Vzc0Fuc3dlcigkYSwkcHAKICAgICAgICAgICAgICAgICAgICAgICAgICAsICRib2R5LmF0dHIoJ2l6aEF1dGhvclJlYXInKT09JzEnCiAgICAgICAgICAgICAgICAgICAgICAgICAgLCAkYm9keS5hdHRyKCdpemhBdXRob3JMaXN0Jyk9PScxJwogICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgY291bnQgPSAkKCcuem0taXRlbS1hbnN3ZXJbaXpoX3Byb2Nlc3NlZD0xXScsJyN6aC1xdWVzdGlvbi1jb2xsYXBzZWQtd3JhcCcpLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoY291bnQ9PW51bUNvbGxhcHNlZENvdW50KXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2l6ZUF1dGhvckxpc3QoJGZybSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICAkYnRuQ29sbGFwc2VkU3dpdGNoZXJbMF0uY2xpY2soKTsKICAgICAgICB9CiAgICB9CgogICAgJCgnI3poLXF1ZXN0aW9uLWFuc3dlci13cmFwJykuYmluZCgnRE9NTm9kZUluc2VydGVkJyxmdW5jdGlvbihldmVudCl7CiAgICAgICAgdmFyICRuYT0kKGV2ZW50LnRhcmdldCkuZmlsdGVyKCcuem0taXRlbS1hbnN3ZXInKTsKICAgICAgICBpZigkbmEubGVuZ3RoKXsKICAgICAgICAgICAgd2luZG93LmlaaGlodS5BbnN3ZXIucHJvY2Vzc0Fuc3dlcigkbmEsJHBwCiAgICAgICAgICAgICAgLCAkYm9keS5hdHRyKCdpemhBdXRob3JSZWFyJyk9PScxJwogICAgICAgICAgICAgICwgJGJvZHkuYXR0cignaXpoQXV0aG9yTGlzdCcpPT0nMScKICAgICAgICAgICAgKTsKICAgICAgICB9CiAgICB9KTsKICAgIC8vY29uc29sZS5sb2coKG5ldyBEYXRlKCkpLmdldFRpbWUoKSk7CgogICAgdmFyICRjbT0kKCcuem0tY29tbWVudC1ib3gnLCRxdWVzdGlvbldyYXApOwogICAgaWYoJGNtLmxlbmd0aCAmJiAkY20uaXMoJzp2aXNpYmxlJykpewogICAgICAgIHZhciBmb2N1c05hbWUgPSBpWmhpaHUuQ29tbWVudC5zY3JvbGxGb2N1c0NvbW1lbnRPblBhZ2VMb2FkKCRjbSk7CiAgICAKICAgICAgICBpWmhpaHUuQ29tbWVudC5tZXRhU2Nyb2xsVG9WaWV3Qm90dG9tKCRjbS5jbG9zZXN0KCcuem0taXRlbS1tZXRhJyksZnVuY3Rpb24oKXsKICAgICAgICAgICAgaVpoaWh1LkNvbW1lbnQucHJvY2Vzc0NvbW1lbnQoJGNtLCBmb2N1c05hbWUpOwogICAgICAgIH0pOwogICAgfQogIH0KCi8qKgogKiDphY3nva7nlYzpnaIKICovCgogICAgdmFyICRidG5TZXR0aW5ncyA9ICQoJzxsaT4nKQogICAgICAgICAgICAuYXBwZW5kKCQoJzxhPicsIHsgaHJlZjogJ2phdmFzY3JpcHQ6dm9pZCgwKTsnLCB0YWJpbmRleDogJy0xJyB9KQogICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8aT4nLCB7ICdjbGFzcyc6ICd6Zy1pY29uIHpnLWljb24tZGQtc2V0dGluZ3MgaXpoaWh1LXNldHRpbmdzJyB9KSkKICAgICAgICAgICAgICAgIC5hcHBlbmQoJ2laaGlodScpCiAgICAgICAgICAgICkuY2xpY2soZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHZhciAkc2V0dGluZ3MgPSAkKCcjaXpoLWRsZy1zZXR0aW5ncycpCiAgICAgICAgICAgICAgICAkKCcubW9kYWwtZGlhbG9nLWJnJykuc2hvdygpCiAgICAgICAgICAgICAgICAkKCcuaXpoLW9wdGlvbicsICcjaXpoLWRsZy1zZXR0aW5ncycpLmVhY2goZnVuY3Rpb24oaSwgZSl7CiAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IGUuZ2V0QXR0cmlidXRlKCduYW1lJykKICAgICAgICAgICAgICAgICAgICAgICwgdmFsdWUgPSB1dGlscy5nZXRDZmcoa2V5KQogICAgICAgICAgICAgICAgICAgICAgLCAkZSA9ICQoZSkKICAgICAgICAgICAgICAgICAgICBpZiAoJGUuaXMoJ2lucHV0OmNoZWNrYm94JykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYodmFsdWUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKGUpLmlDaGVjaygnY2hlY2snKQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJGUuaXMoJ3NlbGVjdCcpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGUudmFsdWUgPSB2YWx1ZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAkc2V0dGluZ3MuY3NzKHsKICAgICAgICAgICAgICAgICAgICAnei1pbmRleCc6Jzk5JwogICAgICAgICAgICAgICAgICAsICdwb3NpdGlvbic6J2ZpeGVkJwogICAgICAgICAgICAgICAgICAsICd0b3AnOiAoJHdpbi5oZWlnaHQoKSAtICRzZXR0aW5ncy5oZWlnaHQoKSkgLyAyCiAgICAgICAgICAgICAgICAgICwgJ2xlZnQnOiAoJHdpbi53aWR0aCgpIC0gJHNldHRpbmdzLndpZHRoKCkpIC8gMgogICAgICAgICAgICAgICAgfSkuZmFkZUluKCdzbG93JykKICAgICAgICAgICAgfSkuaW5zZXJ0QmVmb3JlKCQoJ3VsI3RvcC1uYXYtcHJvZmlsZS1kcm9wZG93biBsaTpsYXN0JykpCiAgICAgICwgJGRsZ1NldHRpbmdzID0gJCgnPGRpdj4nLCB7IGlkOiAnaXpoLWRsZy1zZXR0aW5ncycsICdjbGFzcyc6ICdtb2RhbC1kaWFsb2cnLCB0YWJpbmRleDogJzAnLCBzdHlsZTogJ2Rpc3BsYXk6bm9uZTt3aWR0aDo2MDBweCd9KQogICAgICAgICAgICAuYXBwZW5kKCQoJzxkaXY+JywgeyAnY2xhc3MnOiAnbW9kYWwtZGlhbG9nLXRpdGxlIG1vZGFsLWRpYWxvZy10aXRsZS1kcmFnZ2FibGUnIH0pCiAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxzcGFuPicsIHsgJ2NsYXNzJzogJ21vZGFsLWRpYWxvZy10aXRsZS10ZXh0JyB9KS50ZXh0KCfphY3nva7pgInpobknKSkKICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHNwYW4+JywgewogICAgICAgICAgICAgICAgICAgICdjbGFzcyc6ICdtb2RhbC1kaWFsb2ctdGl0bGUtY2xvc2UnCiAgICAgICAgICAgICAgICAgICwgY2xpY2s6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5tb2RhbC1kaWFsb2ctYmcnKS5oaWRlKCkKICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2l6aC1kbGctc2V0dGluZ3MnKS5maXJzdCgpLmhpZGUoKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pKQogICAgICAgICAgICApCiAgICAgICAgICAgIC5hcHBlbmQoJCgnPGRpdj4nLCB7ICdjbGFzcyc6ICdtb2RhbC1kaWFsb2ctY29udGVudCcgfSkKICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGRpdj4nLCB7fSkKICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxkaXY+JywgeyAnY2xhc3MnOiAnemctc2VjdGlvbicgfSkKICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGFibGU+JywgeyAnY2xhc3MnOiAndF9zZXRfdGInLCBib3JkZXI6IDAsIGNlbGxzcGFjaW5nOiAwLCBjZWxscGFkZGluZzogNSwgd2lkdGg6ICcxMDAlJyB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGhlYWQ+Jywge30pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dHI+Jywge30pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRkPicsIHsgY29sc3BhbjogNiwgYWxpZ246ICdsZWZ0JyB9KS50ZXh0KCfvvIjmm7TmlLnlkI7orr7nva7lsIbnq4vliLvkv53lrZjvvIzkvYblj6rmnInlvZPpobXpnaLlho3mrKHmiZPlvIDml7bmiY3kvJrnlJ/mlYjvvIknKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJLnByZXBlbmQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAkJJCgnPGI+JykudGV4dCgn5Yqf6IO95byA5YWzJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJCSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRib2R5PicsIHt9KQovKgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRyPicsIHt9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nLCB7IGNvbHNwYW46IDQsIGFsaWduOiAnbGVmdCcgfSkudGV4dCgn5Zyo6aaW6aG155u05o6l5rWP6KeI5bi45Y676K+d6aKYJykpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRkPicsIHsgYWxpZ246ICdyaWdodCd9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8aT4nLCB7ICdjbGFzcyc6ICdpY29uIGljb24taGVscCcsICdkYXRhLXRpcCc6ICIifSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGQ+JywgeyBhbGlnbjogJ3JpZ2h0J30pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxpbnB1dD4nLCB7IHR5cGU6ICJjaGVja2JveCIsICdjbGFzcyc6ICJpemgtb3B0aW9uIiwgaWQ6ICJpWmhpaHVfc2V0SG9tZVRvcGljcyIsIG5hbWU6ICJIb21lVG9waWNzIiB9KSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKKi8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0cj4nLCB7fSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGQ+JywgeyBjb2xzcGFuOiA0LCBhbGlnbjogJ2xlZnQnIH0pLnRleHQoJ+aUueWPmOe9kemhteagt+W8j+WkluingicpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nLCB7IGFsaWduOiAncmlnaHQnfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGk+JywgeyAnY2xhc3MnOiAnaWNvbiBpY29uLWhlbHAnLCAnZGF0YS10aXAnOiAicyR0JCog6aaW6aG16ZqQ6JeP5aSn5aS05YOPPGJyLz4qIOe8qei/m+aKleelqOaMiemSru+8iOmXrumimC/lm57nrZTpobXvvIk8YnIvPiog5oyJ6ZKu5Zu+5qCH5Yqo55S7ICJ9KSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nLCB7IGFsaWduOiAncmlnaHQnfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGlucHV0PicsIHsgdHlwZTogImNoZWNrYm94IiwgJ2NsYXNzJzogIml6aC1vcHRpb24iLCBpZDogImlaaGlodV9zZXRIb21lTGF5b3V0IiwgbmFtZTogIkhvbWVMYXlvdXQiIH0pKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRyPicsIHt9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nLCB7IGNvbHNwYW46IDQsIGFsaWduOiAnbGVmdCcgfSkudGV4dCgn6Ieq5Yqo5pS26LW35a+86Iiq5qCPJykpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRkPicsIHsgYWxpZ246ICdyaWdodCd9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8aT4nLCB7ICdjbGFzcyc6ICdpY29uIGljb24taGVscCcsICdkYXRhLXRpcCc6ICJzJHQkKiDmu5rliqjpobXpnaLoh7PkuIvmlrnml7bvvIzoh6rliqjmlLbotbfpobbpg6jlr7zoiKrmoI8gIn0pKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRkPicsIHsgYWxpZ246ICdyaWdodCd9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8aW5wdXQ+JywgeyB0eXBlOiAiY2hlY2tib3giLCAnY2xhc3MnOiAiaXpoLW9wdGlvbiIsIGlkOiAiaVpoaWh1X3NldFRvcE5hdkF1dG9Gb2xkIiwgbmFtZTogIlRvcE5hdkF1dG9Gb2xkIiB9KSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0cj4nLCB7fSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGQ+JywgeyBjb2xzcGFuOiA0LCBhbGlnbjogJ2xlZnQnIH0pLnRleHQoJ+iwg+aVtOmmlumhteOAjOaWsOWKqOaAgeOAjeaPkOmGkuaMiemSricpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nLCB7IGFsaWduOiAncmlnaHQnfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGk+JywgeyAnY2xhc3MnOiAnaWNvbiBpY29uLWhlbHAnLCAnZGF0YS10aXAnOiAicyR0JOaMquWIsCBUaW1lbGluZSDlj7PkuIrop5I8YnIvPuS4juagh+mimOOAjOacgOaWsOWKqOaAgeOAjeW5s+ihjCJ9KSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nLCB7IGFsaWduOiAncmlnaHQnfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGlucHV0PicsIHsgdHlwZTogImNoZWNrYm94IiwgJ2NsYXNzJzogIml6aC1vcHRpb24iLCBpZDogImlaaGlodV9zZXRIb21lTm90aSIsIG5hbWU6ICJIb21lTm90aSIgfSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dHI+Jywge30pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRkPicsIHsgY29sc3BhbjogNCwgYWxpZ246ICdsZWZ0JyB9KS50ZXh0KCflvIDlkK/jgIzpppbpobXliIbmoI/jgI0nKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGQ+JywgeyBhbGlnbjogJ3JpZ2h0J30pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxpPicsIHsgJ2NsYXNzJzogJ2ljb24gaWNvbi1oZWxwJywgJ2RhdGEtdGlwJzogInMkdCTlsIbpppbpobXliqjmgIHliIbnsbvljZXni6zmmL7npLrvvJo8YnIvPumXrumimOOAgeWbnuetlOOAgeS4k+agjyJ9KSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nLCB7IGFsaWduOiAncmlnaHQnfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGlucHV0PicsIHsgdHlwZTogImNoZWNrYm94IiwgJ2NsYXNzJzogIml6aC1vcHRpb24iLCBpZDogImlaaGlodV9zZXRIb21lRmVlZHNDb2x1bW5zIiwgbmFtZTogIkhvbWVGZWVkc0NvbHVtbnMiIH0pKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRyPicsIHt9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nLCB7IGNvbHNwYW46IDQsIGFsaWduOiAnbGVmdCcgfSkudGV4dCgn5bCG55So5oi35L+h5oGv5oyq5Yiw5Zue562U5LiL5pa5JykpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRkPicsIHsgYWxpZ246ICdyaWdodCd9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8aT4nLCB7ICdjbGFzcyc6ICdpY29uIGljb24taGVscCcsICdkYXRhLXRpcCc6ICIifSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGQ+JywgeyBhbGlnbjogJ3JpZ2h0J30pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxpbnB1dD4nLCB7IHR5cGU6ICJjaGVja2JveCIsICdjbGFzcyc6ICJpemgtb3B0aW9uIiwgaWQ6ICJpWmhpaHVfc2V0QXV0aG9yUmVhciIsIG5hbWU6ICJBdXRob3JSZWFyIiB9KSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0cj4nLCB7fSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGQ+JywgeyBhbGlnbjogJ2xlZnQnIH0pLnRleHQoJ+W8gOWQr+OAjOWPs+iIt+ivhOiuuuOAjScpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nLCB7IGFsaWduOiAncmlnaHQnfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGk+JywgeyAnY2xhc3MnOiAnaWNvbiBpY29uLWhlbHAnLCAnZGF0YS10aXAnOiAicyR0JOWcqOmhtemdouWPs+S+p+a1ruWKqOaYvuekuuaJk+W8gOeahOivhOiuuuWIl+ihqDxici8+5Zyo6aaW6aG144CB6Zeu6aKY44CB5Zue562U6aG15Lit55Sf5pWIIn0pKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRkPicsIHsgYWxpZ246ICdyaWdodCd9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8aW5wdXQ+JywgeyB0eXBlOiAiY2hlY2tib3giLCAnY2xhc3MnOiAiaXpoLW9wdGlvbiIsIGlkOiAiaVpoaWh1X3NldFJpZ2h0Q29tbWVudCIsIG5hbWU6ICJTaG93Q29tbWVudCIgfSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGQ+JywgeyB3aWR0aDogMSwgbm93cmFwOiAnbm93cmFwJywgYWxpZ246ICdsZWZ0JyB9KS50ZXh0KCflhbPpl63ml7boh6rliqjljbflsY/oh7Plr7nlupTmnaHnm64nKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGQ+JywgeyBhbGlnbjogJ3JpZ2h0J30pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxpPicsIHsgJ2NsYXNzJzogJ2ljb24gaWNvbi1oZWxwJywgJ2RhdGEtdGlwJzogInMkdCTku4Xlr7nlj7PoiLfor4TorrrnlJ/mlYgifSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGQ+JywgeyBhbGlnbjogJ3JpZ2h0J30pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxpbnB1dD4nLCB7IHR5cGU6ICJjaGVja2JveCIsICdjbGFzcyc6ICJpemgtb3B0aW9uIiwgaWQ6ICJpWmhpaHVfc2V0UmlnaHRDb21tZW50X0F1dG9TY3JvbGxQYWdlV2hlbkNsb3NpbmciLCBuYW1lOiAiUmlnaHRDb21tZW50X0F1dG9TY3JvbGxQYWdlV2hlbkNsb3NpbmciIH0pKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRyPicsIHt9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nLCB7IGNvbHNwYW46IDQsIGFsaWduOiAnbGVmdCcgfSkudGV4dCgn5byA5ZCv44CM5b+r6YCf5bGP6JS944CN77yI5Yqg5YWl6buR5ZCN5Y2VL+WPlua2iOWFs+azqO+8ieWKn+iDvScpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nLCB7IGFsaWduOiAncmlnaHQnfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGk+JywgeyAnY2xhc3MnOiAnaWNvbiBpY29uLWhlbHAnLCAnZGF0YS10aXAnOiAicyR0JOWcqOi1nuWQjOWIl+ihqOOAgeivhOiuuuWIl+ihqOS4reS9v+eUqCJ9KSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nLCB7IGFsaWduOiAncmlnaHQnfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGlucHV0PicsIHsgdHlwZTogImNoZWNrYm94IiwgJ2NsYXNzJzogIml6aC1vcHRpb24iLCBpZDogImlaaGlodV9zZXRRdWlja0Jsb2NrIiwgbmFtZTogIlF1aWNrQmxvY2siIH0pKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRyPicsIHt9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nLCB7IGNvbHNwYW46IDQsIGFsaWduOiAnbGVmdCcgfSkudGV4dCgn5byA5ZCv44CM5b+r6YCf5pS26JeP44CN6I+c5Y2VJykpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRkPicsIHsgYWxpZ246ICdyaWdodCd9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8aT4nLCB7ICdjbGFzcyc6ICdpY29uIGljb24taGVscCcsICdkYXRhLXRpcCc6ICJzJHQk6byg5qCH56e75LiK44CM5pS26JeP44CN5oyJ6ZKu5pe25pi+56S6In0pKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRkPicsIHsgYWxpZ246ICdyaWdodCd9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8aW5wdXQ+JywgeyB0eXBlOiAiY2hlY2tib3giLCAnY2xhc3MnOiAiaXpoLW9wdGlvbiIsIGlkOiAiaVpoaWh1X3NldFF1aWNrRmF2byIsIG5hbWU6ICJRdWlja0Zhdm8iIH0pKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRyPicsIHt9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nLCB7IGNvbHNwYW46IDQsIGFsaWduOiAnbGVmdCcgfSkudGV4dCgn5byA5ZCv44CM5Zue562U55uu5b2V44CNJykpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRkPicsIHsgYWxpZ246ICdyaWdodCd9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8aT4nLCB7ICdjbGFzcyc6ICdpY29uIGljb24taGVscCcsICdkYXRhLXRpcCc6ICJzJHQk5Zyo6Zeu6aKY6aG16Z2i5bem5L6n5o6p6JeP77yM6byg5qCH56e75LiK5pe25bGV5byAPGJyLz7lubblnKjlj7PkvqfljbPml7bmmL7npLrlm57nrZTpooTop4gifSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGQ+JywgeyBhbGlnbjogJ3JpZ2h0J30pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxpbnB1dD4nLCB7IHR5cGU6ICJjaGVja2JveCIsICdjbGFzcyc6ICJpemgtb3B0aW9uIiwgaWQ6ICJpWmhpaHVfc2V0QXV0aG9yTGlzdCIsIG5hbWU6ICJBdXRob3JMaXN0IiB9KSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0cj4nLCB7fSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGQ+JywgeyBjb2xzcGFuOiA0LCBhbGlnbjogJ2xlZnQnIH0pLnRleHQoJ+mAieaLqeOAjOWklumDqOaQnOe0ouW8leaTjuOAjScpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nLCB7IGFsaWduOiAncmlnaHQnfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGk+JywgeyAnY2xhc3MnOiAnaWNvbiBpY29uLWhlbHAnLCAnZGF0YS10aXAnOiAicyR0JOS9oOaHgueahCJ9KSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzx0ZD4nLCB7IGFsaWduOiAncmlnaHQnfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHNlbGVjdD4nLCB7IHR5cGU6ICJjaGVja2JveCIsICdjbGFzcyc6ICJpemgtb3B0aW9uIiwgaWQ6ICJpWmhpaHVfc2V0U2VhcmNoRW5naW5lT3V0c2lkZSIsIG5hbWU6ICJTZWFyY2hFbmdpbmVPdXRzaWRlIn0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8b3B0aW9uPicsIHsgdmFsdWU6J2dvb2dsZScgfSkudGV4dCgnR29vZ2xlJykpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8b3B0aW9uPicsIHsgdmFsdWU6J2JhaWR1JyB9KS50ZXh0KCfnmb7luqYnKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxkaXY+JywgeyAnY2xhc3MnOiAnemctbGVmdCcgfSkKICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgn5b2T5YmN54mI5pys77yaJyt2ZXJzaW9uKyfvvJsnKQogICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCfmnIDlkI7mm7TmlrDvvJonK3VwZGF0ZURhdGUpCiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGJyPicpKQogICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCfliLbkvZzvvJonKQogICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxhPicsIHsgJ2RhdGEtdGlwJzogInAkdCR1bm9nengiLCBocmVmOiAiL3Blb3BsZS91bm9nengiIH0pLnRleHQoJ0DpkqLnm4Xpg63lrZAnKSkKICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgn77yMJykKICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8YT4nLCB7ICdkYXRhLXRpcCc6ICJwJHQkbGl1eW9uZzI1IiwgaHJlZjogIi9wZW9wbGUvbGl1eW9uZzI1IiB9KS50ZXh0KCdA5aSp54yqKOWImOWLhyknKSkKICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgn77yMJykKICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8YT4nLCB7ICdkYXRhLXRpcCc6ICJwJHQkbHVveHIiLCBocmVmOiAiL3Blb3BsZS9sdW94ciIgfSkudGV4dCgnQHl1a2lyb2NrJykpCiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJ++8jCcpCiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGE+JywgeyAnZGF0YS10aXAnOiAicCR0JG1vcmxheSIsIGhyZWY6ICIvcGVvcGxlL21vcmxheSIgfSkudGV4dCgnQOWiqOejiicpKQogICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxicj4nKSkKICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgn5oSf6LCi77yaJykKICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8YT4nLCB7ICdkYXRhLXRpcCc6ICJwJHQkUGV0ZXJEZW5nIiwgaHJlZjogIi9wZW9wbGUvUGV0ZXJEZW5nIiB9KS50ZXh0KCdA6YKT5paH5Y2aJykpCiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJ++8jCcpCiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGE+JywgeyAnZGF0YS10aXAnOiAicCR0JGNha3ZmY3d6IiwgaHJlZjogIi9wZW9wbGUvY2FrdmZjd3oiIH0pLnRleHQoJ0DmsLTkupHpgLgnKSkKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8ZGl2PicsIHsgJ2NsYXNzJzogJ3ptLWNvbW1hbmQnIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGE+JywgeyBpZDogJ2l6aFJlZnJlc2gnLCAnY2xhc3MnOiAnemctYnRuLWJsdWUnLCBocmVmOiAnamF2YXNjcmlwdDp2b2lkKDApOycgfSkudGV4dCgn5Yi35paw572R6aG1JykpCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICApLmFwcGVuZFRvKF9kb2MuYm9keSkuZHJhZ2dhYmxlKHtoYW5kbGU6ICcubW9kYWwtZGlhbG9nLXRpdGxlLWRyYWdnYWJsZSd9KQoKICAgICQoJy5pemgtb3B0aW9uJywgJGRsZ1NldHRpbmdzKS5lYWNoKGZ1bmN0aW9uKGksIGUpewogICAgICAgIHZhciBrZXkgPSBlLmdldEF0dHJpYnV0ZSgnbmFtZScpCiAgICAgICAgICAsICRjaGsgPSAkKGUpLmZpbHRlcignaW5wdXQ6Y2hlY2tib3gnKS5pQ2hlY2soewogICAgICAgICAgICAgICAgY2hlY2tib3hDbGFzczogJ2ljaGVja2JveF9zcXVhcmUtYmx1ZScKICAgICAgICAgICAgICAsIGluY3JlYXNlQXJlYTogJzIwJScgLy8gb3B0aW9uYWwKICAgICAgICAgICAgfSkuYmluZCgnaWZDaGFuZ2VkJywgZnVuY3Rpb24oZXZlbnQpewogICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5jaGVja2VkCiAgICAgICAgICAgICAgICB1dGlscy5zZXRDZmcoa2V5LCB2YWx1ZSkKICAgICAgICAgICAgfSkKICAgICAgICAgICwgJHNlbCA9ICQoZSkuZmlsdGVyKCdzZWxlY3QnKS5iaW5kKCdjaGFuZ2UnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHV0aWxzLnNldENmZyhrZXksIHRoaXMudmFsdWUpCiAgICAgICAgICAgIH0pCiAgICB9KQogICAgJCgnI2l6aFJlZnJlc2gnKS5jbGljayhmdW5jdGlvbigpewogICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpCiAgICB9KQoKLyoKICog6K6+572uLeWxj+iUvQogKi8KaWYgKHBhZ2VJcy5TZXR0aW5nc0ZpbHRlcil7CiAgICB2YXIgYWxsPVtdCiAgICAgICwgJHNlY0Jsb2NrZWRVc2VycyA9ICQoJyNzZWN0aW9uLWJsb2NrZWQtdXNlcnMnKQogICAgICAsICRzZWNCbG9ja2VkVXNlcnNUaXRsZSA9ICRzZWNCbG9ja2VkVXNlcnMuY2hpbGRyZW4oJy5zZXR0aW5ncy1zZWN0aW9uLXRpdGxlOmZpcnN0JykuY2hpbGRyZW4oJ2gyOmZpcnN0JykKICAgICAgLCAkcG5sVW5CbG9ja2VkVXNlcnMgPSAkKCc8ZGl2PicpLmFwcGVuZFRvKCRzZWNCbG9ja2VkVXNlcnNUaXRsZSkuY3NzKHsKICAgICAgICAgICAgZmxvYXQ6ICdyaWdodCcKICAgICAgICB9KQogICAgICAsICRsYkZpbHRlckJsb2NrZWRVc2VycyA9ICQoJzxsYWJlbC8+JykuYXBwZW5kVG8oJHBubFVuQmxvY2tlZFVzZXJzKS5jc3MoewogICAgICAgICAgICBmbG9hdDogJ2xlZnQnCiAgICAgICAgfSkKICAgICAgLCAkdGJGaWx0ZXJCbG9ja2VkVXNlcnMgPSAkKCc8aW5wdXQvPicsIHsKICAgICAgICAgICAgJ2NsYXNzJzogJ3pnLWZvcm0tdGV4dC1pbnB1dCB6Zy1tcjE1JwogICAgICAgICAgLCBwbGFjZWhvbGRlcjogJ+eUqOaIt+WQjeaIluaYteensCcKICAgICAgICB9KS5hcHBlbmRUbygkcG5sVW5CbG9ja2VkVXNlcnMpLm9uKCdrZXl1cCcsIGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICAgICAgdmFyIGt3PXRoaXMudmFsdWUKICAgICAgICAgICAgICAsIG49MAogICAgICAgICAgICAgICwgJGxpc3RCbG9ja2VkVXNlcnM9JHNlY0Jsb2NrZWRVc2Vycy5maW5kKCcuYmxvY2tlZC11c2VycyA+IC5pdGVtID4gLmJvZHkgPiBhJykuZWFjaChmdW5jdGlvbihpLGUpewogICAgICAgICAgICAgICAgICAgIHZhciAkYSA9ICQoZSkKICAgICAgICAgICAgICAgICAgICAgICwgaHJlZiA9IGUuZ2V0QXR0cmlidXRlKCdocmVmJykgfHwgJycKICAgICAgICAgICAgICAgICAgICAgICwgdGV4dCA9IGUuaW5uZXJIVE1MCiAgICAgICAgICAgICAgICAgICAgICAsIG5vdE1hdGNoID0gKGhyZWYuaW5kZXhPZihrdykgPCAwICYmIHRleHQuaW5kZXhPZihrdykgPCAwKQogICAgICAgICAgICAgICAgICAgIGlmKCFub3RNYXRjaCl7CiAgICAgICAgICAgICAgICAgICAgICAgIG4rKwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkYS5jbG9zZXN0KCcuaXRlbScpLmNzcygnZGlzcGxheScsIG5vdE1hdGNoID8gJ25vbmUnIDogJycpCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAkbGJGaWx0ZXJCbG9ja2VkVXNlcnMudGV4dChbbj9uKycgJzon5pegJywn5Lq65Yy56YWN77yaJ10uam9pbignJykpCiAgICAgICAgfSkuY3NzKHsKICAgICAgICAgICAgZmxvYXQ6ICdsZWZ0JwogICAgICAgIH0pLnRyaWdnZXIoJ2tleXVwJykKICAgICAgLCBmdW5jVW5ibG9jaz1mdW5jdGlvbigpewogICAgICAgICAgICBpZihhbGwubGVuZ3RoPT0wKXtyZXR1cm59CiAgICAgICAgICAgIHZhciBlPWFsbC5zaGlmdCgpCiAgICAgICAgICAgICQucG9zdCgnL3NldHRpbmdzL3VuYmxvY2t1c2VyJywgJC5wYXJhbSh7CiAgICAgICAgICAgICAgICBfeHNyZjogJCgnaW5wdXRbbmFtZT1feHNyZl0nKS52YWwoKQogICAgICAgICAgICAgICwgdWlkOiBlLmdldEF0dHJpYnV0ZSgnZGF0YS1pZCcpCiAgICAgICAgICAgIH0pKS5kb25lKGZ1bmN0aW9uKHJlc3VsdCl7CiAgICAgICAgICAgICAgICAkKGUpLnJlbW92ZSgpCiAgICAgICAgICAgIH0pLmZhaWwoZnVuY3Rpb24ocmVzdWx0KXsKICAgICAgICAgICAgICAgIGFsbC5wdXNoKGUpCiAgICAgICAgICAgIH0pLmFsd2F5cyhmdW5jdGlvbihyZXN1bHQpewogICAgICAgICAgICAgICAgJGxiRmlsdGVyQmxvY2tlZFVzZXJzLnRleHQoW2FsbC5sZW5ndGg/YWxsLmxlbmd0aCsnICc6J+aXoCcsJ+S6uuWMuemFje+8middLmpvaW4oJycpKQogICAgICAgICAgICAgICAgZnVuY1VuYmxvY2soKQogICAgICAgICAgICB9KQogICAgICAgIH0KICAgICAgLCBoPSR0YkZpbHRlckJsb2NrZWRVc2Vycy5vdXRlckhlaWdodCgpCiAgICAgICwgJGJ0VW5CbG9ja2VkVXNlcnMgPSAkKCc8aW5wdXQvPicsIHsKICAgICAgICAgICAgJ2NsYXNzJzogJ3pnLWJ0biB6Zy1idG4tdW5mb2xsb3cnCiAgICAgICAgICAsIHR5cGU6ICdidXR0b24nCiAgICAgICAgICAsIHZhbHVlOiAn5Y+W5raI5bGP6JS9JwogICAgICAgIH0pLmFwcGVuZFRvKCRwbmxVbkJsb2NrZWRVc2Vycykub24oJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpewogICAgICAgICAgICAkKCcjc2VjdGlvbi1ibG9ja2VkLXVzZXJzID4gLnNldHRpbmdzLWl0ZW0gPiAuc2V0dGluZ3MtaXRlbS1jb250ZW50ID4gLmJsb2NrZWQtdXNlcnMgPiAuaXRlbScpLmVhY2goZnVuY3Rpb24oaSxlKXsKICAgICAgICAgICAgICAgIHZhciAkZSA9ICQoZSkKICAgICAgICAgICAgICAgIGlmKCRlLmlzKCc6dmlzaWJsZScpKXsKICAgICAgICAgICAgICAgICAgICBhbGwucHVzaChlKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICAgICBmdW5jVW5ibG9jaygpCiAgICAgICAgfSkuY3NzKHsKICAgICAgICAgICAgZmxvYXQ6ICdsZWZ0JwogICAgICAgIH0pLmhlaWdodChoKQogICAgJGxiRmlsdGVyQmxvY2tlZFVzZXJzLmNzcygnbGluZS1oZWlnaHQnLCBoKydweCcpCn0KCnZhciBmaXJzdFJ1biA9IHBhcnNlSW50KHV0aWxzLmdldFZhbHVlKCdpemhfZnInLCcxJykpOwoKZnVuY3Rpb24gX0ZSc2hvdygpewppZihmaXJzdFJ1bj4wICYmIGRvY3VtZW50LmRvbWFpbj09J3poaWh1LmNvbScpewogICAgdmFyIHRib3hsZWZ0PTA7CiAgICB2YXIgYWNjaXRlbTE9ICQoJyN6aC10b3AtaW5uZXIgZGl2LnRvcC1uYXYtcHJvZmlsZSAuenUtdG9wLW5hdi11c2VyaW5mbycpOwogICAgaWYoYWNjaXRlbTEubGVuZ3RoPjApewogICAgICAgIHRib3hsZWZ0ID0gYWNjaXRlbTEub2Zmc2V0KCkubGVmdDsKICAgIH0KICAgIGlmKHRib3hsZWZ0PjApewogICAgICAgICQoJzxkaXY+JywgeyBpZDogJ2laaGlodV90Ym94JywgJ2NsYXNzJzogJ3RfZnJzaG93JyB9KS5hcHBlbmRUbygnYm9keS56aGknKS5oaWRlKCkKICAgICAgICAgICAgLmFwcGVuZCgkKCc8ZGl2PicsIHsgJ2NsYXNzJzogJ3RfdHh0c2hvdyB0X3Rib3gnIH0pCiAgICAgICAgICAgICAgICAuYXBwZW5kKCfmhJ/osKLkvb/nlKgnKQogICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8Yj4nKS50ZXh0KCdpWmhpaHUnKSkKICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGJyIC8+JykpCiAgICAgICAgICAgICAgICAuYXBwZW5kKCfmgqjlj6/pgJrov4foj5zljZXjgJBpWmhpaHXjgJHlr7nlip/og73ov5vooYzorr7nva4nKQogICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8YnIgLz4nKSkKICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHM+JykKICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJzxpPicpKQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICApOwogICAgICAgICQoJyNpWmhpaHVfdGJveCcpLmNzcygnbGVmdCcsdGJveGxlZnQtMTAwKS5zaG93KCkubW91c2VlbnRlcihmdW5jdGlvbigpewogICAgICAgICAgICB1dGlscy5zZXRWYWx1ZSgnaXpoX2ZyJywnMCcpOwogICAgICAgICAgICAvL19NZW51KCk7CiAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZSgpOwogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICB9Cn0KICAgIApzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CiAgICBfRlJzaG93KCk7Cn0sMTAwMCk7CgoKICBjb25zb2xlLmxvZygnaVpoaWh1ICcrdmVyc2lvbisnIHN0YXJ0ZWQuJyk7CiAgLy9jb25zb2xlLmxvZyh3aW5kb3cuaVpoaWh1KTsKICAvL2NvbnNvbGUubG9nKChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkpOwovL30pOwo="},{"name":"anti-redirect (typescript)","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["*"],"orig_excludes":[],"orig_includes":["*www.baidu.com*","*tieba.baidu.com*","*v.baidu.com*","*www.google.*","*docs.google.*","*encrypted.google.com*","*www.so.com*","*www.zhihu.com*","*daily.zhihu.com*","*zhuanlan.zhihu.com*","*weibo.com*","*twitter.com*","*www.sogou.com*","*juejin.im*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":["baidu.com","bjyq.com.cn","163.com","hdzc.net","bjtvnews.com","sohu.com","qq.com","v4.cc"],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1512981252007},"enabled":true,"position":7,"file_url":"https://greasyfork.org/scripts/11915-anti-redirect-typescript/code/anti-redirect%20(typescript).user.js","uuid":"940abf92-5596-46e1-a189-b613f3d47cee","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgICAgIGFudGktcmVkaXJlY3QgKHR5cGVzY3JpcHQpCi8vIEBhdXRob3IgICAgICAgICAgICBBeGV0cm95Ci8vIEBjb2xsYWJvcmF0b3IgICAgICBBeGV0cm95Ci8vIEBkZXNjcmlwdGlvbiAgICAgICBHTeiEmuacrCwg5Y676Zmk5ZCE5pCc57Si5byV5pOOL+W4uOeUqOe9keermeeahOmHjeWumuWQkQovLyBAdmVyc2lvbiAgICAgICAgICAgMi4zLjEKLy8gQHVwZGF0ZSAgICAgICAgICAgIDIwMTctMDktMTkgMTc6NTk6NTQKLy8gQGdyYW50ICAgICAgICAgICAgIEdNX3htbGh0dHBSZXF1ZXN0Ci8vIEBpbmNsdWRlICAgICAgICAgICAqd3d3LmJhaWR1LmNvbSoKLy8gQGluY2x1ZGUgICAgICAgICAgICp0aWViYS5iYWlkdS5jb20qCi8vIEBpbmNsdWRlICAgICAgICAgICAqdi5iYWlkdS5jb20qCi8vIEBpbmNsdWRlICAgICAgICAgICAqd3d3Lmdvb2dsZS4qCi8vIEBpbmNsdWRlICAgICAgICAgICAqZG9jcy5nb29nbGUuKgovLyBAaW5jbHVkZSAgICAgICAgICAgKmVuY3J5cHRlZC5nb29nbGUuY29tKgovLyBAaW5jbHVkZSAgICAgICAgICAgKnd3dy5zby5jb20qCi8vIEBpbmNsdWRlICAgICAgICAgICAqd3d3LnpoaWh1LmNvbSoKLy8gQGluY2x1ZGUgICAgICAgICAgICpkYWlseS56aGlodS5jb20qCi8vIEBpbmNsdWRlICAgICAgICAgICAqemh1YW5sYW4uemhpaHUuY29tKgovLyBAaW5jbHVkZSAgICAgICAgICAgKndlaWJvLmNvbSoKLy8gQGluY2x1ZGUgICAgICAgICAgICp0d2l0dGVyLmNvbSoKLy8gQGluY2x1ZGUgICAgICAgICAgICp3d3cuc29nb3UuY29tKgovLyBAaW5jbHVkZSAgICAgICAgICAgKmp1ZWppbi5pbSoKLy8gQGNvbm5lY3QgICAgICAgICAgICoKLy8gQGNvbXBhdGlibGUgICAgICAgIGNocm9tZSAg5a6M576O6L+Q6KGMCi8vIEBjb21wYXRpYmxlICAgICAgICBmaXJlZm94ICDlroznvo7ov5DooYwKLy8gQHN1cHBvcnRVUkwgICAgICAgIGh0dHA6Ly93d3cuYnVybmluZ2FsbC5jb20KLy8gQHJ1bi1hdCAgICAgICAgICAgIGRvY3VtZW50LXN0YXJ0Ci8vIEBjb250cmlidXRpb25VUkwgICB0cm95NDUwNDA5NDA1QGdtYWlsLmNvbXxhbGlwYXkuY29tCi8vIEBuYW1lc3BhY2UgICAgICAgICBodHRwczovL2dyZWFzeWZvcmsub3JnL3poLUNOL3VzZXJzLzM0MDAtYXhldHJveQovLyBAbGljZW5zZSAgICAgICAgICAgVGhlIE1JVCBMaWNlbnNlIChNSVQpOyBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUCi8vID09L1VzZXJTY3JpcHQ9PQoKLy8gR2l0aHVi5rqQ56CBOmh0dHBzOi8vZ2l0aHViLmNvbS9heGV0cm95L2FudGktcmVkaXJlY3QKCgovKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwCi8qKioqKiovIAkvLyBUaGUgbW9kdWxlIGNhY2hlCi8qKioqKiovIAl2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9OwovKioqKioqLwovKioqKioqLyAJLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb24KLyoqKioqKi8gCWZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHsKLyoqKioqKi8KLyoqKioqKi8gCQkvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGUKLyoqKioqKi8gCQlpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkgewovKioqKioqLyAJCQlyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0czsKLyoqKioqKi8gCQl9Ci8qKioqKiovIAkJLy8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSkKLyoqKioqKi8gCQl2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7Ci8qKioqKiovIAkJCWk6IG1vZHVsZUlkLAovKioqKioqLyAJCQlsOiBmYWxzZSwKLyoqKioqKi8gCQkJZXhwb3J0czoge30KLyoqKioqKi8gCQl9OwovKioqKioqLwovKioqKioqLyAJCS8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvbgovKioqKioqLyAJCW1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pOwovKioqKioqLwovKioqKioqLyAJCS8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWQKLyoqKioqKi8gCQltb2R1bGUubCA9IHRydWU7Ci8qKioqKiovCi8qKioqKiovIAkJLy8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGUKLyoqKioqKi8gCQlyZXR1cm4gbW9kdWxlLmV4cG9ydHM7Ci8qKioqKiovIAl9Ci8qKioqKiovCi8qKioqKiovCi8qKioqKiovIAkvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKQovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlczsKLyoqKioqKi8KLyoqKioqKi8gCS8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzOwovKioqKioqLwovKioqKioqLyAJLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHsKLyoqKioqKi8gCQlpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7Ci8qKioqKiovIAkJCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7Ci8qKioqKiovIAkJCQljb25maWd1cmFibGU6IGZhbHNlLAovKioqKioqLyAJCQkJZW51bWVyYWJsZTogdHJ1ZSwKLyoqKioqKi8gCQkJCWdldDogZ2V0dGVyCi8qKioqKiovIAkJCX0pOwovKioqKioqLyAJCX0KLyoqKioqKi8gCX07Ci8qKioqKiovCi8qKioqKiovIAkvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlcwovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7Ci8qKioqKiovIAkJdmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/Ci8qKioqKiovIAkJCWZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6Ci8qKioqKiovIAkJCWZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07Ci8qKioqKiovIAkJX193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpOwovKioqKioqLyAJCXJldHVybiBnZXR0ZXI7Ci8qKioqKiovIAl9OwovKioqKioqLwovKioqKioqLyAJLy8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07Ci8qKioqKiovCi8qKioqKiovIAkvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfXwovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gIiI7Ci8qKioqKiovCi8qKioqKiovIAkvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHMKLyoqKioqKi8gCXJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDQpOwovKioqKioqLyB9KQovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqKioqLyAoWwovKiAwICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKCnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHsKICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8CiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fAogICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9OwogICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7CiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTsKICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH0KICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7CiAgICB9Owp9KSgpOwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7IHZhbHVlOiB0cnVlIH0pOwp2YXIgZXZlbnRfZW1pdHRlcl9qc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNCk7CnZhciBQcm92aWRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHsKICAgIF9fZXh0ZW5kcyhQcm92aWRlciwgX3N1cGVyKTsKICAgIGZ1bmN0aW9uIFByb3ZpZGVyKCkgewogICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7CiAgICAgICAgX3RoaXMudGVzdCA9IC9leGFtcGxlLzsKICAgICAgICBfdGhpcy5BTlRJX1JFRElSRUNUX0RPTkVfRVZFTlQgPSAnYW50aS1yZWRpcmVjdC1kb25lJzsgLy8g55uR5ZCs5p+Q5LiqQeagh+etvu+8jOaIkOWKn+WOu+mZpOmHjeWumuWQkeS5i+WQjgogICAgICAgIF90aGlzLkFOVElfUkVESVJFQ1RfT1JJR0lOX0hSRUYgPSAnYW50aS1yZWRpcmVjdC1vcmlnaW4taHJlZic7CiAgICAgICAgX3RoaXMuY29uZmlnID0geyBkZWJ1ZzogZmFsc2UgfTsKICAgICAgICBfdGhpcy5vbihfdGhpcy5BTlRJX1JFRElSRUNUX0RPTkVfRVZFTlQsIGZ1bmN0aW9uIChhRWxlbWVudCwgcmVhbEhyZWYpIHsKICAgICAgICAgICAgaWYgKHJlYWxIcmVmKSB7CiAgICAgICAgICAgICAgICBfdGhpcy5jb25maWcuZGVidWcgJiYgKGFFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICdncmVlbicpOwogICAgICAgICAgICAgICAgYUVsZW1lbnQuc2V0QXR0cmlidXRlKF90aGlzLkFOVElfUkVESVJFQ1RfT1JJR0lOX0hSRUYsIGFFbGVtZW50LmhyZWYpOwogICAgICAgICAgICAgICAgYUVsZW1lbnQuaHJlZiA9IHJlYWxIcmVmOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIF90aGlzOwogICAgfQogICAgUHJvdmlkZXIucHJvdG90eXBlLnNldENvbmZpZyA9IGZ1bmN0aW9uIChjb25maWcpIHsKICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZzsKICAgICAgICByZXR1cm4gdGhpczsKICAgIH07CiAgICBQcm92aWRlci5wcm90b3R5cGUub25TY3JvbGwgPSBmdW5jdGlvbiAoYUVsZW1lbnRMaXN0KSB7IH07CiAgICBQcm92aWRlci5wcm90b3R5cGUub25Ib3ZlciA9IGZ1bmN0aW9uIChhRWxlbWVudCkgeyB9OwogICAgUHJvdmlkZXIucHJvdG90eXBlLm9uSW5pdCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gdGhpczsKICAgIH07CiAgICByZXR1cm4gUHJvdmlkZXI7Cn0oZXZlbnRfZW1pdHRlcl9qc18xLmRlZmF1bHQpKTsKZXhwb3J0cy5Qcm92aWRlciA9IFByb3ZpZGVyOwoKCi8qKiovIH0pLAovKiAxICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsgdmFsdWU6IHRydWUgfSk7CnZhciB0aHJvdHRsZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTApOwp2YXIgZGVib3VuY2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTsKdmFyIGluVmlldyA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpOwpleHBvcnRzLlJFRElSRUNUX05VTSA9ICdyZWRpcmVjdC1jb3VudCc7Ci8qKgogKiDmoLnmja51cmzkuIrnmoTot6/lvoTljLnphY3vvIzljrvpmaTph43lrprlkJEKICogQHBhcmFtIHtIVE1MQW5jaG9yRWxlbWVudH0gYUVsZW1lbnQKICogQHBhcmFtIHtSZWdFeHB9IHRlc3RlcgogKiBAcmV0dXJucyB7Ym9vbGVhbn0KICovCmZ1bmN0aW9uIG1hdGNoTGlua0Zyb21VcmwoYUVsZW1lbnQsIHRlc3RlcikgewogICAgdmFyIG1hdGNoZXIgPSB0ZXN0ZXIuZXhlYyhhRWxlbWVudC5ocmVmKTsKICAgIGlmICghbWF0Y2hlciB8fCAhbWF0Y2hlci5sZW5ndGggfHwgIW1hdGNoZXJbMV0pCiAgICAgICAgcmV0dXJuICcnOwogICAgdmFyIHVybCA9ICcnOwogICAgdHJ5IHsKICAgICAgICB1cmwgPSBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hlclsxXSk7CiAgICB9CiAgICBjYXRjaCAoZSkgewogICAgICAgIHVybCA9IC9odHRwcz86XC9cLy8udGVzdChtYXRjaGVyWzFdKSA/IG1hdGNoZXJbMV0gOiAnJzsKICAgIH0KICAgIHJldHVybiB1cmw7Cn0KZXhwb3J0cy5tYXRjaExpbmtGcm9tVXJsID0gbWF0Y2hMaW5rRnJvbVVybDsKdmFyIFF1ZXJ5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkgewogICAgZnVuY3Rpb24gUXVlcnkocXVlcnlTdHIpIHsKICAgICAgICB0aGlzLnF1ZXJ5U3RyID0gcXVlcnlTdHI7CiAgICAgICAgdGhpcy5vYmplY3QgPSB7fTsKICAgICAgICB0aGlzLm9iamVjdCA9IHRoaXMudG9PYmplY3QocXVlcnlTdHIucmVwbGFjZSgvXlw/Ky8sICcnKSk7CiAgICB9CiAgICBRdWVyeS5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbiAocXVlcnlTdHIpIHsKICAgICAgICB2YXIgb2JqID0ge307CiAgICAgICAgcXVlcnlTdHIuc3BsaXQoJyYnKS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgIHZhciBhcnIgPSBpdGVtLnNwbGl0KCc9JykgfHwgW107CiAgICAgICAgICAgIHZhciBrZXkgPSBhcnJbMF0gfHwgJyc7CiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGFyclsxXSB8fCAnJzsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIGtleSA9IGRlY29kZVVSSUNvbXBvbmVudChhcnJbMF0gfHwgJycpOwogICAgICAgICAgICAgICAgdmFsdWUgPSBkZWNvZGVVUklDb21wb25lbnQoYXJyWzFdIHx8ICcnKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCAoZXJyKSB7IH0KICAgICAgICAgICAga2V5ICYmIChvYmpba2V5XSA9IHZhbHVlKTsKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gb2JqOwogICAgfTsKICAgIFF1ZXJ5LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgYXJyID0gW107CiAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMub2JqZWN0KSB7CiAgICAgICAgICAgIGlmICh0aGlzLm9iamVjdC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7CiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLm9iamVjdFtrZXldOwogICAgICAgICAgICAgICAgYXJyLnB1c2goa2V5ICsgJz0nICsgdmFsdWUpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBhcnIubGVuZ3RoID8gJz8nICsgYXJyLmpvaW4oJyYnKSA6ICcnOwogICAgfTsKICAgIHJldHVybiBRdWVyeTsKfSgpKTsKZnVuY3Rpb24gcXVlcnlQYXJzZXIocXVlcnlTdHJpbmcpIHsKICAgIHJldHVybiBuZXcgUXVlcnkocXVlcnlTdHJpbmcpOwp9CmV4cG9ydHMucXVlcnlQYXJzZXIgPSBxdWVyeVBhcnNlcjsKZnVuY3Rpb24gZ2V0VGV4dChodG1sRWxlbWVudCkgewogICAgcmV0dXJuIChodG1sRWxlbWVudC5pbm5lclRleHQgfHwgaHRtbEVsZW1lbnQudGV4dENvbnRlbnQpLnRyaW0oKTsKfQpleHBvcnRzLmdldFRleHQgPSBnZXRUZXh0OwpmdW5jdGlvbiB0aHJvdHRsZURlY29yYXRvcih3YWl0LCBvcHRpb25zKSB7CiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfQogICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIG5hbWUsIGRlc2NyaXB0b3IpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgICAgICAgIGVudW1lcmFibGU6IGRlc2NyaXB0b3IuZW51bWVyYWJsZSwKICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgbmFtZSwgewogICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBkZXNjcmlwdG9yLmVudW1lcmFibGUsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRocm90dGxlKGRlc2NyaXB0b3IudmFsdWUsIHdhaXQsIG9wdGlvbnMpCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW25hbWVdOwogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgIH07Cn0KZXhwb3J0cy50aHJvdHRsZURlY29yYXRvciA9IHRocm90dGxlRGVjb3JhdG9yOwpmdW5jdGlvbiBkZWJvdW5jZURlY29yYXRvcih3YWl0LCBvcHRpb25zKSB7CiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfQogICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIG5hbWUsIGRlc2NyaXB0b3IpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgICAgICAgIGVudW1lcmFibGU6IGRlc2NyaXB0b3IuZW51bWVyYWJsZSwKICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgbmFtZSwgewogICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBkZXNjcmlwdG9yLmVudW1lcmFibGUsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGRlYm91bmNlKGRlc2NyaXB0b3IudmFsdWUsIHdhaXQsIG9wdGlvbnMpCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW25hbWVdOwogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgIH07Cn0KZXhwb3J0cy5kZWJvdW5jZURlY29yYXRvciA9IGRlYm91bmNlRGVjb3JhdG9yOwpmdW5jdGlvbiBpc0luVmlldyhlbGVtZW50KSB7CiAgICByZXR1cm4gaW5WaWV3LmlzKGVsZW1lbnQpOwp9CmV4cG9ydHMuaXNJblZpZXcgPSBpc0luVmlldzsKZnVuY3Rpb24gZ2V0UmVkaXJlY3QoYUVsZW1lbnQpIHsKICAgIHJldHVybiArKGFFbGVtZW50LmdldEF0dHJpYnV0ZShleHBvcnRzLlJFRElSRUNUX05VTSkgfHwgMCk7Cn0KZXhwb3J0cy5nZXRSZWRpcmVjdCA9IGdldFJlZGlyZWN0OwpmdW5jdGlvbiBpbmNyZWFzZVJlZGlyZWN0KGFFbGVtZW50KSB7CiAgICB2YXIgbnVtID0gZ2V0UmVkaXJlY3QoYUVsZW1lbnQpOwogICAgYUVsZW1lbnQuc2V0QXR0cmlidXRlKGV4cG9ydHMuUkVESVJFQ1RfTlVNLCBudW0gKyAxICsgJycpOwp9CmV4cG9ydHMuaW5jcmVhc2VSZWRpcmVjdCA9IGluY3JlYXNlUmVkaXJlY3Q7CmZ1bmN0aW9uIGRlY3JlYXNlUmVkaXJlY3QoYUVsZW1lbnQpIHsKICAgIHZhciBudW0gPSBnZXRSZWRpcmVjdChhRWxlbWVudCk7CiAgICBpZiAobnVtID4gMCkgewogICAgICAgIGFFbGVtZW50LnNldEF0dHJpYnV0ZShleHBvcnRzLlJFRElSRUNUX05VTSwgbnVtIC0gMSArICcnKTsKICAgIH0KfQpleHBvcnRzLmRlY3JlYXNlUmVkaXJlY3QgPSBkZWNyZWFzZVJlZGlyZWN0OwoKCi8qKiovIH0pLAovKiAyICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7CglpZih0cnVlKQoJCW1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpOwoJZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpCgkJZGVmaW5lKFtdLCBmYWN0b3J5KTsKCWVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKQoJCWV4cG9ydHNbImdtSHR0cCJdID0gZmFjdG9yeSgpOwoJZWxzZQoJCXJvb3RbImdtSHR0cCJdID0gZmFjdG9yeSgpOwp9KSh0aGlzLCBmdW5jdGlvbigpIHsKcmV0dXJuIC8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXAKLyoqKioqKi8gCS8vIFRoZSBtb2R1bGUgY2FjaGUKLyoqKioqKi8gCXZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307Ci8qKioqKiovCi8qKioqKiovIAkvLyBUaGUgcmVxdWlyZSBmdW5jdGlvbgovKioqKioqLyAJZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkgewovKioqKioqLwovKioqKioqLyAJCS8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZQovKioqKioqLyAJCWlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7Ci8qKioqKiovIAkJCXJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzOwovKioqKioqLyAJCX0KLyoqKioqKi8gCQkvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKQovKioqKioqLyAJCXZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHsKLyoqKioqKi8gCQkJaTogbW9kdWxlSWQsCi8qKioqKiovIAkJCWw6IGZhbHNlLAovKioqKioqLyAJCQlleHBvcnRzOiB7fQovKioqKioqLyAJCX07Ci8qKioqKiovCi8qKioqKiovIAkJLy8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uCi8qKioqKiovIAkJbW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7Ci8qKioqKiovCi8qKioqKiovIAkJLy8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZAovKioqKioqLyAJCW1vZHVsZS5sID0gdHJ1ZTsKLyoqKioqKi8KLyoqKioqKi8gCQkvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZQovKioqKioqLyAJCXJldHVybiBtb2R1bGUuZXhwb3J0czsKLyoqKioqKi8gCX0KLyoqKioqKi8KLyoqKioqKi8KLyoqKioqKi8gCS8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzOwovKioqKioqLwovKioqKioqLyAJLy8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGUKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7Ci8qKioqKiovCi8qKioqKiovIAkvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHMKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikgewovKioqKioqLyAJCWlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHsKLyoqKioqKi8gCQkJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsKLyoqKioqKi8gCQkJCWNvbmZpZ3VyYWJsZTogZmFsc2UsCi8qKioqKiovIAkJCQllbnVtZXJhYmxlOiB0cnVlLAovKioqKioqLyAJCQkJZ2V0OiBnZXR0ZXIKLyoqKioqKi8gCQkJfSk7Ci8qKioqKiovIAkJfQovKioqKioqLyAJfTsKLyoqKioqKi8KLyoqKioqKi8gCS8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHsKLyoqKioqKi8gCQl2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID8KLyoqKioqKi8gCQkJZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDoKLyoqKioqKi8gCQkJZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTsKLyoqKioqKi8gCQlfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7Ci8qKioqKiovIAkJcmV0dXJuIGdldHRlcjsKLyoqKioqKi8gCX07Ci8qKioqKiovCi8qKioqKiovIAkvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTsKLyoqKioqKi8KLyoqKioqKi8gCS8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSAiIjsKLyoqKioqKi8KLyoqKioqKi8gCS8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0cwovKioqKioqLyAJcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7Ci8qKioqKiovIH0pCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKioqKiovIChbCi8qIDAgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKLyoqCiAqIENyZWF0ZWQgYnkgYXhldHJveSBvbiAxNy02LTIzLgogKi8KLy8vIDxyZWZlcmVuY2UgcGF0aD0iLi9pbmRleC5kLnRzIiAvPgp2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHsKICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykgewogICAgICAgIHMgPSBhcmd1bWVudHNbaV07CiAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKQogICAgICAgICAgICB0W3BdID0gc1twXTsKICAgIH0KICAgIHJldHVybiB0Owp9OwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7IHZhbHVlOiB0cnVlIH0pOwpmdW5jdGlvbiBpc0Z1bmN0aW9uKGZ1bmMpIHsKICAgIHJldHVybiB0eXBlb2YgZnVuYyA9PT0gJ2Z1bmN0aW9uJzsKfQp2YXIgSHR0cCA9IChmdW5jdGlvbiAoKSB7CiAgICBmdW5jdGlvbiBIdHRwKGNvbmZpZykgewogICAgICAgIGlmIChjb25maWcgPT09IHZvaWQgMCkgeyBjb25maWcgPSB7fTsgfQogICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnOwogICAgfQogICAgSHR0cC5wcm90b3R5cGUuc2V0Q29uZmlnID0gZnVuY3Rpb24gKGNvbmZpZykgewogICAgICAgIGlmIChjb25maWcgPT09IHZvaWQgMCkgeyBjb25maWcgPSB7fTsgfQogICAgICAgIHRoaXMuY29uZmlnID0gX19hc3NpZ24oe30sIHRoaXMuY29uZmlnLCBjb25maWcpOwogICAgfTsKICAgIEh0dHAucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uIChjb25maWcpIHsKICAgICAgICByZXR1cm4gbmV3IEh0dHAoY29uZmlnKTsKICAgIH07CiAgICBIdHRwLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gKG1ldGhvZCwgdXJsLCBkYXRhLCBoZWFkZXIsIGNvbmZpZykgewogICAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgICAgaWYgKGRhdGEgPT09IHZvaWQgMCkgeyBkYXRhID0gJyc7IH0KICAgICAgICBpZiAoaGVhZGVyID09PSB2b2lkIDApIHsgaGVhZGVyID0ge307IH0KICAgICAgICBpZiAoY29uZmlnID09PSB2b2lkIDApIHsgY29uZmlnID0ge307IH0KICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgICAgICB2YXIgY29tbW9uUmVxdWVzdENvbmZpZyA9IHsKICAgICAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kLAogICAgICAgICAgICAgICAgdXJsOiB1cmwsCiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhLAogICAgICAgICAgICAgICAgaGVhZGVyOiBoZWFkZXIKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdmFyIEdNX3htbGh0dHBSZXF1ZXN0Q29uZmlnID0gX19hc3NpZ24oe30sIGNvbW1vblJlcXVlc3RDb25maWcsIGNvbmZpZywgX3RoaXMuY29uZmlnKTsKICAgICAgICAgICAgdmFyIG9ucmVhZHlzdGF0ZWNoYW5nZSA9IEdNX3htbGh0dHBSZXF1ZXN0Q29uZmlnLm9ucmVhZHlzdGF0ZWNoYW5nZSwgb25lcnJvciA9IEdNX3htbGh0dHBSZXF1ZXN0Q29uZmlnLm9uZXJyb3IsIG9uYWJvcnQgPSBHTV94bWxodHRwUmVxdWVzdENvbmZpZy5vbmFib3J0LCBvbnRpbWVvdXQgPSBHTV94bWxodHRwUmVxdWVzdENvbmZpZy5vbnRpbWVvdXQ7CiAgICAgICAgICAgIEdNX3htbGh0dHBSZXF1ZXN0Q29uZmlnLnN5bmNocm9ub3VzID0gdHJ1ZTsgLy8gYXN5bmMKICAgICAgICAgICAgR01feG1saHR0cFJlcXVlc3RDb25maWcub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgIGlzRnVuY3Rpb24ob25yZWFkeXN0YXRlY2hhbmdlKSAmJgogICAgICAgICAgICAgICAgICAgICAgICBvbnJlYWR5c3RhdGVjaGFuZ2UuY2FsbCh0aGlzLCByZXNwb25zZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UucmVhZHlTdGF0ZSAhPT0gNCkKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICByZXNwb25zZS5zdGF0dXMgPj0gMjAwICYmIHJlc3BvbnNlLnN0YXR1cyA8IDQwMAogICAgICAgICAgICAgICAgICAgID8gcmVzb2x2ZShyZXNwb25zZSkKICAgICAgICAgICAgICAgICAgICA6IHJlamVjdChyZXNwb25zZSk7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIEdNX3htbGh0dHBSZXF1ZXN0Q29uZmlnLm9uZXJyb3IgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgaXNGdW5jdGlvbihvbmVycm9yKSAmJiBvbmVycm9yLmNhbGwodGhpcywgcmVzcG9uc2UpOwogICAgICAgICAgICAgICAgICAgIHJlamVjdChyZXNwb25zZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIEdNX3htbGh0dHBSZXF1ZXN0Q29uZmlnLm9uYWJvcnQgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgaXNGdW5jdGlvbihvbmFib3J0KSAmJiBvbmFib3J0LmNhbGwodGhpcywgcmVzcG9uc2UpOwogICAgICAgICAgICAgICAgICAgIHJlamVjdChyZXNwb25zZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIEdNX3htbGh0dHBSZXF1ZXN0Q29uZmlnLm9udGltZW91dCA9IGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICBpc0Z1bmN0aW9uKG9udGltZW91dCkgJiYgb250aW1lb3V0LmNhbGwodGhpcywgcmVzcG9uc2UpOwogICAgICAgICAgICAgICAgICAgIHJlamVjdChyZXNwb25zZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGlmIChfdGhpcy5jb25maWcuZGVidWcpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCIlY1siICsgY29tbW9uUmVxdWVzdENvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSArICJdJWM6ICIgKyBjb21tb25SZXF1ZXN0Q29uZmlnLnVybCwgJ2NvbG9yOiBncmVlbicsICdjb2xvcjogIzAwMDt0ZXh0LXN0eWxlOiB1bmRlci1saW5lJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgR01feG1saHR0cFJlcXVlc3QoX19hc3NpZ24oe30sIEdNX3htbGh0dHBSZXF1ZXN0Q29uZmlnKSk7CiAgICAgICAgfSk7CiAgICB9OwogICAgSHR0cC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHVybCwgZGF0YSwgaGVhZGVyLCBjb25maWcpIHsKICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KCdHRVQnLCB1cmwsIGRhdGEsIGhlYWRlciwgY29uZmlnKTsKICAgIH07CiAgICBIdHRwLnByb3RvdHlwZS5wb3N0ID0gZnVuY3Rpb24gKHVybCwgZGF0YSwgaGVhZGVyLCBjb25maWcpIHsKICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KCdQT1NUJywgdXJsLCBkYXRhLCBoZWFkZXIsIGNvbmZpZyk7CiAgICB9OwogICAgSHR0cC5wcm90b3R5cGUucHV0ID0gZnVuY3Rpb24gKHVybCwgZGF0YSwgaGVhZGVyLCBjb25maWcpIHsKICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KCdQVVQnLCB1cmwsIGRhdGEsIGhlYWRlciwgY29uZmlnKTsKICAgIH07CiAgICBIdHRwLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBmdW5jdGlvbiAodXJsLCBkYXRhLCBoZWFkZXIsIGNvbmZpZykgewogICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJ0RFTEVURScsIHVybCwgZGF0YSwgaGVhZGVyLCBjb25maWcpOwogICAgfTsKICAgIEh0dHAucHJvdG90eXBlLmhlYWQgPSBmdW5jdGlvbiAodXJsLCBkYXRhLCBoZWFkZXIsIGNvbmZpZykgewogICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJ0hFQUQnLCB1cmwsIGRhdGEsIGhlYWRlciwgY29uZmlnKTsKICAgIH07CiAgICByZXR1cm4gSHR0cDsKfSgpKTsKZXhwb3J0cy5IdHRwID0gSHR0cDsKdmFyIHRpbWVvdXQgPSA1MDAwOwpleHBvcnRzLnRpbWVvdXQgPSB0aW1lb3V0Owp2YXIgaHR0cCA9IG5ldyBIdHRwKHsgdGltZW91dDogdGltZW91dCB9KTsKZXhwb3J0cy5odHRwID0gaHR0cDsKZXhwb3J0cy5kZWZhdWx0ID0gaHR0cDsKCgovKioqLyB9KQovKioqKioqLyBdKTsKfSk7CgovKioqLyB9KSwKLyogMyAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7Cgp2YXIgZzsKCi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlCmcgPSAoZnVuY3Rpb24oKSB7CglyZXR1cm4gdGhpczsKfSkoKTsKCnRyeSB7CgkvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUCkKCWcgPSBnIHx8IEZ1bmN0aW9uKCJyZXR1cm4gdGhpcyIpKCkgfHwgKDEsZXZhbCkoInRoaXMiKTsKfSBjYXRjaChlKSB7CgkvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZQoJaWYodHlwZW9mIHdpbmRvdyA9PT0gIm9iamVjdCIpCgkJZyA9IHdpbmRvdzsKfQoKLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLgovLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQncwovLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59Cgptb2R1bGUuZXhwb3J0cyA9IGc7CgoKLyoqKi8gfSksCi8qIDQgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgeyB2YWx1ZTogdHJ1ZSB9KTsKX193ZWJwYWNrX3JlcXVpcmVfXyg1KTsKdmFyIGdtX2h0dHBfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMik7CnZhciBhcHBfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7CnZhciB6aGlodV96aHVhbmxhbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7CnZhciB6aGlodV9kYWlseV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSk7CnZhciB0aWViYV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7CnZhciBnb29nbGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpOwp2YXIgZ29vZ2xlX2RvY3NfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpOwp2YXIgemhpaHVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpOwp2YXIgc29fMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjApOwp2YXIgd2VvYm9fMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpOwp2YXIgdHdpdHRlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMik7CnZhciBzb2dvdV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMyk7CnZhciBiYWlkdV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNCk7CnZhciBiYWlkdV92aWRlb18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNSk7CnZhciBqdWVqaW5fMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjYpOwp2YXIgYXBwID0gbmV3IGFwcF8xLkFwcCgpOwp2YXIgaXNEZWJ1ZyA9ICJwcm9kdWN0aW9uIiAhPT0gJ3Byb2R1Y3Rpb24nOwpnbV9odHRwXzEuZGVmYXVsdC5zZXRDb25maWcoeyBkZWJ1ZzogaXNEZWJ1ZyB9KTsKYXBwCiAgICAuc2V0Q29uZmlnKHsKICAgIGRlYnVnOiBpc0RlYnVnCn0pCiAgICAucHJvdmlkZShbCiAgICB7CiAgICAgICAgLy8g5rWL6K+V5Zyw5Z2AOiBodHRwczovL3d3dy56aGlodS5jb20vcXVlc3Rpb24vMjUyNTg3NzUKICAgICAgICBuYW1lOiAn55+l5LmOJywKICAgICAgICB0ZXN0OiAvd3d3XC56aGlodVwuY29tLywKICAgICAgICBwcm92aWRlcjogemhpaHVfMS5aaGlodVByb3ZpZGVyCiAgICB9LAogICAgewogICAgICAgIC8vIOa1i+ivleWcsOWdgDogaHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yMDU0OTk3OAogICAgICAgIG5hbWU6ICfnn6XkuY7kuJPmoI8nLAogICAgICAgIHRlc3Q6IC96aHVhbmxhblwuemhpaHVcLmNvbS8sCiAgICAgICAgcHJvdmlkZXI6IHpoaWh1X3podWFubGFuXzEuWmhpaHVaaHVhbmxhblByb3ZpZGVyCiAgICB9LAogICAgewogICAgICAgIC8vIOa1i+ivleWcsOWdgDoKICAgICAgICBuYW1lOiAn55+l5LmO5pel5oqlJywKICAgICAgICB0ZXN0OiAvZGFpbHlcLnpoaWh1XC5jb20vLAogICAgICAgIHByb3ZpZGVyOiB6aGlodV9kYWlseV8xLlpoaWh1RGFpbHlQcm92aWRlcgogICAgfSwKICAgIHsKICAgICAgICBuYW1lOiAnR29vZ2xl5pCc57SiJywKICAgICAgICB0ZXN0OiAvXHcrXC5nb29nbGVcLi8sCiAgICAgICAgcHJvdmlkZXI6IGdvb2dsZV8xLkdvb2dsZVByb3ZpZGVyCiAgICB9LAogICAgewogICAgICAgIC8vIOa1i+ivleWcsOWdgDogaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vc3ByZWFkc2hlZXRzL2QvMVRGY0VYTWNLcndvSUFFQ0lWeUJVMEdQb1NtUnFaN0EwVkJ2cWVLWVZTd3cvaHRtbHZpZXcKICAgICAgICBuYW1lOiAnR29vZ2xlIERvY3MnLAogICAgICAgIHRlc3Q6IC9kb2NzXC5nb29nbGVcLmNvbS8sCiAgICAgICAgcHJvdmlkZXI6IGdvb2dsZV9kb2NzXzEuR29vZ2xlRG9jc1Byb3ZpZGVyCiAgICB9LAogICAgewogICAgICAgIC8vIOa1i+ivleWcsOWdgDogaHR0cHM6Ly93d3cuc28uY29tL3M/aWU9dXRmLTgmZnI9bm9uZSZzcmM9MzYwc291X25ld2hvbWUmcT1jaHJvbWUKICAgICAgICBuYW1lOiAnMzYw5pCc57SiJywKICAgICAgICB0ZXN0OiAvd3d3XC5zb1wuY29tLywKICAgICAgICBwcm92aWRlcjogc29fMS5Tb1Byb3ZpZGVyCiAgICB9LAogICAgewogICAgICAgIG5hbWU6ICfmlrDmtarlvq7ljZonLAogICAgICAgIHRlc3Q6IC9cLndlaWJvXC5jb20vLAogICAgICAgIHByb3ZpZGVyOiB3ZW9ib18xLldlYm9Qcm92aWRlcgogICAgfSwKICAgIHsKICAgICAgICBuYW1lOiAnVHdpdHRlcicsCiAgICAgICAgdGVzdDogL3R3aXR0ZXJcLmNvbS8sCiAgICAgICAgcHJvdmlkZXI6IHR3aXR0ZXJfMS5Ud2l0dGVyUHJvdmlkZXIKICAgIH0sCiAgICB7CiAgICAgICAgLy8g5rWL6K+VOiBodHRwOi8vd3d3LnNvZ291LmNvbS93ZWI/cXVlcnk9Y2hyb21lJl9hc2Y9d3d3LnNvZ291LmNvbSZfYXN0PSZ3PTAxMDE5OTAwJnA9NDAwNDAxMDAmaWU9dXRmOCZmcm9tPWluZGV4LW5vbG9naW4mc19mcm9tPWluZGV4JnN1dD0xNTI3JnNzdDA9MTUwNDM0NzM2NzYxMSZsa3Q9MCUyQzAlMkMwJnN1Z3N1dj0wMDA5MTY1MUI0OENBNDVGNTkzQjYxQTI5QjEzMTQwNSZzdWd0aW1lPTE1MDQzNDczNjc2MTEKICAgICAgICBuYW1lOiAn5pCc54uX5pCc57SiJywKICAgICAgICB0ZXN0OiAvd3d3XC5zb2dvdVwuY29tLywKICAgICAgICBwcm92aWRlcjogc29nb3VfMS5Tb0dvdVByb3ZpZGVyCiAgICB9LAogICAgewogICAgICAgIC8vIOa1i+ivlTogaHR0cHM6Ly93d3cuYmFpZHUuY29tL3M/d2Q9Y2hyb21lJnJzdl9zcHQ9MSZyc3ZfaXFpZD0weGNiMTM2MjM3MDAwZWQ0MGUmaXNzcD0xJmY9OCZyc3ZfYnA9MCZyc3ZfaWR4PTImaWU9dXRmLTgmdG49YmFpZHVsb2NhbCZyc3ZfZW50ZXI9MSZyc3Zfc3VnMz03JnJzdl9zdWcxPTcmcnN2X3N1Zzc9MTAxJnJzdl9zdWcyPTAmaW5wdXRUPTgxMyZyc3Zfc3VnND05ODkmdGltZXN0YW1wPTE1MDQzNDkyMjkyNjYmcm49NTAmdmZfYmw9MQogICAgICAgIG5hbWU6ICfnmb7luqbmkJzntKInLAogICAgICAgIHRlc3Q6IC93d3dcLmJhaWR1XC5jb20vLAogICAgICAgIHByb3ZpZGVyOiBiYWlkdV8xLkJhaWR1UHJvdmlkZXIKICAgIH0sCiAgICB7CiAgICAgICAgbmFtZTogJ+eZvuW6puinhumikScsCiAgICAgICAgdGVzdDogL3ZcLmJhaWR1XC5jb20vLAogICAgICAgIHByb3ZpZGVyOiBiYWlkdV92aWRlb18xLkJhaWR1VmlkZW9Qcm92aWRlcgogICAgfSwKICAgIHsKICAgICAgICAvLyDmtYvor5XlnLDlnYA6IGh0dHA6Ly90aWViYS5iYWlkdS5jb20vcC81MzAwODQ0MTgwCiAgICAgICAgbmFtZTogJ+eZvuW6pui0tOWQpycsCiAgICAgICAgdGVzdDogL3RpZWJhXC5iYWlkdVwuY29tLywKICAgICAgICBwcm92aWRlcjogdGllYmFfMS5UaWViYVByb3ZpZGVyCiAgICB9LAogICAgewogICAgICAgIC8vIOa1i+ivleWcsOWdgDogaHR0cHM6Ly9qdWVqaW4uaW0vZW50cnkvNTlhYzhmYTU1MTg4MjUyNDI0MWE4ODAyP3V0bV9zb3VyY2U9Z29sZF9icm93c2VyX2V4dGVuc2lvbgogICAgICAgIG5hbWU6ICfmjpjph5EnLAogICAgICAgIHRlc3Q6IC9qdWVqaW5cLmltLywKICAgICAgICBwcm92aWRlcjoganVlamluXzEuSnVlamluUHJvdmlkZXIKICAgIH0KXSkKICAgIC5ib290c3RyYXAoKTsKCgovKioqLyB9KSwKLyogNSAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7Ci8vIFRoaXMgZmlsZSBjYW4gYmUgcmVxdWlyZWQgaW4gQnJvd3NlcmlmeSBhbmQgTm9kZS5qcyBmb3IgYXV0b21hdGljIHBvbHlmaWxsCi8vIFRvIHVzZSBpdDogIHJlcXVpcmUoJ2VzNi1wcm9taXNlL2F1dG8nKTsKCm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KS5wb2x5ZmlsbCgpOwoKCi8qKiovIH0pLAovKiA2ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihwcm9jZXNzLCBnbG9iYWwpIHt2YXIgcmVxdWlyZTsvKiEKICogQG92ZXJ2aWV3IGVzNi1wcm9taXNlIC0gYSB0aW55IGltcGxlbWVudGF0aW9uIG9mIFByb21pc2VzL0ErLgogKiBAY29weXJpZ2h0IENvcHlyaWdodCAoYykgMjAxNCBZZWh1ZGEgS2F0eiwgVG9tIERhbGUsIFN0ZWZhbiBQZW5uZXIgYW5kIGNvbnRyaWJ1dG9ycyAoQ29udmVyc2lvbiB0byBFUzYgQVBJIGJ5IEpha2UgQXJjaGliYWxkKQogKiBAbGljZW5zZSAgIExpY2Vuc2VkIHVuZGVyIE1JVCBsaWNlbnNlCiAqICAgICAgICAgICAgU2VlIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zdGVmYW5wZW5uZXIvZXM2LXByb21pc2UvbWFzdGVyL0xJQ0VOU0UKICogQHZlcnNpb24gICA0LjEuMQogKi8KCihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7CgkgdHJ1ZSA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDoKCXR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6CgkoZ2xvYmFsLkVTNlByb21pc2UgPSBmYWN0b3J5KCkpOwp9KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JzsKCmZ1bmN0aW9uIG9iamVjdE9yRnVuY3Rpb24oeCkgewogIHZhciB0eXBlID0gdHlwZW9mIHg7CiAgcmV0dXJuIHggIT09IG51bGwgJiYgKHR5cGUgPT09ICdvYmplY3QnIHx8IHR5cGUgPT09ICdmdW5jdGlvbicpOwp9CgpmdW5jdGlvbiBpc0Z1bmN0aW9uKHgpIHsKICByZXR1cm4gdHlwZW9mIHggPT09ICdmdW5jdGlvbic7Cn0KCnZhciBfaXNBcnJheSA9IHVuZGVmaW5lZDsKaWYgKEFycmF5LmlzQXJyYXkpIHsKICBfaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7Cn0gZWxzZSB7CiAgX2lzQXJyYXkgPSBmdW5jdGlvbiAoeCkgewogICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4KSA9PT0gJ1tvYmplY3QgQXJyYXldJzsKICB9Owp9Cgp2YXIgaXNBcnJheSA9IF9pc0FycmF5OwoKdmFyIGxlbiA9IDA7CnZhciB2ZXJ0eE5leHQgPSB1bmRlZmluZWQ7CnZhciBjdXN0b21TY2hlZHVsZXJGbiA9IHVuZGVmaW5lZDsKCnZhciBhc2FwID0gZnVuY3Rpb24gYXNhcChjYWxsYmFjaywgYXJnKSB7CiAgcXVldWVbbGVuXSA9IGNhbGxiYWNrOwogIHF1ZXVlW2xlbiArIDFdID0gYXJnOwogIGxlbiArPSAyOwogIGlmIChsZW4gPT09IDIpIHsKICAgIC8vIElmIGxlbiBpcyAyLCB0aGF0IG1lYW5zIHRoYXQgd2UgbmVlZCB0byBzY2hlZHVsZSBhbiBhc3luYyBmbHVzaC4KICAgIC8vIElmIGFkZGl0aW9uYWwgY2FsbGJhY2tzIGFyZSBxdWV1ZWQgYmVmb3JlIHRoZSBxdWV1ZSBpcyBmbHVzaGVkLCB0aGV5CiAgICAvLyB3aWxsIGJlIHByb2Nlc3NlZCBieSB0aGlzIGZsdXNoIHRoYXQgd2UgYXJlIHNjaGVkdWxpbmcuCiAgICBpZiAoY3VzdG9tU2NoZWR1bGVyRm4pIHsKICAgICAgY3VzdG9tU2NoZWR1bGVyRm4oZmx1c2gpOwogICAgfSBlbHNlIHsKICAgICAgc2NoZWR1bGVGbHVzaCgpOwogICAgfQogIH0KfTsKCmZ1bmN0aW9uIHNldFNjaGVkdWxlcihzY2hlZHVsZUZuKSB7CiAgY3VzdG9tU2NoZWR1bGVyRm4gPSBzY2hlZHVsZUZuOwp9CgpmdW5jdGlvbiBzZXRBc2FwKGFzYXBGbikgewogIGFzYXAgPSBhc2FwRm47Cn0KCnZhciBicm93c2VyV2luZG93ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB1bmRlZmluZWQ7CnZhciBicm93c2VyR2xvYmFsID0gYnJvd3NlcldpbmRvdyB8fCB7fTsKdmFyIEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyID0gYnJvd3Nlckdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGJyb3dzZXJHbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjsKdmFyIGlzTm9kZSA9IHR5cGVvZiBzZWxmID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgKHt9KS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXSc7CgovLyB0ZXN0IGZvciB3ZWIgd29ya2VyIGJ1dCBub3QgaW4gSUUxMAp2YXIgaXNXb3JrZXIgPSB0eXBlb2YgVWludDhDbGFtcGVkQXJyYXkgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBpbXBvcnRTY3JpcHRzICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgTWVzc2FnZUNoYW5uZWwgIT09ICd1bmRlZmluZWQnOwoKLy8gbm9kZQpmdW5jdGlvbiB1c2VOZXh0VGljaygpIHsKICAvLyBub2RlIHZlcnNpb24gMC4xMC54IGRpc3BsYXlzIGEgZGVwcmVjYXRpb24gd2FybmluZyB3aGVuIG5leHRUaWNrIGlzIHVzZWQgcmVjdXJzaXZlbHkKICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2N1am9qcy93aGVuL2lzc3Vlcy80MTAgZm9yIGRldGFpbHMKICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpOwogIH07Cn0KCi8vIHZlcnR4CmZ1bmN0aW9uIHVzZVZlcnR4VGltZXIoKSB7CiAgaWYgKHR5cGVvZiB2ZXJ0eE5leHQgIT09ICd1bmRlZmluZWQnKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICB2ZXJ0eE5leHQoZmx1c2gpOwogICAgfTsKICB9CgogIHJldHVybiB1c2VTZXRUaW1lb3V0KCk7Cn0KCmZ1bmN0aW9uIHVzZU11dGF0aW9uT2JzZXJ2ZXIoKSB7CiAgdmFyIGl0ZXJhdGlvbnMgPSAwOwogIHZhciBvYnNlcnZlciA9IG5ldyBCcm93c2VyTXV0YXRpb25PYnNlcnZlcihmbHVzaCk7CiAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7CiAgb2JzZXJ2ZXIub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7CgogIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICBub2RlLmRhdGEgPSBpdGVyYXRpb25zID0gKytpdGVyYXRpb25zICUgMjsKICB9Owp9CgovLyB3ZWIgd29ya2VyCmZ1bmN0aW9uIHVzZU1lc3NhZ2VDaGFubmVsKCkgewogIHZhciBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7CiAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmbHVzaDsKICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoMCk7CiAgfTsKfQoKZnVuY3Rpb24gdXNlU2V0VGltZW91dCgpIHsKICAvLyBTdG9yZSBzZXRUaW1lb3V0IHJlZmVyZW5jZSBzbyBlczYtcHJvbWlzZSB3aWxsIGJlIHVuYWZmZWN0ZWQgYnkKICAvLyBvdGhlciBjb2RlIG1vZGlmeWluZyBzZXRUaW1lb3V0IChsaWtlIHNpbm9uLnVzZUZha2VUaW1lcnMoKSkKICB2YXIgZ2xvYmFsU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7CiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBnbG9iYWxTZXRUaW1lb3V0KGZsdXNoLCAxKTsKICB9Owp9Cgp2YXIgcXVldWUgPSBuZXcgQXJyYXkoMTAwMCk7CmZ1bmN0aW9uIGZsdXNoKCkgewogIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHsKICAgIHZhciBjYWxsYmFjayA9IHF1ZXVlW2ldOwogICAgdmFyIGFyZyA9IHF1ZXVlW2kgKyAxXTsKCiAgICBjYWxsYmFjayhhcmcpOwoKICAgIHF1ZXVlW2ldID0gdW5kZWZpbmVkOwogICAgcXVldWVbaSArIDFdID0gdW5kZWZpbmVkOwogIH0KCiAgbGVuID0gMDsKfQoKZnVuY3Rpb24gYXR0ZW1wdFZlcnR4KCkgewogIHRyeSB7CiAgICB2YXIgciA9IHJlcXVpcmU7CiAgICB2YXIgdmVydHggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpOwogICAgdmVydHhOZXh0ID0gdmVydHgucnVuT25Mb29wIHx8IHZlcnR4LnJ1bk9uQ29udGV4dDsKICAgIHJldHVybiB1c2VWZXJ0eFRpbWVyKCk7CiAgfSBjYXRjaCAoZSkgewogICAgcmV0dXJuIHVzZVNldFRpbWVvdXQoKTsKICB9Cn0KCnZhciBzY2hlZHVsZUZsdXNoID0gdW5kZWZpbmVkOwovLyBEZWNpZGUgd2hhdCBhc3luYyBtZXRob2QgdG8gdXNlIHRvIHRyaWdnZXJpbmcgcHJvY2Vzc2luZyBvZiBxdWV1ZWQgY2FsbGJhY2tzOgppZiAoaXNOb2RlKSB7CiAgc2NoZWR1bGVGbHVzaCA9IHVzZU5leHRUaWNrKCk7Cn0gZWxzZSBpZiAoQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIpIHsKICBzY2hlZHVsZUZsdXNoID0gdXNlTXV0YXRpb25PYnNlcnZlcigpOwp9IGVsc2UgaWYgKGlzV29ya2VyKSB7CiAgc2NoZWR1bGVGbHVzaCA9IHVzZU1lc3NhZ2VDaGFubmVsKCk7Cn0gZWxzZSBpZiAoYnJvd3NlcldpbmRvdyA9PT0gdW5kZWZpbmVkICYmICJmdW5jdGlvbiIgPT09ICdmdW5jdGlvbicpIHsKICBzY2hlZHVsZUZsdXNoID0gYXR0ZW1wdFZlcnR4KCk7Cn0gZWxzZSB7CiAgc2NoZWR1bGVGbHVzaCA9IHVzZVNldFRpbWVvdXQoKTsKfQoKZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxtZW50LCBvblJlamVjdGlvbikgewogIHZhciBfYXJndW1lbnRzID0gYXJndW1lbnRzOwoKICB2YXIgcGFyZW50ID0gdGhpczsKCiAgdmFyIGNoaWxkID0gbmV3IHRoaXMuY29uc3RydWN0b3Iobm9vcCk7CgogIGlmIChjaGlsZFtQUk9NSVNFX0lEXSA9PT0gdW5kZWZpbmVkKSB7CiAgICBtYWtlUHJvbWlzZShjaGlsZCk7CiAgfQoKICB2YXIgX3N0YXRlID0gcGFyZW50Ll9zdGF0ZTsKCiAgaWYgKF9zdGF0ZSkgewogICAgKGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGNhbGxiYWNrID0gX2FyZ3VtZW50c1tfc3RhdGUgLSAxXTsKICAgICAgYXNhcChmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIGludm9rZUNhbGxiYWNrKF9zdGF0ZSwgY2hpbGQsIGNhbGxiYWNrLCBwYXJlbnQuX3Jlc3VsdCk7CiAgICAgIH0pOwogICAgfSkoKTsKICB9IGVsc2UgewogICAgc3Vic2NyaWJlKHBhcmVudCwgY2hpbGQsIG9uRnVsZmlsbG1lbnQsIG9uUmVqZWN0aW9uKTsKICB9CgogIHJldHVybiBjaGlsZDsKfQoKLyoqCiAgYFByb21pc2UucmVzb2x2ZWAgcmV0dXJucyBhIHByb21pc2UgdGhhdCB3aWxsIGJlY29tZSByZXNvbHZlZCB3aXRoIHRoZQogIHBhc3NlZCBgdmFsdWVgLiBJdCBpcyBzaG9ydGhhbmQgZm9yIHRoZSBmb2xsb3dpbmc6CgogIGBgYGphdmFzY3JpcHQKICBsZXQgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7CiAgICByZXNvbHZlKDEpOwogIH0pOwoKICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpewogICAgLy8gdmFsdWUgPT09IDEKICB9KTsKICBgYGAKCiAgSW5zdGVhZCBvZiB3cml0aW5nIHRoZSBhYm92ZSwgeW91ciBjb2RlIG5vdyBzaW1wbHkgYmVjb21lcyB0aGUgZm9sbG93aW5nOgoKICBgYGBqYXZhc2NyaXB0CiAgbGV0IHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoMSk7CgogIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSl7CiAgICAvLyB2YWx1ZSA9PT0gMQogIH0pOwogIGBgYAoKICBAbWV0aG9kIHJlc29sdmUKICBAc3RhdGljCiAgQHBhcmFtIHtBbnl9IHZhbHVlIHZhbHVlIHRoYXQgdGhlIHJldHVybmVkIHByb21pc2Ugd2lsbCBiZSByZXNvbHZlZCB3aXRoCiAgVXNlZnVsIGZvciB0b29saW5nLgogIEByZXR1cm4ge1Byb21pc2V9IGEgcHJvbWlzZSB0aGF0IHdpbGwgYmVjb21lIGZ1bGZpbGxlZCB3aXRoIHRoZSBnaXZlbgogIGB2YWx1ZWAKKi8KZnVuY3Rpb24gcmVzb2x2ZSQxKG9iamVjdCkgewogIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovCiAgdmFyIENvbnN0cnVjdG9yID0gdGhpczsKCiAgaWYgKG9iamVjdCAmJiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvYmplY3QuY29uc3RydWN0b3IgPT09IENvbnN0cnVjdG9yKSB7CiAgICByZXR1cm4gb2JqZWN0OwogIH0KCiAgdmFyIHByb21pc2UgPSBuZXcgQ29uc3RydWN0b3Iobm9vcCk7CiAgcmVzb2x2ZShwcm9taXNlLCBvYmplY3QpOwogIHJldHVybiBwcm9taXNlOwp9Cgp2YXIgUFJPTUlTRV9JRCA9IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygxNik7CgpmdW5jdGlvbiBub29wKCkge30KCnZhciBQRU5ESU5HID0gdm9pZCAwOwp2YXIgRlVMRklMTEVEID0gMTsKdmFyIFJFSkVDVEVEID0gMjsKCnZhciBHRVRfVEhFTl9FUlJPUiA9IG5ldyBFcnJvck9iamVjdCgpOwoKZnVuY3Rpb24gc2VsZkZ1bGZpbGxtZW50KCkgewogIHJldHVybiBuZXcgVHlwZUVycm9yKCJZb3UgY2Fubm90IHJlc29sdmUgYSBwcm9taXNlIHdpdGggaXRzZWxmIik7Cn0KCmZ1bmN0aW9uIGNhbm5vdFJldHVybk93bigpIHsKICByZXR1cm4gbmV3IFR5cGVFcnJvcignQSBwcm9taXNlcyBjYWxsYmFjayBjYW5ub3QgcmV0dXJuIHRoYXQgc2FtZSBwcm9taXNlLicpOwp9CgpmdW5jdGlvbiBnZXRUaGVuKHByb21pc2UpIHsKICB0cnkgewogICAgcmV0dXJuIHByb21pc2UudGhlbjsKICB9IGNhdGNoIChlcnJvcikgewogICAgR0VUX1RIRU5fRVJST1IuZXJyb3IgPSBlcnJvcjsKICAgIHJldHVybiBHRVRfVEhFTl9FUlJPUjsKICB9Cn0KCmZ1bmN0aW9uIHRyeVRoZW4odGhlbiQkMSwgdmFsdWUsIGZ1bGZpbGxtZW50SGFuZGxlciwgcmVqZWN0aW9uSGFuZGxlcikgewogIHRyeSB7CiAgICB0aGVuJCQxLmNhbGwodmFsdWUsIGZ1bGZpbGxtZW50SGFuZGxlciwgcmVqZWN0aW9uSGFuZGxlcik7CiAgfSBjYXRjaCAoZSkgewogICAgcmV0dXJuIGU7CiAgfQp9CgpmdW5jdGlvbiBoYW5kbGVGb3JlaWduVGhlbmFibGUocHJvbWlzZSwgdGhlbmFibGUsIHRoZW4kJDEpIHsKICBhc2FwKGZ1bmN0aW9uIChwcm9taXNlKSB7CiAgICB2YXIgc2VhbGVkID0gZmFsc2U7CiAgICB2YXIgZXJyb3IgPSB0cnlUaGVuKHRoZW4kJDEsIHRoZW5hYmxlLCBmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgaWYgKHNlYWxlZCkgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBzZWFsZWQgPSB0cnVlOwogICAgICBpZiAodGhlbmFibGUgIT09IHZhbHVlKSB7CiAgICAgICAgcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZnVsZmlsbChwcm9taXNlLCB2YWx1ZSk7CiAgICAgIH0KICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgaWYgKHNlYWxlZCkgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBzZWFsZWQgPSB0cnVlOwoKICAgICAgcmVqZWN0KHByb21pc2UsIHJlYXNvbik7CiAgICB9LCAnU2V0dGxlOiAnICsgKHByb21pc2UuX2xhYmVsIHx8ICcgdW5rbm93biBwcm9taXNlJykpOwoKICAgIGlmICghc2VhbGVkICYmIGVycm9yKSB7CiAgICAgIHNlYWxlZCA9IHRydWU7CiAgICAgIHJlamVjdChwcm9taXNlLCBlcnJvcik7CiAgICB9CiAgfSwgcHJvbWlzZSk7Cn0KCmZ1bmN0aW9uIGhhbmRsZU93blRoZW5hYmxlKHByb21pc2UsIHRoZW5hYmxlKSB7CiAgaWYgKHRoZW5hYmxlLl9zdGF0ZSA9PT0gRlVMRklMTEVEKSB7CiAgICBmdWxmaWxsKHByb21pc2UsIHRoZW5hYmxlLl9yZXN1bHQpOwogIH0gZWxzZSBpZiAodGhlbmFibGUuX3N0YXRlID09PSBSRUpFQ1RFRCkgewogICAgcmVqZWN0KHByb21pc2UsIHRoZW5hYmxlLl9yZXN1bHQpOwogIH0gZWxzZSB7CiAgICBzdWJzY3JpYmUodGhlbmFibGUsIHVuZGVmaW5lZCwgZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgIHJldHVybiByZXNvbHZlKHByb21pc2UsIHZhbHVlKTsKICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgcmV0dXJuIHJlamVjdChwcm9taXNlLCByZWFzb24pOwogICAgfSk7CiAgfQp9CgpmdW5jdGlvbiBoYW5kbGVNYXliZVRoZW5hYmxlKHByb21pc2UsIG1heWJlVGhlbmFibGUsIHRoZW4kJDEpIHsKICBpZiAobWF5YmVUaGVuYWJsZS5jb25zdHJ1Y3RvciA9PT0gcHJvbWlzZS5jb25zdHJ1Y3RvciAmJiB0aGVuJCQxID09PSB0aGVuICYmIG1heWJlVGhlbmFibGUuY29uc3RydWN0b3IucmVzb2x2ZSA9PT0gcmVzb2x2ZSQxKSB7CiAgICBoYW5kbGVPd25UaGVuYWJsZShwcm9taXNlLCBtYXliZVRoZW5hYmxlKTsKICB9IGVsc2UgewogICAgaWYgKHRoZW4kJDEgPT09IEdFVF9USEVOX0VSUk9SKSB7CiAgICAgIHJlamVjdChwcm9taXNlLCBHRVRfVEhFTl9FUlJPUi5lcnJvcik7CiAgICAgIEdFVF9USEVOX0VSUk9SLmVycm9yID0gbnVsbDsKICAgIH0gZWxzZSBpZiAodGhlbiQkMSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgIGZ1bGZpbGwocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSk7CiAgICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24odGhlbiQkMSkpIHsKICAgICAgaGFuZGxlRm9yZWlnblRoZW5hYmxlKHByb21pc2UsIG1heWJlVGhlbmFibGUsIHRoZW4kJDEpOwogICAgfSBlbHNlIHsKICAgICAgZnVsZmlsbChwcm9taXNlLCBtYXliZVRoZW5hYmxlKTsKICAgIH0KICB9Cn0KCmZ1bmN0aW9uIHJlc29sdmUocHJvbWlzZSwgdmFsdWUpIHsKICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHsKICAgIHJlamVjdChwcm9taXNlLCBzZWxmRnVsZmlsbG1lbnQoKSk7CiAgfSBlbHNlIGlmIChvYmplY3RPckZ1bmN0aW9uKHZhbHVlKSkgewogICAgaGFuZGxlTWF5YmVUaGVuYWJsZShwcm9taXNlLCB2YWx1ZSwgZ2V0VGhlbih2YWx1ZSkpOwogIH0gZWxzZSB7CiAgICBmdWxmaWxsKHByb21pc2UsIHZhbHVlKTsKICB9Cn0KCmZ1bmN0aW9uIHB1Ymxpc2hSZWplY3Rpb24ocHJvbWlzZSkgewogIGlmIChwcm9taXNlLl9vbmVycm9yKSB7CiAgICBwcm9taXNlLl9vbmVycm9yKHByb21pc2UuX3Jlc3VsdCk7CiAgfQoKICBwdWJsaXNoKHByb21pc2UpOwp9CgpmdW5jdGlvbiBmdWxmaWxsKHByb21pc2UsIHZhbHVlKSB7CiAgaWYgKHByb21pc2UuX3N0YXRlICE9PSBQRU5ESU5HKSB7CiAgICByZXR1cm47CiAgfQoKICBwcm9taXNlLl9yZXN1bHQgPSB2YWx1ZTsKICBwcm9taXNlLl9zdGF0ZSA9IEZVTEZJTExFRDsKCiAgaWYgKHByb21pc2UuX3N1YnNjcmliZXJzLmxlbmd0aCAhPT0gMCkgewogICAgYXNhcChwdWJsaXNoLCBwcm9taXNlKTsKICB9Cn0KCmZ1bmN0aW9uIHJlamVjdChwcm9taXNlLCByZWFzb24pIHsKICBpZiAocHJvbWlzZS5fc3RhdGUgIT09IFBFTkRJTkcpIHsKICAgIHJldHVybjsKICB9CiAgcHJvbWlzZS5fc3RhdGUgPSBSRUpFQ1RFRDsKICBwcm9taXNlLl9yZXN1bHQgPSByZWFzb247CgogIGFzYXAocHVibGlzaFJlamVjdGlvbiwgcHJvbWlzZSk7Cn0KCmZ1bmN0aW9uIHN1YnNjcmliZShwYXJlbnQsIGNoaWxkLCBvbkZ1bGZpbGxtZW50LCBvblJlamVjdGlvbikgewogIHZhciBfc3Vic2NyaWJlcnMgPSBwYXJlbnQuX3N1YnNjcmliZXJzOwogIHZhciBsZW5ndGggPSBfc3Vic2NyaWJlcnMubGVuZ3RoOwoKICBwYXJlbnQuX29uZXJyb3IgPSBudWxsOwoKICBfc3Vic2NyaWJlcnNbbGVuZ3RoXSA9IGNoaWxkOwogIF9zdWJzY3JpYmVyc1tsZW5ndGggKyBGVUxGSUxMRURdID0gb25GdWxmaWxsbWVudDsKICBfc3Vic2NyaWJlcnNbbGVuZ3RoICsgUkVKRUNURURdID0gb25SZWplY3Rpb247CgogIGlmIChsZW5ndGggPT09IDAgJiYgcGFyZW50Ll9zdGF0ZSkgewogICAgYXNhcChwdWJsaXNoLCBwYXJlbnQpOwogIH0KfQoKZnVuY3Rpb24gcHVibGlzaChwcm9taXNlKSB7CiAgdmFyIHN1YnNjcmliZXJzID0gcHJvbWlzZS5fc3Vic2NyaWJlcnM7CiAgdmFyIHNldHRsZWQgPSBwcm9taXNlLl9zdGF0ZTsKCiAgaWYgKHN1YnNjcmliZXJzLmxlbmd0aCA9PT0gMCkgewogICAgcmV0dXJuOwogIH0KCiAgdmFyIGNoaWxkID0gdW5kZWZpbmVkLAogICAgICBjYWxsYmFjayA9IHVuZGVmaW5lZCwKICAgICAgZGV0YWlsID0gcHJvbWlzZS5fcmVzdWx0OwoKICBmb3IgKHZhciBpID0gMDsgaSA8IHN1YnNjcmliZXJzLmxlbmd0aDsgaSArPSAzKSB7CiAgICBjaGlsZCA9IHN1YnNjcmliZXJzW2ldOwogICAgY2FsbGJhY2sgPSBzdWJzY3JpYmVyc1tpICsgc2V0dGxlZF07CgogICAgaWYgKGNoaWxkKSB7CiAgICAgIGludm9rZUNhbGxiYWNrKHNldHRsZWQsIGNoaWxkLCBjYWxsYmFjaywgZGV0YWlsKTsKICAgIH0gZWxzZSB7CiAgICAgIGNhbGxiYWNrKGRldGFpbCk7CiAgICB9CiAgfQoKICBwcm9taXNlLl9zdWJzY3JpYmVycy5sZW5ndGggPSAwOwp9CgpmdW5jdGlvbiBFcnJvck9iamVjdCgpIHsKICB0aGlzLmVycm9yID0gbnVsbDsKfQoKdmFyIFRSWV9DQVRDSF9FUlJPUiA9IG5ldyBFcnJvck9iamVjdCgpOwoKZnVuY3Rpb24gdHJ5Q2F0Y2goY2FsbGJhY2ssIGRldGFpbCkgewogIHRyeSB7CiAgICByZXR1cm4gY2FsbGJhY2soZGV0YWlsKTsKICB9IGNhdGNoIChlKSB7CiAgICBUUllfQ0FUQ0hfRVJST1IuZXJyb3IgPSBlOwogICAgcmV0dXJuIFRSWV9DQVRDSF9FUlJPUjsKICB9Cn0KCmZ1bmN0aW9uIGludm9rZUNhbGxiYWNrKHNldHRsZWQsIHByb21pc2UsIGNhbGxiYWNrLCBkZXRhaWwpIHsKICB2YXIgaGFzQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKGNhbGxiYWNrKSwKICAgICAgdmFsdWUgPSB1bmRlZmluZWQsCiAgICAgIGVycm9yID0gdW5kZWZpbmVkLAogICAgICBzdWNjZWVkZWQgPSB1bmRlZmluZWQsCiAgICAgIGZhaWxlZCA9IHVuZGVmaW5lZDsKCiAgaWYgKGhhc0NhbGxiYWNrKSB7CiAgICB2YWx1ZSA9IHRyeUNhdGNoKGNhbGxiYWNrLCBkZXRhaWwpOwoKICAgIGlmICh2YWx1ZSA9PT0gVFJZX0NBVENIX0VSUk9SKSB7CiAgICAgIGZhaWxlZCA9IHRydWU7CiAgICAgIGVycm9yID0gdmFsdWUuZXJyb3I7CiAgICAgIHZhbHVlLmVycm9yID0gbnVsbDsKICAgIH0gZWxzZSB7CiAgICAgIHN1Y2NlZWRlZCA9IHRydWU7CiAgICB9CgogICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB7CiAgICAgIHJlamVjdChwcm9taXNlLCBjYW5ub3RSZXR1cm5Pd24oKSk7CiAgICAgIHJldHVybjsKICAgIH0KICB9IGVsc2UgewogICAgdmFsdWUgPSBkZXRhaWw7CiAgICBzdWNjZWVkZWQgPSB0cnVlOwogIH0KCiAgaWYgKHByb21pc2UuX3N0YXRlICE9PSBQRU5ESU5HKSB7CiAgICAvLyBub29wCiAgfSBlbHNlIGlmIChoYXNDYWxsYmFjayAmJiBzdWNjZWVkZWQpIHsKICAgICAgcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7CiAgICB9IGVsc2UgaWYgKGZhaWxlZCkgewogICAgICByZWplY3QocHJvbWlzZSwgZXJyb3IpOwogICAgfSBlbHNlIGlmIChzZXR0bGVkID09PSBGVUxGSUxMRUQpIHsKICAgICAgZnVsZmlsbChwcm9taXNlLCB2YWx1ZSk7CiAgICB9IGVsc2UgaWYgKHNldHRsZWQgPT09IFJFSkVDVEVEKSB7CiAgICAgIHJlamVjdChwcm9taXNlLCB2YWx1ZSk7CiAgICB9Cn0KCmZ1bmN0aW9uIGluaXRpYWxpemVQcm9taXNlKHByb21pc2UsIHJlc29sdmVyKSB7CiAgdHJ5IHsKICAgIHJlc29sdmVyKGZ1bmN0aW9uIHJlc29sdmVQcm9taXNlKHZhbHVlKSB7CiAgICAgIHJlc29sdmUocHJvbWlzZSwgdmFsdWUpOwogICAgfSwgZnVuY3Rpb24gcmVqZWN0UHJvbWlzZShyZWFzb24pIHsKICAgICAgcmVqZWN0KHByb21pc2UsIHJlYXNvbik7CiAgICB9KTsKICB9IGNhdGNoIChlKSB7CiAgICByZWplY3QocHJvbWlzZSwgZSk7CiAgfQp9Cgp2YXIgaWQgPSAwOwpmdW5jdGlvbiBuZXh0SWQoKSB7CiAgcmV0dXJuIGlkKys7Cn0KCmZ1bmN0aW9uIG1ha2VQcm9taXNlKHByb21pc2UpIHsKICBwcm9taXNlW1BST01JU0VfSURdID0gaWQrKzsKICBwcm9taXNlLl9zdGF0ZSA9IHVuZGVmaW5lZDsKICBwcm9taXNlLl9yZXN1bHQgPSB1bmRlZmluZWQ7CiAgcHJvbWlzZS5fc3Vic2NyaWJlcnMgPSBbXTsKfQoKZnVuY3Rpb24gRW51bWVyYXRvciQxKENvbnN0cnVjdG9yLCBpbnB1dCkgewogIHRoaXMuX2luc3RhbmNlQ29uc3RydWN0b3IgPSBDb25zdHJ1Y3RvcjsKICB0aGlzLnByb21pc2UgPSBuZXcgQ29uc3RydWN0b3Iobm9vcCk7CgogIGlmICghdGhpcy5wcm9taXNlW1BST01JU0VfSURdKSB7CiAgICBtYWtlUHJvbWlzZSh0aGlzLnByb21pc2UpOwogIH0KCiAgaWYgKGlzQXJyYXkoaW5wdXQpKSB7CiAgICB0aGlzLmxlbmd0aCA9IGlucHV0Lmxlbmd0aDsKICAgIHRoaXMuX3JlbWFpbmluZyA9IGlucHV0Lmxlbmd0aDsKCiAgICB0aGlzLl9yZXN1bHQgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpOwoKICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgewogICAgICBmdWxmaWxsKHRoaXMucHJvbWlzZSwgdGhpcy5fcmVzdWx0KTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMubGVuZ3RoID0gdGhpcy5sZW5ndGggfHwgMDsKICAgICAgdGhpcy5fZW51bWVyYXRlKGlucHV0KTsKICAgICAgaWYgKHRoaXMuX3JlbWFpbmluZyA9PT0gMCkgewogICAgICAgIGZ1bGZpbGwodGhpcy5wcm9taXNlLCB0aGlzLl9yZXN1bHQpOwogICAgICB9CiAgICB9CiAgfSBlbHNlIHsKICAgIHJlamVjdCh0aGlzLnByb21pc2UsIHZhbGlkYXRpb25FcnJvcigpKTsKICB9Cn0KCmZ1bmN0aW9uIHZhbGlkYXRpb25FcnJvcigpIHsKICByZXR1cm4gbmV3IEVycm9yKCdBcnJheSBNZXRob2RzIG11c3QgYmUgcHJvdmlkZWQgYW4gQXJyYXknKTsKfQoKRW51bWVyYXRvciQxLnByb3RvdHlwZS5fZW51bWVyYXRlID0gZnVuY3Rpb24gKGlucHV0KSB7CiAgZm9yICh2YXIgaSA9IDA7IHRoaXMuX3N0YXRlID09PSBQRU5ESU5HICYmIGkgPCBpbnB1dC5sZW5ndGg7IGkrKykgewogICAgdGhpcy5fZWFjaEVudHJ5KGlucHV0W2ldLCBpKTsKICB9Cn07CgpFbnVtZXJhdG9yJDEucHJvdG90eXBlLl9lYWNoRW50cnkgPSBmdW5jdGlvbiAoZW50cnksIGkpIHsKICB2YXIgYyA9IHRoaXMuX2luc3RhbmNlQ29uc3RydWN0b3I7CiAgdmFyIHJlc29sdmUkJDEgPSBjLnJlc29sdmU7CgogIGlmIChyZXNvbHZlJCQxID09PSByZXNvbHZlJDEpIHsKICAgIHZhciBfdGhlbiA9IGdldFRoZW4oZW50cnkpOwoKICAgIGlmIChfdGhlbiA9PT0gdGhlbiAmJiBlbnRyeS5fc3RhdGUgIT09IFBFTkRJTkcpIHsKICAgICAgdGhpcy5fc2V0dGxlZEF0KGVudHJ5Ll9zdGF0ZSwgaSwgZW50cnkuX3Jlc3VsdCk7CiAgICB9IGVsc2UgaWYgKHR5cGVvZiBfdGhlbiAhPT0gJ2Z1bmN0aW9uJykgewogICAgICB0aGlzLl9yZW1haW5pbmctLTsKICAgICAgdGhpcy5fcmVzdWx0W2ldID0gZW50cnk7CiAgICB9IGVsc2UgaWYgKGMgPT09IFByb21pc2UkMikgewogICAgICB2YXIgcHJvbWlzZSA9IG5ldyBjKG5vb3ApOwogICAgICBoYW5kbGVNYXliZVRoZW5hYmxlKHByb21pc2UsIGVudHJ5LCBfdGhlbik7CiAgICAgIHRoaXMuX3dpbGxTZXR0bGVBdChwcm9taXNlLCBpKTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuX3dpbGxTZXR0bGVBdChuZXcgYyhmdW5jdGlvbiAocmVzb2x2ZSQkMSkgewogICAgICAgIHJldHVybiByZXNvbHZlJCQxKGVudHJ5KTsKICAgICAgfSksIGkpOwogICAgfQogIH0gZWxzZSB7CiAgICB0aGlzLl93aWxsU2V0dGxlQXQocmVzb2x2ZSQkMShlbnRyeSksIGkpOwogIH0KfTsKCkVudW1lcmF0b3IkMS5wcm90b3R5cGUuX3NldHRsZWRBdCA9IGZ1bmN0aW9uIChzdGF0ZSwgaSwgdmFsdWUpIHsKICB2YXIgcHJvbWlzZSA9IHRoaXMucHJvbWlzZTsKCiAgaWYgKHByb21pc2UuX3N0YXRlID09PSBQRU5ESU5HKSB7CiAgICB0aGlzLl9yZW1haW5pbmctLTsKCiAgICBpZiAoc3RhdGUgPT09IFJFSkVDVEVEKSB7CiAgICAgIHJlamVjdChwcm9taXNlLCB2YWx1ZSk7CiAgICB9IGVsc2UgewogICAgICB0aGlzLl9yZXN1bHRbaV0gPSB2YWx1ZTsKICAgIH0KICB9CgogIGlmICh0aGlzLl9yZW1haW5pbmcgPT09IDApIHsKICAgIGZ1bGZpbGwocHJvbWlzZSwgdGhpcy5fcmVzdWx0KTsKICB9Cn07CgpFbnVtZXJhdG9yJDEucHJvdG90eXBlLl93aWxsU2V0dGxlQXQgPSBmdW5jdGlvbiAocHJvbWlzZSwgaSkgewogIHZhciBlbnVtZXJhdG9yID0gdGhpczsKCiAgc3Vic2NyaWJlKHByb21pc2UsIHVuZGVmaW5lZCwgZnVuY3Rpb24gKHZhbHVlKSB7CiAgICByZXR1cm4gZW51bWVyYXRvci5fc2V0dGxlZEF0KEZVTEZJTExFRCwgaSwgdmFsdWUpOwogIH0sIGZ1bmN0aW9uIChyZWFzb24pIHsKICAgIHJldHVybiBlbnVtZXJhdG9yLl9zZXR0bGVkQXQoUkVKRUNURUQsIGksIHJlYXNvbik7CiAgfSk7Cn07CgovKioKICBgUHJvbWlzZS5hbGxgIGFjY2VwdHMgYW4gYXJyYXkgb2YgcHJvbWlzZXMsIGFuZCByZXR1cm5zIGEgbmV3IHByb21pc2Ugd2hpY2gKICBpcyBmdWxmaWxsZWQgd2l0aCBhbiBhcnJheSBvZiBmdWxmaWxsbWVudCB2YWx1ZXMgZm9yIHRoZSBwYXNzZWQgcHJvbWlzZXMsIG9yCiAgcmVqZWN0ZWQgd2l0aCB0aGUgcmVhc29uIG9mIHRoZSBmaXJzdCBwYXNzZWQgcHJvbWlzZSB0byBiZSByZWplY3RlZC4gSXQgY2FzdHMgYWxsCiAgZWxlbWVudHMgb2YgdGhlIHBhc3NlZCBpdGVyYWJsZSB0byBwcm9taXNlcyBhcyBpdCBydW5zIHRoaXMgYWxnb3JpdGhtLgoKICBFeGFtcGxlOgoKICBgYGBqYXZhc2NyaXB0CiAgbGV0IHByb21pc2UxID0gcmVzb2x2ZSgxKTsKICBsZXQgcHJvbWlzZTIgPSByZXNvbHZlKDIpOwogIGxldCBwcm9taXNlMyA9IHJlc29sdmUoMyk7CiAgbGV0IHByb21pc2VzID0gWyBwcm9taXNlMSwgcHJvbWlzZTIsIHByb21pc2UzIF07CgogIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKGZ1bmN0aW9uKGFycmF5KXsKICAgIC8vIFRoZSBhcnJheSBoZXJlIHdvdWxkIGJlIFsgMSwgMiwgMyBdOwogIH0pOwogIGBgYAoKICBJZiBhbnkgb2YgdGhlIGBwcm9taXNlc2AgZ2l2ZW4gdG8gYGFsbGAgYXJlIHJlamVjdGVkLCB0aGUgZmlyc3QgcHJvbWlzZQogIHRoYXQgaXMgcmVqZWN0ZWQgd2lsbCBiZSBnaXZlbiBhcyBhbiBhcmd1bWVudCB0byB0aGUgcmV0dXJuZWQgcHJvbWlzZXMncwogIHJlamVjdGlvbiBoYW5kbGVyLiBGb3IgZXhhbXBsZToKCiAgRXhhbXBsZToKCiAgYGBgamF2YXNjcmlwdAogIGxldCBwcm9taXNlMSA9IHJlc29sdmUoMSk7CiAgbGV0IHByb21pc2UyID0gcmVqZWN0KG5ldyBFcnJvcigiMiIpKTsKICBsZXQgcHJvbWlzZTMgPSByZWplY3QobmV3IEVycm9yKCIzIikpOwogIGxldCBwcm9taXNlcyA9IFsgcHJvbWlzZTEsIHByb21pc2UyLCBwcm9taXNlMyBdOwoKICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihmdW5jdGlvbihhcnJheSl7CiAgICAvLyBDb2RlIGhlcmUgbmV2ZXIgcnVucyBiZWNhdXNlIHRoZXJlIGFyZSByZWplY3RlZCBwcm9taXNlcyEKICB9LCBmdW5jdGlvbihlcnJvcikgewogICAgLy8gZXJyb3IubWVzc2FnZSA9PT0gIjIiCiAgfSk7CiAgYGBgCgogIEBtZXRob2QgYWxsCiAgQHN0YXRpYwogIEBwYXJhbSB7QXJyYXl9IGVudHJpZXMgYXJyYXkgb2YgcHJvbWlzZXMKICBAcGFyYW0ge1N0cmluZ30gbGFiZWwgb3B0aW9uYWwgc3RyaW5nIGZvciBsYWJlbGluZyB0aGUgcHJvbWlzZS4KICBVc2VmdWwgZm9yIHRvb2xpbmcuCiAgQHJldHVybiB7UHJvbWlzZX0gcHJvbWlzZSB0aGF0IGlzIGZ1bGZpbGxlZCB3aGVuIGFsbCBgcHJvbWlzZXNgIGhhdmUgYmVlbgogIGZ1bGZpbGxlZCwgb3IgcmVqZWN0ZWQgaWYgYW55IG9mIHRoZW0gYmVjb21lIHJlamVjdGVkLgogIEBzdGF0aWMKKi8KZnVuY3Rpb24gYWxsJDEoZW50cmllcykgewogIHJldHVybiBuZXcgRW51bWVyYXRvciQxKHRoaXMsIGVudHJpZXMpLnByb21pc2U7Cn0KCi8qKgogIGBQcm9taXNlLnJhY2VgIHJldHVybnMgYSBuZXcgcHJvbWlzZSB3aGljaCBpcyBzZXR0bGVkIGluIHRoZSBzYW1lIHdheSBhcyB0aGUKICBmaXJzdCBwYXNzZWQgcHJvbWlzZSB0byBzZXR0bGUuCgogIEV4YW1wbGU6CgogIGBgYGphdmFzY3JpcHQKICBsZXQgcHJvbWlzZTEgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpewogICAgc2V0VGltZW91dChmdW5jdGlvbigpewogICAgICByZXNvbHZlKCdwcm9taXNlIDEnKTsKICAgIH0sIDIwMCk7CiAgfSk7CgogIGxldCBwcm9taXNlMiA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7CiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CiAgICAgIHJlc29sdmUoJ3Byb21pc2UgMicpOwogICAgfSwgMTAwKTsKICB9KTsKCiAgUHJvbWlzZS5yYWNlKFtwcm9taXNlMSwgcHJvbWlzZTJdKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCl7CiAgICAvLyByZXN1bHQgPT09ICdwcm9taXNlIDInIGJlY2F1c2UgaXQgd2FzIHJlc29sdmVkIGJlZm9yZSBwcm9taXNlMQogICAgLy8gd2FzIHJlc29sdmVkLgogIH0pOwogIGBgYAoKICBgUHJvbWlzZS5yYWNlYCBpcyBkZXRlcm1pbmlzdGljIGluIHRoYXQgb25seSB0aGUgc3RhdGUgb2YgdGhlIGZpcnN0CiAgc2V0dGxlZCBwcm9taXNlIG1hdHRlcnMuIEZvciBleGFtcGxlLCBldmVuIGlmIG90aGVyIHByb21pc2VzIGdpdmVuIHRvIHRoZQogIGBwcm9taXNlc2AgYXJyYXkgYXJndW1lbnQgYXJlIHJlc29sdmVkLCBidXQgdGhlIGZpcnN0IHNldHRsZWQgcHJvbWlzZSBoYXMKICBiZWNvbWUgcmVqZWN0ZWQgYmVmb3JlIHRoZSBvdGhlciBwcm9taXNlcyBiZWNhbWUgZnVsZmlsbGVkLCB0aGUgcmV0dXJuZWQKICBwcm9taXNlIHdpbGwgYmVjb21lIHJlamVjdGVkOgoKICBgYGBqYXZhc2NyaXB0CiAgbGV0IHByb21pc2UxID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsKICAgICAgcmVzb2x2ZSgncHJvbWlzZSAxJyk7CiAgICB9LCAyMDApOwogIH0pOwoKICBsZXQgcHJvbWlzZTIgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpewogICAgc2V0VGltZW91dChmdW5jdGlvbigpewogICAgICByZWplY3QobmV3IEVycm9yKCdwcm9taXNlIDInKSk7CiAgICB9LCAxMDApOwogIH0pOwoKICBQcm9taXNlLnJhY2UoW3Byb21pc2UxLCBwcm9taXNlMl0pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXsKICAgIC8vIENvZGUgaGVyZSBuZXZlciBydW5zCiAgfSwgZnVuY3Rpb24ocmVhc29uKXsKICAgIC8vIHJlYXNvbi5tZXNzYWdlID09PSAncHJvbWlzZSAyJyBiZWNhdXNlIHByb21pc2UgMiBiZWNhbWUgcmVqZWN0ZWQgYmVmb3JlCiAgICAvLyBwcm9taXNlIDEgYmVjYW1lIGZ1bGZpbGxlZAogIH0pOwogIGBgYAoKICBBbiBleGFtcGxlIHJlYWwtd29ybGQgdXNlIGNhc2UgaXMgaW1wbGVtZW50aW5nIHRpbWVvdXRzOgoKICBgYGBqYXZhc2NyaXB0CiAgUHJvbWlzZS5yYWNlKFthamF4KCdmb28uanNvbicpLCB0aW1lb3V0KDUwMDApXSkKICBgYGAKCiAgQG1ldGhvZCByYWNlCiAgQHN0YXRpYwogIEBwYXJhbSB7QXJyYXl9IHByb21pc2VzIGFycmF5IG9mIHByb21pc2VzIHRvIG9ic2VydmUKICBVc2VmdWwgZm9yIHRvb2xpbmcuCiAgQHJldHVybiB7UHJvbWlzZX0gYSBwcm9taXNlIHdoaWNoIHNldHRsZXMgaW4gdGhlIHNhbWUgd2F5IGFzIHRoZSBmaXJzdCBwYXNzZWQKICBwcm9taXNlIHRvIHNldHRsZS4KKi8KZnVuY3Rpb24gcmFjZSQxKGVudHJpZXMpIHsKICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqLwogIHZhciBDb25zdHJ1Y3RvciA9IHRoaXM7CgogIGlmICghaXNBcnJheShlbnRyaWVzKSkgewogICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3RvcihmdW5jdGlvbiAoXywgcmVqZWN0KSB7CiAgICAgIHJldHVybiByZWplY3QobmV3IFR5cGVFcnJvcignWW91IG11c3QgcGFzcyBhbiBhcnJheSB0byByYWNlLicpKTsKICAgIH0pOwogIH0gZWxzZSB7CiAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgdmFyIGxlbmd0aCA9IGVudHJpZXMubGVuZ3RoOwogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgQ29uc3RydWN0b3IucmVzb2x2ZShlbnRyaWVzW2ldKS50aGVuKHJlc29sdmUsIHJlamVjdCk7CiAgICAgIH0KICAgIH0pOwogIH0KfQoKLyoqCiAgYFByb21pc2UucmVqZWN0YCByZXR1cm5zIGEgcHJvbWlzZSByZWplY3RlZCB3aXRoIHRoZSBwYXNzZWQgYHJlYXNvbmAuCiAgSXQgaXMgc2hvcnRoYW5kIGZvciB0aGUgZm9sbG93aW5nOgoKICBgYGBqYXZhc2NyaXB0CiAgbGV0IHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpewogICAgcmVqZWN0KG5ldyBFcnJvcignV0hPT1BTJykpOwogIH0pOwoKICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpewogICAgLy8gQ29kZSBoZXJlIGRvZXNuJ3QgcnVuIGJlY2F1c2UgdGhlIHByb21pc2UgaXMgcmVqZWN0ZWQhCiAgfSwgZnVuY3Rpb24ocmVhc29uKXsKICAgIC8vIHJlYXNvbi5tZXNzYWdlID09PSAnV0hPT1BTJwogIH0pOwogIGBgYAoKICBJbnN0ZWFkIG9mIHdyaXRpbmcgdGhlIGFib3ZlLCB5b3VyIGNvZGUgbm93IHNpbXBseSBiZWNvbWVzIHRoZSBmb2xsb3dpbmc6CgogIGBgYGphdmFzY3JpcHQKICBsZXQgcHJvbWlzZSA9IFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignV0hPT1BTJykpOwoKICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpewogICAgLy8gQ29kZSBoZXJlIGRvZXNuJ3QgcnVuIGJlY2F1c2UgdGhlIHByb21pc2UgaXMgcmVqZWN0ZWQhCiAgfSwgZnVuY3Rpb24ocmVhc29uKXsKICAgIC8vIHJlYXNvbi5tZXNzYWdlID09PSAnV0hPT1BTJwogIH0pOwogIGBgYAoKICBAbWV0aG9kIHJlamVjdAogIEBzdGF0aWMKICBAcGFyYW0ge0FueX0gcmVhc29uIHZhbHVlIHRoYXQgdGhlIHJldHVybmVkIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZCB3aXRoLgogIFVzZWZ1bCBmb3IgdG9vbGluZy4KICBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2UgcmVqZWN0ZWQgd2l0aCB0aGUgZ2l2ZW4gYHJlYXNvbmAuCiovCmZ1bmN0aW9uIHJlamVjdCQxKHJlYXNvbikgewogIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovCiAgdmFyIENvbnN0cnVjdG9yID0gdGhpczsKICB2YXIgcHJvbWlzZSA9IG5ldyBDb25zdHJ1Y3Rvcihub29wKTsKICByZWplY3QocHJvbWlzZSwgcmVhc29uKTsKICByZXR1cm4gcHJvbWlzZTsKfQoKZnVuY3Rpb24gbmVlZHNSZXNvbHZlcigpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCdZb3UgbXVzdCBwYXNzIGEgcmVzb2x2ZXIgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIHRoZSBwcm9taXNlIGNvbnN0cnVjdG9yJyk7Cn0KCmZ1bmN0aW9uIG5lZWRzTmV3KCkgewogIHRocm93IG5ldyBUeXBlRXJyb3IoIkZhaWxlZCB0byBjb25zdHJ1Y3QgJ1Byb21pc2UnOiBQbGVhc2UgdXNlIHRoZSAnbmV3JyBvcGVyYXRvciwgdGhpcyBvYmplY3QgY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLiIpOwp9CgovKioKICBQcm9taXNlIG9iamVjdHMgcmVwcmVzZW50IHRoZSBldmVudHVhbCByZXN1bHQgb2YgYW4gYXN5bmNocm9ub3VzIG9wZXJhdGlvbi4gVGhlCiAgcHJpbWFyeSB3YXkgb2YgaW50ZXJhY3Rpbmcgd2l0aCBhIHByb21pc2UgaXMgdGhyb3VnaCBpdHMgYHRoZW5gIG1ldGhvZCwgd2hpY2gKICByZWdpc3RlcnMgY2FsbGJhY2tzIHRvIHJlY2VpdmUgZWl0aGVyIGEgcHJvbWlzZSdzIGV2ZW50dWFsIHZhbHVlIG9yIHRoZSByZWFzb24KICB3aHkgdGhlIHByb21pc2UgY2Fubm90IGJlIGZ1bGZpbGxlZC4KCiAgVGVybWlub2xvZ3kKICAtLS0tLS0tLS0tLQoKICAtIGBwcm9taXNlYCBpcyBhbiBvYmplY3Qgb3IgZnVuY3Rpb24gd2l0aCBhIGB0aGVuYCBtZXRob2Qgd2hvc2UgYmVoYXZpb3IgY29uZm9ybXMgdG8gdGhpcyBzcGVjaWZpY2F0aW9uLgogIC0gYHRoZW5hYmxlYCBpcyBhbiBvYmplY3Qgb3IgZnVuY3Rpb24gdGhhdCBkZWZpbmVzIGEgYHRoZW5gIG1ldGhvZC4KICAtIGB2YWx1ZWAgaXMgYW55IGxlZ2FsIEphdmFTY3JpcHQgdmFsdWUgKGluY2x1ZGluZyB1bmRlZmluZWQsIGEgdGhlbmFibGUsIG9yIGEgcHJvbWlzZSkuCiAgLSBgZXhjZXB0aW9uYCBpcyBhIHZhbHVlIHRoYXQgaXMgdGhyb3duIHVzaW5nIHRoZSB0aHJvdyBzdGF0ZW1lbnQuCiAgLSBgcmVhc29uYCBpcyBhIHZhbHVlIHRoYXQgaW5kaWNhdGVzIHdoeSBhIHByb21pc2Ugd2FzIHJlamVjdGVkLgogIC0gYHNldHRsZWRgIHRoZSBmaW5hbCByZXN0aW5nIHN0YXRlIG9mIGEgcHJvbWlzZSwgZnVsZmlsbGVkIG9yIHJlamVjdGVkLgoKICBBIHByb21pc2UgY2FuIGJlIGluIG9uZSBvZiB0aHJlZSBzdGF0ZXM6IHBlbmRpbmcsIGZ1bGZpbGxlZCwgb3IgcmVqZWN0ZWQuCgogIFByb21pc2VzIHRoYXQgYXJlIGZ1bGZpbGxlZCBoYXZlIGEgZnVsZmlsbG1lbnQgdmFsdWUgYW5kIGFyZSBpbiB0aGUgZnVsZmlsbGVkCiAgc3RhdGUuICBQcm9taXNlcyB0aGF0IGFyZSByZWplY3RlZCBoYXZlIGEgcmVqZWN0aW9uIHJlYXNvbiBhbmQgYXJlIGluIHRoZQogIHJlamVjdGVkIHN0YXRlLiAgQSBmdWxmaWxsbWVudCB2YWx1ZSBpcyBuZXZlciBhIHRoZW5hYmxlLgoKICBQcm9taXNlcyBjYW4gYWxzbyBiZSBzYWlkIHRvICpyZXNvbHZlKiBhIHZhbHVlLiAgSWYgdGhpcyB2YWx1ZSBpcyBhbHNvIGEKICBwcm9taXNlLCB0aGVuIHRoZSBvcmlnaW5hbCBwcm9taXNlJ3Mgc2V0dGxlZCBzdGF0ZSB3aWxsIG1hdGNoIHRoZSB2YWx1ZSdzCiAgc2V0dGxlZCBzdGF0ZS4gIFNvIGEgcHJvbWlzZSB0aGF0ICpyZXNvbHZlcyogYSBwcm9taXNlIHRoYXQgcmVqZWN0cyB3aWxsCiAgaXRzZWxmIHJlamVjdCwgYW5kIGEgcHJvbWlzZSB0aGF0ICpyZXNvbHZlcyogYSBwcm9taXNlIHRoYXQgZnVsZmlsbHMgd2lsbAogIGl0c2VsZiBmdWxmaWxsLgoKCiAgQmFzaWMgVXNhZ2U6CiAgLS0tLS0tLS0tLS0tCgogIGBgYGpzCiAgbGV0IHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHsKICAgIC8vIG9uIHN1Y2Nlc3MKICAgIHJlc29sdmUodmFsdWUpOwoKICAgIC8vIG9uIGZhaWx1cmUKICAgIHJlamVjdChyZWFzb24pOwogIH0pOwoKICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpIHsKICAgIC8vIG9uIGZ1bGZpbGxtZW50CiAgfSwgZnVuY3Rpb24ocmVhc29uKSB7CiAgICAvLyBvbiByZWplY3Rpb24KICB9KTsKICBgYGAKCiAgQWR2YW5jZWQgVXNhZ2U6CiAgLS0tLS0tLS0tLS0tLS0tCgogIFByb21pc2VzIHNoaW5lIHdoZW4gYWJzdHJhY3RpbmcgYXdheSBhc3luY2hyb25vdXMgaW50ZXJhY3Rpb25zIHN1Y2ggYXMKICBgWE1MSHR0cFJlcXVlc3Rgcy4KCiAgYGBganMKICBmdW5jdGlvbiBnZXRKU09OKHVybCkgewogICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7CiAgICAgIGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKCiAgICAgIHhoci5vcGVuKCdHRVQnLCB1cmwpOwogICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gaGFuZGxlcjsKICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdqc29uJzsKICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0FjY2VwdCcsICdhcHBsaWNhdGlvbi9qc29uJyk7CiAgICAgIHhoci5zZW5kKCk7CgogICAgICBmdW5jdGlvbiBoYW5kbGVyKCkgewogICAgICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IHRoaXMuRE9ORSkgewogICAgICAgICAgaWYgKHRoaXMuc3RhdHVzID09PSAyMDApIHsKICAgICAgICAgICAgcmVzb2x2ZSh0aGlzLnJlc3BvbnNlKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ2dldEpTT046IGAnICsgdXJsICsgJ2AgZmFpbGVkIHdpdGggc3RhdHVzOiBbJyArIHRoaXMuc3RhdHVzICsgJ10nKSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9OwogICAgfSk7CiAgfQoKICBnZXRKU09OKCcvcG9zdHMuanNvbicpLnRoZW4oZnVuY3Rpb24oanNvbikgewogICAgLy8gb24gZnVsZmlsbG1lbnQKICB9LCBmdW5jdGlvbihyZWFzb24pIHsKICAgIC8vIG9uIHJlamVjdGlvbgogIH0pOwogIGBgYAoKICBVbmxpa2UgY2FsbGJhY2tzLCBwcm9taXNlcyBhcmUgZ3JlYXQgY29tcG9zYWJsZSBwcmltaXRpdmVzLgoKICBgYGBqcwogIFByb21pc2UuYWxsKFsKICAgIGdldEpTT04oJy9wb3N0cycpLAogICAgZ2V0SlNPTignL2NvbW1lbnRzJykKICBdKS50aGVuKGZ1bmN0aW9uKHZhbHVlcyl7CiAgICB2YWx1ZXNbMF0gLy8gPT4gcG9zdHNKU09OCiAgICB2YWx1ZXNbMV0gLy8gPT4gY29tbWVudHNKU09OCgogICAgcmV0dXJuIHZhbHVlczsKICB9KTsKICBgYGAKCiAgQGNsYXNzIFByb21pc2UKICBAcGFyYW0ge2Z1bmN0aW9ufSByZXNvbHZlcgogIFVzZWZ1bCBmb3IgdG9vbGluZy4KICBAY29uc3RydWN0b3IKKi8KZnVuY3Rpb24gUHJvbWlzZSQyKHJlc29sdmVyKSB7CiAgdGhpc1tQUk9NSVNFX0lEXSA9IG5leHRJZCgpOwogIHRoaXMuX3Jlc3VsdCA9IHRoaXMuX3N0YXRlID0gdW5kZWZpbmVkOwogIHRoaXMuX3N1YnNjcmliZXJzID0gW107CgogIGlmIChub29wICE9PSByZXNvbHZlcikgewogICAgdHlwZW9mIHJlc29sdmVyICE9PSAnZnVuY3Rpb24nICYmIG5lZWRzUmVzb2x2ZXIoKTsKICAgIHRoaXMgaW5zdGFuY2VvZiBQcm9taXNlJDIgPyBpbml0aWFsaXplUHJvbWlzZSh0aGlzLCByZXNvbHZlcikgOiBuZWVkc05ldygpOwogIH0KfQoKUHJvbWlzZSQyLmFsbCA9IGFsbCQxOwpQcm9taXNlJDIucmFjZSA9IHJhY2UkMTsKUHJvbWlzZSQyLnJlc29sdmUgPSByZXNvbHZlJDE7ClByb21pc2UkMi5yZWplY3QgPSByZWplY3QkMTsKUHJvbWlzZSQyLl9zZXRTY2hlZHVsZXIgPSBzZXRTY2hlZHVsZXI7ClByb21pc2UkMi5fc2V0QXNhcCA9IHNldEFzYXA7ClByb21pc2UkMi5fYXNhcCA9IGFzYXA7CgpQcm9taXNlJDIucHJvdG90eXBlID0gewogIGNvbnN0cnVjdG9yOiBQcm9taXNlJDIsCgogIC8qKgogICAgVGhlIHByaW1hcnkgd2F5IG9mIGludGVyYWN0aW5nIHdpdGggYSBwcm9taXNlIGlzIHRocm91Z2ggaXRzIGB0aGVuYCBtZXRob2QsCiAgICB3aGljaCByZWdpc3RlcnMgY2FsbGJhY2tzIHRvIHJlY2VpdmUgZWl0aGVyIGEgcHJvbWlzZSdzIGV2ZW50dWFsIHZhbHVlIG9yIHRoZQogICAgcmVhc29uIHdoeSB0aGUgcHJvbWlzZSBjYW5ub3QgYmUgZnVsZmlsbGVkLgogIAogICAgYGBganMKICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbih1c2VyKXsKICAgICAgLy8gdXNlciBpcyBhdmFpbGFibGUKICAgIH0sIGZ1bmN0aW9uKHJlYXNvbil7CiAgICAgIC8vIHVzZXIgaXMgdW5hdmFpbGFibGUsIGFuZCB5b3UgYXJlIGdpdmVuIHRoZSByZWFzb24gd2h5CiAgICB9KTsKICAgIGBgYAogIAogICAgQ2hhaW5pbmcKICAgIC0tLS0tLS0tCiAgCiAgICBUaGUgcmV0dXJuIHZhbHVlIG9mIGB0aGVuYCBpcyBpdHNlbGYgYSBwcm9taXNlLiAgVGhpcyBzZWNvbmQsICdkb3duc3RyZWFtJwogICAgcHJvbWlzZSBpcyByZXNvbHZlZCB3aXRoIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGZpcnN0IHByb21pc2UncyBmdWxmaWxsbWVudAogICAgb3IgcmVqZWN0aW9uIGhhbmRsZXIsIG9yIHJlamVjdGVkIGlmIHRoZSBoYW5kbGVyIHRocm93cyBhbiBleGNlcHRpb24uCiAgCiAgICBgYGBqcwogICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7CiAgICAgIHJldHVybiB1c2VyLm5hbWU7CiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7CiAgICAgIHJldHVybiAnZGVmYXVsdCBuYW1lJzsKICAgIH0pLnRoZW4oZnVuY3Rpb24gKHVzZXJOYW1lKSB7CiAgICAgIC8vIElmIGBmaW5kVXNlcmAgZnVsZmlsbGVkLCBgdXNlck5hbWVgIHdpbGwgYmUgdGhlIHVzZXIncyBuYW1lLCBvdGhlcndpc2UgaXQKICAgICAgLy8gd2lsbCBiZSBgJ2RlZmF1bHQgbmFtZSdgCiAgICB9KTsKICAKICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikgewogICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZvdW5kIHVzZXIsIGJ1dCBzdGlsbCB1bmhhcHB5Jyk7CiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcignYGZpbmRVc2VyYCByZWplY3RlZCBhbmQgd2UncmUgdW5oYXBweScpOwogICAgfSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgLy8gbmV2ZXIgcmVhY2hlZAogICAgfSwgZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAvLyBpZiBgZmluZFVzZXJgIGZ1bGZpbGxlZCwgYHJlYXNvbmAgd2lsbCBiZSAnRm91bmQgdXNlciwgYnV0IHN0aWxsIHVuaGFwcHknLgogICAgICAvLyBJZiBgZmluZFVzZXJgIHJlamVjdGVkLCBgcmVhc29uYCB3aWxsIGJlICdgZmluZFVzZXJgIHJlamVjdGVkIGFuZCB3ZSdyZSB1bmhhcHB5Jy4KICAgIH0pOwogICAgYGBgCiAgICBJZiB0aGUgZG93bnN0cmVhbSBwcm9taXNlIGRvZXMgbm90IHNwZWNpZnkgYSByZWplY3Rpb24gaGFuZGxlciwgcmVqZWN0aW9uIHJlYXNvbnMgd2lsbCBiZSBwcm9wYWdhdGVkIGZ1cnRoZXIgZG93bnN0cmVhbS4KICAKICAgIGBgYGpzCiAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHsKICAgICAgdGhyb3cgbmV3IFBlZGFnb2dpY2FsRXhjZXB0aW9uKCdVcHN0cmVhbSBlcnJvcicpOwogICAgfSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgLy8gbmV2ZXIgcmVhY2hlZAogICAgfSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgLy8gbmV2ZXIgcmVhY2hlZAogICAgfSwgZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAvLyBUaGUgYFBlZGdhZ29jaWFsRXhjZXB0aW9uYCBpcyBwcm9wYWdhdGVkIGFsbCB0aGUgd2F5IGRvd24gdG8gaGVyZQogICAgfSk7CiAgICBgYGAKICAKICAgIEFzc2ltaWxhdGlvbgogICAgLS0tLS0tLS0tLS0tCiAgCiAgICBTb21ldGltZXMgdGhlIHZhbHVlIHlvdSB3YW50IHRvIHByb3BhZ2F0ZSB0byBhIGRvd25zdHJlYW0gcHJvbWlzZSBjYW4gb25seSBiZQogICAgcmV0cmlldmVkIGFzeW5jaHJvbm91c2x5LiBUaGlzIGNhbiBiZSBhY2hpZXZlZCBieSByZXR1cm5pbmcgYSBwcm9taXNlIGluIHRoZQogICAgZnVsZmlsbG1lbnQgb3IgcmVqZWN0aW9uIGhhbmRsZXIuIFRoZSBkb3duc3RyZWFtIHByb21pc2Ugd2lsbCB0aGVuIGJlIHBlbmRpbmcKICAgIHVudGlsIHRoZSByZXR1cm5lZCBwcm9taXNlIGlzIHNldHRsZWQuIFRoaXMgaXMgY2FsbGVkICphc3NpbWlsYXRpb24qLgogIAogICAgYGBganMKICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikgewogICAgICByZXR1cm4gZmluZENvbW1lbnRzQnlBdXRob3IodXNlcik7CiAgICB9KS50aGVuKGZ1bmN0aW9uIChjb21tZW50cykgewogICAgICAvLyBUaGUgdXNlcidzIGNvbW1lbnRzIGFyZSBub3cgYXZhaWxhYmxlCiAgICB9KTsKICAgIGBgYAogIAogICAgSWYgdGhlIGFzc2ltbGlhdGVkIHByb21pc2UgcmVqZWN0cywgdGhlbiB0aGUgZG93bnN0cmVhbSBwcm9taXNlIHdpbGwgYWxzbyByZWplY3QuCiAgCiAgICBgYGBqcwogICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7CiAgICAgIHJldHVybiBmaW5kQ29tbWVudHNCeUF1dGhvcih1c2VyKTsKICAgIH0pLnRoZW4oZnVuY3Rpb24gKGNvbW1lbnRzKSB7CiAgICAgIC8vIElmIGBmaW5kQ29tbWVudHNCeUF1dGhvcmAgZnVsZmlsbHMsIHdlJ2xsIGhhdmUgdGhlIHZhbHVlIGhlcmUKICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgLy8gSWYgYGZpbmRDb21tZW50c0J5QXV0aG9yYCByZWplY3RzLCB3ZSdsbCBoYXZlIHRoZSByZWFzb24gaGVyZQogICAgfSk7CiAgICBgYGAKICAKICAgIFNpbXBsZSBFeGFtcGxlCiAgICAtLS0tLS0tLS0tLS0tLQogIAogICAgU3luY2hyb25vdXMgRXhhbXBsZQogIAogICAgYGBgamF2YXNjcmlwdAogICAgbGV0IHJlc3VsdDsKICAKICAgIHRyeSB7CiAgICAgIHJlc3VsdCA9IGZpbmRSZXN1bHQoKTsKICAgICAgLy8gc3VjY2VzcwogICAgfSBjYXRjaChyZWFzb24pIHsKICAgICAgLy8gZmFpbHVyZQogICAgfQogICAgYGBgCiAgCiAgICBFcnJiYWNrIEV4YW1wbGUKICAKICAgIGBgYGpzCiAgICBmaW5kUmVzdWx0KGZ1bmN0aW9uKHJlc3VsdCwgZXJyKXsKICAgICAgaWYgKGVycikgewogICAgICAgIC8vIGZhaWx1cmUKICAgICAgfSBlbHNlIHsKICAgICAgICAvLyBzdWNjZXNzCiAgICAgIH0KICAgIH0pOwogICAgYGBgCiAgCiAgICBQcm9taXNlIEV4YW1wbGU7CiAgCiAgICBgYGBqYXZhc2NyaXB0CiAgICBmaW5kUmVzdWx0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpewogICAgICAvLyBzdWNjZXNzCiAgICB9LCBmdW5jdGlvbihyZWFzb24pewogICAgICAvLyBmYWlsdXJlCiAgICB9KTsKICAgIGBgYAogIAogICAgQWR2YW5jZWQgRXhhbXBsZQogICAgLS0tLS0tLS0tLS0tLS0KICAKICAgIFN5bmNocm9ub3VzIEV4YW1wbGUKICAKICAgIGBgYGphdmFzY3JpcHQKICAgIGxldCBhdXRob3IsIGJvb2tzOwogIAogICAgdHJ5IHsKICAgICAgYXV0aG9yID0gZmluZEF1dGhvcigpOwogICAgICBib29rcyAgPSBmaW5kQm9va3NCeUF1dGhvcihhdXRob3IpOwogICAgICAvLyBzdWNjZXNzCiAgICB9IGNhdGNoKHJlYXNvbikgewogICAgICAvLyBmYWlsdXJlCiAgICB9CiAgICBgYGAKICAKICAgIEVycmJhY2sgRXhhbXBsZQogIAogICAgYGBganMKICAKICAgIGZ1bmN0aW9uIGZvdW5kQm9va3MoYm9va3MpIHsKICAKICAgIH0KICAKICAgIGZ1bmN0aW9uIGZhaWx1cmUocmVhc29uKSB7CiAgCiAgICB9CiAgCiAgICBmaW5kQXV0aG9yKGZ1bmN0aW9uKGF1dGhvciwgZXJyKXsKICAgICAgaWYgKGVycikgewogICAgICAgIGZhaWx1cmUoZXJyKTsKICAgICAgICAvLyBmYWlsdXJlCiAgICAgIH0gZWxzZSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGZpbmRCb29va3NCeUF1dGhvcihhdXRob3IsIGZ1bmN0aW9uKGJvb2tzLCBlcnIpIHsKICAgICAgICAgICAgaWYgKGVycikgewogICAgICAgICAgICAgIGZhaWx1cmUoZXJyKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgZm91bmRCb29rcyhib29rcyk7CiAgICAgICAgICAgICAgfSBjYXRjaChyZWFzb24pIHsKICAgICAgICAgICAgICAgIGZhaWx1cmUocmVhc29uKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0gY2F0Y2goZXJyb3IpIHsKICAgICAgICAgIGZhaWx1cmUoZXJyKTsKICAgICAgICB9CiAgICAgICAgLy8gc3VjY2VzcwogICAgICB9CiAgICB9KTsKICAgIGBgYAogIAogICAgUHJvbWlzZSBFeGFtcGxlOwogIAogICAgYGBgamF2YXNjcmlwdAogICAgZmluZEF1dGhvcigpLgogICAgICB0aGVuKGZpbmRCb29rc0J5QXV0aG9yKS4KICAgICAgdGhlbihmdW5jdGlvbihib29rcyl7CiAgICAgICAgLy8gZm91bmQgYm9va3MKICAgIH0pLmNhdGNoKGZ1bmN0aW9uKHJlYXNvbil7CiAgICAgIC8vIHNvbWV0aGluZyB3ZW50IHdyb25nCiAgICB9KTsKICAgIGBgYAogIAogICAgQG1ldGhvZCB0aGVuCiAgICBAcGFyYW0ge0Z1bmN0aW9ufSBvbkZ1bGZpbGxlZAogICAgQHBhcmFtIHtGdW5jdGlvbn0gb25SZWplY3RlZAogICAgVXNlZnVsIGZvciB0b29saW5nLgogICAgQHJldHVybiB7UHJvbWlzZX0KICAqLwogIHRoZW46IHRoZW4sCgogIC8qKgogICAgYGNhdGNoYCBpcyBzaW1wbHkgc3VnYXIgZm9yIGB0aGVuKHVuZGVmaW5lZCwgb25SZWplY3Rpb24pYCB3aGljaCBtYWtlcyBpdCB0aGUgc2FtZQogICAgYXMgdGhlIGNhdGNoIGJsb2NrIG9mIGEgdHJ5L2NhdGNoIHN0YXRlbWVudC4KICAKICAgIGBgYGpzCiAgICBmdW5jdGlvbiBmaW5kQXV0aG9yKCl7CiAgICAgIHRocm93IG5ldyBFcnJvcignY291bGRuJ3QgZmluZCB0aGF0IGF1dGhvcicpOwogICAgfQogIAogICAgLy8gc3luY2hyb25vdXMKICAgIHRyeSB7CiAgICAgIGZpbmRBdXRob3IoKTsKICAgIH0gY2F0Y2gocmVhc29uKSB7CiAgICAgIC8vIHNvbWV0aGluZyB3ZW50IHdyb25nCiAgICB9CiAgCiAgICAvLyBhc3luYyB3aXRoIHByb21pc2VzCiAgICBmaW5kQXV0aG9yKCkuY2F0Y2goZnVuY3Rpb24ocmVhc29uKXsKICAgICAgLy8gc29tZXRoaW5nIHdlbnQgd3JvbmcKICAgIH0pOwogICAgYGBgCiAgCiAgICBAbWV0aG9kIGNhdGNoCiAgICBAcGFyYW0ge0Z1bmN0aW9ufSBvblJlamVjdGlvbgogICAgVXNlZnVsIGZvciB0b29saW5nLgogICAgQHJldHVybiB7UHJvbWlzZX0KICAqLwogICdjYXRjaCc6IGZ1bmN0aW9uIF9jYXRjaChvblJlamVjdGlvbikgewogICAgcmV0dXJuIHRoaXMudGhlbihudWxsLCBvblJlamVjdGlvbik7CiAgfQp9OwoKLypnbG9iYWwgc2VsZiovCmZ1bmN0aW9uIHBvbHlmaWxsJDEoKSB7CiAgICB2YXIgbG9jYWwgPSB1bmRlZmluZWQ7CgogICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgbG9jYWwgPSBnbG9iYWw7CiAgICB9IGVsc2UgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykgewogICAgICAgIGxvY2FsID0gc2VsZjsKICAgIH0gZWxzZSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgbG9jYWwgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpOwogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwb2x5ZmlsbCBmYWlsZWQgYmVjYXVzZSBnbG9iYWwgb2JqZWN0IGlzIHVuYXZhaWxhYmxlIGluIHRoaXMgZW52aXJvbm1lbnQnKTsKICAgICAgICB9CiAgICB9CgogICAgdmFyIFAgPSBsb2NhbC5Qcm9taXNlOwoKICAgIGlmIChQKSB7CiAgICAgICAgdmFyIHByb21pc2VUb1N0cmluZyA9IG51bGw7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgcHJvbWlzZVRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFAucmVzb2x2ZSgpKTsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgIC8vIHNpbGVudGx5IGlnbm9yZWQKICAgICAgICB9CgogICAgICAgIGlmIChwcm9taXNlVG9TdHJpbmcgPT09ICdbb2JqZWN0IFByb21pc2VdJyAmJiAhUC5jYXN0KSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgbG9jYWwuUHJvbWlzZSA9IFByb21pc2UkMjsKfQoKLy8gU3RyYW5nZSBjb21wYXQuLgpQcm9taXNlJDIucG9seWZpbGwgPSBwb2x5ZmlsbCQxOwpQcm9taXNlJDIuUHJvbWlzZSA9IFByb21pc2UkMjsKCnJldHVybiBQcm9taXNlJDI7Cgp9KSkpOwoKLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXM2LXByb21pc2UubWFwCgovKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyg3KSwgX193ZWJwYWNrX3JlcXVpcmVfXygzKSkpCgovKioqLyB9KSwKLyogNyAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7CgovLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXIKdmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9OwoKLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0Ci8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpcwovLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhCi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuCgp2YXIgY2FjaGVkU2V0VGltZW91dDsKdmFyIGNhY2hlZENsZWFyVGltZW91dDsKCmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTsKfQpmdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHsKICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7Cn0KKGZ1bmN0aW9uICgpIHsKICAgIHRyeSB7CiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0OwogICAgICAgIH0KICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDsKICAgIH0KICAgIHRyeSB7CiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7CiAgICAgICAgfQogICAgfSBjYXRjaCAoZSkgewogICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7CiAgICB9Cn0gKCkpCmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7CiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkgewogICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9ucwogICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7CiAgICB9CiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZAogICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7CiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7CiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTsKICAgIH0KICAgIHRyeSB7CiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzcwogICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7CiAgICB9IGNhdGNoKGUpewogICAgICAgIHRyeSB7CiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseQogICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7CiAgICAgICAgfSBjYXRjaChlKXsKICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IKICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApOwogICAgICAgIH0KICAgIH0KCgp9CmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHsKICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkgewogICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9ucwogICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTsKICAgIH0KICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWQKICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkgewogICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDsKICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7CiAgICB9CiAgICB0cnkgewogICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3MKICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7CiAgICB9IGNhdGNoIChlKXsKICAgICAgICB0cnkgewogICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5CiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpOwogICAgICAgIH0gY2F0Y2ggKGUpewogICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci4KICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dAogICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTsKICAgICAgICB9CiAgICB9CgoKCn0KdmFyIHF1ZXVlID0gW107CnZhciBkcmFpbmluZyA9IGZhbHNlOwp2YXIgY3VycmVudFF1ZXVlOwp2YXIgcXVldWVJbmRleCA9IC0xOwoKZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkgewogICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7CiAgICAgICAgcmV0dXJuOwogICAgfQogICAgZHJhaW5pbmcgPSBmYWxzZTsKICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7CiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTsKICAgIH0gZWxzZSB7CiAgICAgICAgcXVldWVJbmRleCA9IC0xOwogICAgfQogICAgaWYgKHF1ZXVlLmxlbmd0aCkgewogICAgICAgIGRyYWluUXVldWUoKTsKICAgIH0KfQoKZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHsKICAgIGlmIChkcmFpbmluZykgewogICAgICAgIHJldHVybjsKICAgIH0KICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spOwogICAgZHJhaW5pbmcgPSB0cnVlOwoKICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7CiAgICB3aGlsZShsZW4pIHsKICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTsKICAgICAgICBxdWV1ZSA9IFtdOwogICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHsKICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkgewogICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHF1ZXVlSW5kZXggPSAtMTsKICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7CiAgICB9CiAgICBjdXJyZW50UXVldWUgPSBudWxsOwogICAgZHJhaW5pbmcgPSBmYWxzZTsKICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTsKfQoKcHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHsKICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTsKICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgewogICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldOwogICAgICAgIH0KICAgIH0KICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7CiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykgewogICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7CiAgICB9Cn07CgovLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzCmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkgewogICAgdGhpcy5mdW4gPSBmdW47CiAgICB0aGlzLmFycmF5ID0gYXJyYXk7Cn0KSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkgewogICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7Cn07CnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7CnByb2Nlc3MuYnJvd3NlciA9IHRydWU7CnByb2Nlc3MuZW52ID0ge307CnByb2Nlc3MuYXJndiA9IFtdOwpwcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXMKcHJvY2Vzcy52ZXJzaW9ucyA9IHt9OwoKZnVuY3Rpb24gbm9vcCgpIHt9Cgpwcm9jZXNzLm9uID0gbm9vcDsKcHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7CnByb2Nlc3Mub25jZSA9IG5vb3A7CnByb2Nlc3Mub2ZmID0gbm9vcDsKcHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7CnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDsKcHJvY2Vzcy5lbWl0ID0gbm9vcDsKCnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7Cn07Cgpwcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9Owpwcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikgewogICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTsKfTsKcHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTsKCgovKioqLyB9KSwKLyogOCAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7CgovKiAoaWdub3JlZCkgKi8KCi8qKiovIH0pLAovKiA5ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKCnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHsKICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7CiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJvYmplY3QiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSAiZnVuY3Rpb24iKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7CiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByOwogICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjsKfTsKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgeyB2YWx1ZTogdHJ1ZSB9KTsKdmFyIHV0aWxzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpOwp2YXIgQXBwID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkgewogICAgZnVuY3Rpb24gQXBwKCkgewogICAgICAgIHRoaXMucHJvdmlkZXMgPSBbXTsKICAgICAgICB0aGlzLm9uU2Nyb2xsSGFuZGxlciA9IFtdOwogICAgICAgIHRoaXMub25Ib3ZlckhhbmRsZXIgPSBbXTsKICAgIH0KICAgIEFwcC5wcm90b3R5cGUuc2V0Q29uZmlnID0gZnVuY3Rpb24gKGNvbmZpZykgewogICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnOwogICAgICAgIHJldHVybiB0aGlzOwogICAgfTsKICAgIEFwcC5wcm90b3R5cGUucHJvdmlkZSA9IGZ1bmN0aW9uIChwcm92aWRlcnMpIHsKICAgICAgICB0aGlzLnByb3ZpZGVzID0gcHJvdmlkZXJzOwogICAgICAgIHJldHVybiB0aGlzOwogICAgfTsKICAgIEFwcC5wcm90b3R5cGUuZ2V0UHJvdmlkZXIgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIG1hdGNoUHJvdmlkZXJzID0gW107CiAgICAgICAgdmFyIHByb3ZpZGVzID0gdGhpcy5wcm92aWRlcy5zbGljZSgpOwogICAgICAgIHdoaWxlIChwcm92aWRlcy5sZW5ndGgpIHsKICAgICAgICAgICAgdmFyIHByb3ZpZGVDb25maWcgPSBwcm92aWRlcy5zaGlmdCgpOwogICAgICAgICAgICAvLyDljLnphY3ln5/lkI3vvIzpgILlkIjmraPnoa4KICAgICAgICAgICAgaWYgKHByb3ZpZGVDb25maWcudGVzdC50ZXN0KGRvY3VtZW50LmRvbWFpbikpIHsKICAgICAgICAgICAgICAgIG1hdGNoUHJvdmlkZXJzLnB1c2gocHJvdmlkZUNvbmZpZyk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIG1hdGNoUHJvdmlkZXJzOwogICAgfTsKICAgIEFwcC5wcm90b3R5cGUub25Ib3ZlciA9IGZ1bmN0aW9uIChldmVudCkgewogICAgICAgIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7CiAgICAgICAgaWYgKHRhcmdldC50YWdOYW1lICE9PSAnQScpCiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB0aGlzLm9uSG92ZXJIYW5kbGVyLmZvckVhY2goZnVuY3Rpb24gKGZ1bmMpIHsKICAgICAgICAgICAgZnVuYyh0YXJnZXQpOwogICAgICAgIH0pOwogICAgfTsKICAgIEFwcC5wcm90b3R5cGUub25TY3JvbGwgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgLy8g562b6YCJ5omA5pyJ5Zyo5Y+v6KeG5Yy65Z+f5YaF55qEQeagh+etvgogICAgICAgIHZhciBhbGxJbnZpZXdBRWxlbWVudHMgPSBbXS5zbGljZQogICAgICAgICAgICAuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdhW2hyZWZePSJodHRwIl0nKSkKICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoYUVsZW1lbnQpIHsKICAgICAgICAgICAgcmV0dXJuIHV0aWxzXzEuaXNJblZpZXcoYUVsZW1lbnQpICYmIHV0aWxzXzEuZ2V0UmVkaXJlY3QoYUVsZW1lbnQpIDw9IDI7CiAgICAgICAgfSk7CiAgICAgICAgdGhpcy5vblNjcm9sbEhhbmRsZXIuZm9yRWFjaChmdW5jdGlvbiAoZnVuYykgewogICAgICAgICAgICBmdW5jKGFsbEludmlld0FFbGVtZW50cyk7CiAgICAgICAgfSk7CiAgICB9OwogICAgQXBwLnByb3RvdHlwZS5ib290c3RyYXAgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgICBhZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgcHJvdmlkZXJzID0gX3RoaXMuZ2V0UHJvdmlkZXIoKTsKICAgICAgICAgICAgd2hpbGUgKHByb3ZpZGVycy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIHZhciBwcm92aWRlQ29uZmlnID0gcHJvdmlkZXJzLnNoaWZ0KCk7CiAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oIltBbnRpLXJlZGlyZWN0XTogTG9hZCAiICsgcHJvdmlkZUNvbmZpZy5uYW1lKTsKICAgICAgICAgICAgICAgIHZhciBwcm92aWRlckNvbnN0cnVjdG9yID0gcHJvdmlkZUNvbmZpZy5wcm92aWRlcjsKICAgICAgICAgICAgICAgIHZhciBwcm92aWRlciA9IG5ldyBwcm92aWRlckNvbnN0cnVjdG9yKCkKICAgICAgICAgICAgICAgICAgICAuc2V0Q29uZmlnKF90aGlzLmNvbmZpZykKICAgICAgICAgICAgICAgICAgICAub25Jbml0KCk7CiAgICAgICAgICAgICAgICBfdGhpcy5vblNjcm9sbEhhbmRsZXIucHVzaChwcm92aWRlci5vblNjcm9sbC5iaW5kKHByb3ZpZGVyKSk7CiAgICAgICAgICAgICAgICBfdGhpcy5vbkhvdmVySGFuZGxlci5wdXNoKHByb3ZpZGVyLm9uSG92ZXIuYmluZChwcm92aWRlcikpOwogICAgICAgICAgICAgICAgLy8g5aaC5p6c6aG16Z2i5aSE5LqO5Yid5aeL55qE54q25oCB77yM5rKh5pyJ5rua5Yqo6L+H77yM5YiZ5Ye65Y+R5LiA5qyhb25TY3JvbGzkuovku7YKICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuc2Nyb2xsWSA8PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgX3RoaXMub25TY3JvbGwoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMub25TY3JvbGwuYmluZCh0aGlzKSk7CiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5vbkhvdmVyLmJpbmQodGhpcykpOwogICAgICAgIGNvbnNvbGUubG9nKCclYyBBbnRpLVJlZGlyZWN0ICVjIENvcHlyaWdodCBceGE5IDIwMTUtJXMgJXMnLCAnZm9udC1mYW1pbHk6ICJIZWx2ZXRpY2EgTmV1ZSIsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7Zm9udC1zaXplOjY0cHg7Y29sb3I6IzAwYmJlZTstd2Via2l0LXRleHQtZmlsbC1jb2xvcjojMDBiYmVlOy13ZWJraXQtdGV4dC1zdHJva2U6IDFweCAjMDBiYmVlOycsICdmb250LXNpemU6MTJweDtjb2xvcjojOTk5OTk5OycsIG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKSwgJ1xuJyArICdBdXRob3IgQEF4ZXRyb3knKTsKICAgIH07CiAgICBfX2RlY29yYXRlKFsKICAgICAgICB1dGlsc18xLmRlYm91bmNlRGVjb3JhdG9yKDMwMCkKICAgIF0sIEFwcC5wcm90b3R5cGUsICJvblNjcm9sbCIsIG51bGwpOwogICAgcmV0dXJuIEFwcDsKfSgpKTsKZXhwb3J0cy5BcHAgPSBBcHA7CgoKLyoqKi8gfSksCi8qIDEwICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwpIHsvKioKICogbG9kYXNoIChDdXN0b20gQnVpbGQpIDxodHRwczovL2xvZGFzaC5jb20vPgogKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9Im5wbSIgLW8gLi9gCiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pxdWVyeS5vcmcvPgogKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+CiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+CiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9ycwogKi8KCi8qKiBVc2VkIGFzIHRoZSBgVHlwZUVycm9yYCBtZXNzYWdlIGZvciAiRnVuY3Rpb25zIiBtZXRob2RzLiAqLwp2YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nOwoKLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovCnZhciBOQU4gPSAwIC8gMDsKCi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi8KdmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nOwoKLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZS4gKi8KdmFyIHJlVHJpbSA9IC9eXHMrfFxzKyQvZzsKCi8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovCnZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7CgovKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovCnZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pOwoKLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovCnZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pOwoKLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi8KdmFyIGZyZWVQYXJzZUludCA9IHBhcnNlSW50OwoKLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi8KdmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsOwoKLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi8KdmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7CgovKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi8KdmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7CgovKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovCnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7CgovKioKICogVXNlZCB0byByZXNvbHZlIHRoZQogKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZykKICogb2YgdmFsdWVzLgogKi8KdmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7CgovKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovCnZhciBuYXRpdmVNYXggPSBNYXRoLm1heCwKICAgIG5hdGl2ZU1pbiA9IE1hdGgubWluOwoKLyoqCiAqIEdldHMgdGhlIHRpbWVzdGFtcCBvZiB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IGhhdmUgZWxhcHNlZCBzaW5jZQogKiB0aGUgVW5peCBlcG9jaCAoMSBKYW51YXJ5IDE5NzAgMDA6MDA6MDAgVVRDKS4KICoKICogQHN0YXRpYwogKiBAbWVtYmVyT2YgXwogKiBAc2luY2UgMi40LjAKICogQGNhdGVnb3J5IERhdGUKICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXN0YW1wLgogKiBAZXhhbXBsZQogKgogKiBfLmRlZmVyKGZ1bmN0aW9uKHN0YW1wKSB7CiAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTsKICogfSwgXy5ub3coKSk7CiAqIC8vID0+IExvZ3MgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaXQgdG9vayBmb3IgdGhlIGRlZmVycmVkIGludm9jYXRpb24uCiAqLwp2YXIgbm93ID0gZnVuY3Rpb24oKSB7CiAgcmV0dXJuIHJvb3QuRGF0ZS5ub3coKTsKfTsKCi8qKgogKiBDcmVhdGVzIGEgZGVib3VuY2VkIGZ1bmN0aW9uIHRoYXQgZGVsYXlzIGludm9raW5nIGBmdW5jYCB1bnRpbCBhZnRlciBgd2FpdGAKICogbWlsbGlzZWNvbmRzIGhhdmUgZWxhcHNlZCBzaW5jZSB0aGUgbGFzdCB0aW1lIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gd2FzCiAqIGludm9rZWQuIFRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgIG1ldGhvZCB0byBjYW5jZWwKICogZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG8gaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uCiAqIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZQogKiBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkCiAqIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnQKICogY2FsbHMgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbiByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AKICogaW52b2NhdGlvbi4KICoKICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpcwogKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIGRlYm91bmNlZCBmdW5jdGlvbgogKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuCiAqCiAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZAogKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuCiAqCiAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKQogKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLmRlYm91bmNlYCBhbmQgYF8udGhyb3R0bGVgLgogKgogKiBAc3RhdGljCiAqIEBtZW1iZXJPZiBfCiAqIEBzaW5jZSAwLjEuMAogKiBAY2F0ZWdvcnkgRnVuY3Rpb24KICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVib3VuY2UuCiAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheS4KICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuCiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz1mYWxzZV0KICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC4KICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdhaXRdCiAqICBUaGUgbWF4aW11bSB0aW1lIGBmdW5jYCBpcyBhbGxvd2VkIHRvIGJlIGRlbGF5ZWQgYmVmb3JlIGl0J3MgaW52b2tlZC4KICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXQogKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC4KICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLgogKiBAZXhhbXBsZQogKgogKiAvLyBBdm9pZCBjb3N0bHkgY2FsY3VsYXRpb25zIHdoaWxlIHRoZSB3aW5kb3cgc2l6ZSBpcyBpbiBmbHV4LgogKiBqUXVlcnkod2luZG93KS5vbigncmVzaXplJywgXy5kZWJvdW5jZShjYWxjdWxhdGVMYXlvdXQsIDE1MCkpOwogKgogKiAvLyBJbnZva2UgYHNlbmRNYWlsYCB3aGVuIGNsaWNrZWQsIGRlYm91bmNpbmcgc3Vic2VxdWVudCBjYWxscy4KICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIF8uZGVib3VuY2Uoc2VuZE1haWwsIDMwMCwgewogKiAgICdsZWFkaW5nJzogdHJ1ZSwKICogICAndHJhaWxpbmcnOiBmYWxzZQogKiB9KSk7CiAqCiAqIC8vIEVuc3VyZSBgYmF0Y2hMb2dgIGlzIGludm9rZWQgb25jZSBhZnRlciAxIHNlY29uZCBvZiBkZWJvdW5jZWQgY2FsbHMuCiAqIHZhciBkZWJvdW5jZWQgPSBfLmRlYm91bmNlKGJhdGNoTG9nLCAyNTAsIHsgJ21heFdhaXQnOiAxMDAwIH0pOwogKiB2YXIgc291cmNlID0gbmV3IEV2ZW50U291cmNlKCcvc3RyZWFtJyk7CiAqIGpRdWVyeShzb3VyY2UpLm9uKCdtZXNzYWdlJywgZGVib3VuY2VkKTsKICoKICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyBkZWJvdW5jZWQgaW52b2NhdGlvbi4KICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgZGVib3VuY2VkLmNhbmNlbCk7CiAqLwpmdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7CiAgdmFyIGxhc3RBcmdzLAogICAgICBsYXN0VGhpcywKICAgICAgbWF4V2FpdCwKICAgICAgcmVzdWx0LAogICAgICB0aW1lcklkLAogICAgICBsYXN0Q2FsbFRpbWUsCiAgICAgIGxhc3RJbnZva2VUaW1lID0gMCwKICAgICAgbGVhZGluZyA9IGZhbHNlLAogICAgICBtYXhpbmcgPSBmYWxzZSwKICAgICAgdHJhaWxpbmcgPSB0cnVlOwoKICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpOwogIH0KICB3YWl0ID0gdG9OdW1iZXIod2FpdCkgfHwgMDsKICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHsKICAgIGxlYWRpbmcgPSAhIW9wdGlvbnMubGVhZGluZzsKICAgIG1heGluZyA9ICdtYXhXYWl0JyBpbiBvcHRpb25zOwogICAgbWF4V2FpdCA9IG1heGluZyA/IG5hdGl2ZU1heCh0b051bWJlcihvcHRpb25zLm1heFdhaXQpIHx8IDAsIHdhaXQpIDogbWF4V2FpdDsKICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7CiAgfQoKICBmdW5jdGlvbiBpbnZva2VGdW5jKHRpbWUpIHsKICAgIHZhciBhcmdzID0gbGFzdEFyZ3MsCiAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzOwoKICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7CiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7CiAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpOwogICAgcmV0dXJuIHJlc3VsdDsKICB9CgogIGZ1bmN0aW9uIGxlYWRpbmdFZGdlKHRpbWUpIHsKICAgIC8vIFJlc2V0IGFueSBgbWF4V2FpdGAgdGltZXIuCiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7CiAgICAvLyBTdGFydCB0aGUgdGltZXIgZm9yIHRoZSB0cmFpbGluZyBlZGdlLgogICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTsKICAgIC8vIEludm9rZSB0aGUgbGVhZGluZyBlZGdlLgogICAgcmV0dXJuIGxlYWRpbmcgPyBpbnZva2VGdW5jKHRpbWUpIDogcmVzdWx0OwogIH0KCiAgZnVuY3Rpb24gcmVtYWluaW5nV2FpdCh0aW1lKSB7CiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLAogICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWUsCiAgICAgICAgcmVzdWx0ID0gd2FpdCAtIHRpbWVTaW5jZUxhc3RDYWxsOwoKICAgIHJldHVybiBtYXhpbmcgPyBuYXRpdmVNaW4ocmVzdWx0LCBtYXhXYWl0IC0gdGltZVNpbmNlTGFzdEludm9rZSkgOiByZXN1bHQ7CiAgfQoKICBmdW5jdGlvbiBzaG91bGRJbnZva2UodGltZSkgewogICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSwKICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lOwoKICAgIC8vIEVpdGhlciB0aGlzIGlzIHRoZSBmaXJzdCBjYWxsLCBhY3Rpdml0eSBoYXMgc3RvcHBlZCBhbmQgd2UncmUgYXQgdGhlCiAgICAvLyB0cmFpbGluZyBlZGdlLCB0aGUgc3lzdGVtIHRpbWUgaGFzIGdvbmUgYmFja3dhcmRzIGFuZCB3ZSdyZSB0cmVhdGluZwogICAgLy8gaXQgYXMgdGhlIHRyYWlsaW5nIGVkZ2UsIG9yIHdlJ3ZlIGhpdCB0aGUgYG1heFdhaXRgIGxpbWl0LgogICAgcmV0dXJuIChsYXN0Q2FsbFRpbWUgPT09IHVuZGVmaW5lZCB8fCAodGltZVNpbmNlTGFzdENhbGwgPj0gd2FpdCkgfHwKICAgICAgKHRpbWVTaW5jZUxhc3RDYWxsIDwgMCkgfHwgKG1heGluZyAmJiB0aW1lU2luY2VMYXN0SW52b2tlID49IG1heFdhaXQpKTsKICB9CgogIGZ1bmN0aW9uIHRpbWVyRXhwaXJlZCgpIHsKICAgIHZhciB0aW1lID0gbm93KCk7CiAgICBpZiAoc2hvdWxkSW52b2tlKHRpbWUpKSB7CiAgICAgIHJldHVybiB0cmFpbGluZ0VkZ2UodGltZSk7CiAgICB9CiAgICAvLyBSZXN0YXJ0IHRoZSB0aW1lci4KICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgcmVtYWluaW5nV2FpdCh0aW1lKSk7CiAgfQoKICBmdW5jdGlvbiB0cmFpbGluZ0VkZ2UodGltZSkgewogICAgdGltZXJJZCA9IHVuZGVmaW5lZDsKCiAgICAvLyBPbmx5IGludm9rZSBpZiB3ZSBoYXZlIGBsYXN0QXJnc2Agd2hpY2ggbWVhbnMgYGZ1bmNgIGhhcyBiZWVuCiAgICAvLyBkZWJvdW5jZWQgYXQgbGVhc3Qgb25jZS4KICAgIGlmICh0cmFpbGluZyAmJiBsYXN0QXJncykgewogICAgICByZXR1cm4gaW52b2tlRnVuYyh0aW1lKTsKICAgIH0KICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7CiAgICByZXR1cm4gcmVzdWx0OwogIH0KCiAgZnVuY3Rpb24gY2FuY2VsKCkgewogICAgaWYgKHRpbWVySWQgIT09IHVuZGVmaW5lZCkgewogICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7CiAgICB9CiAgICBsYXN0SW52b2tlVGltZSA9IDA7CiAgICBsYXN0QXJncyA9IGxhc3RDYWxsVGltZSA9IGxhc3RUaGlzID0gdGltZXJJZCA9IHVuZGVmaW5lZDsKICB9CgogIGZ1bmN0aW9uIGZsdXNoKCkgewogICAgcmV0dXJuIHRpbWVySWQgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IHRyYWlsaW5nRWRnZShub3coKSk7CiAgfQoKICBmdW5jdGlvbiBkZWJvdW5jZWQoKSB7CiAgICB2YXIgdGltZSA9IG5vdygpLAogICAgICAgIGlzSW52b2tpbmcgPSBzaG91bGRJbnZva2UodGltZSk7CgogICAgbGFzdEFyZ3MgPSBhcmd1bWVudHM7CiAgICBsYXN0VGhpcyA9IHRoaXM7CiAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lOwoKICAgIGlmIChpc0ludm9raW5nKSB7CiAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHsKICAgICAgICByZXR1cm4gbGVhZGluZ0VkZ2UobGFzdENhbGxUaW1lKTsKICAgICAgfQogICAgICBpZiAobWF4aW5nKSB7CiAgICAgICAgLy8gSGFuZGxlIGludm9jYXRpb25zIGluIGEgdGlnaHQgbG9vcC4KICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpOwogICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7CiAgICAgIH0KICAgIH0KICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHsKICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTsKICAgIH0KICAgIHJldHVybiByZXN1bHQ7CiAgfQogIGRlYm91bmNlZC5jYW5jZWwgPSBjYW5jZWw7CiAgZGVib3VuY2VkLmZsdXNoID0gZmx1c2g7CiAgcmV0dXJuIGRlYm91bmNlZDsKfQoKLyoqCiAqIENyZWF0ZXMgYSB0aHJvdHRsZWQgZnVuY3Rpb24gdGhhdCBvbmx5IGludm9rZXMgYGZ1bmNgIGF0IG1vc3Qgb25jZSBwZXIKICogZXZlcnkgYHdhaXRgIG1pbGxpc2Vjb25kcy4gVGhlIHRocm90dGxlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGAKICogbWV0aG9kIHRvIGNhbmNlbCBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0bwogKiBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS4gUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2AKICogc2hvdWxkIGJlIGludm9rZWQgb24gdGhlIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YAogKiB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWQgd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlCiAqIHRocm90dGxlZCBmdW5jdGlvbi4gU3Vic2VxdWVudCBjYWxscyB0byB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHJldHVybiB0aGUKICogcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLgogKgogKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzCiAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uCiAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC4KICoKICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkCiAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC4KICoKICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pCiAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8udGhyb3R0bGVgIGFuZCBgXy5kZWJvdW5jZWAuCiAqCiAqIEBzdGF0aWMKICogQG1lbWJlck9mIF8KICogQHNpbmNlIDAuMS4wCiAqIEBjYXRlZ29yeSBGdW5jdGlvbgogKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB0aHJvdHRsZS4KICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRocm90dGxlIGludm9jYXRpb25zIHRvLgogKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC4KICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPXRydWVdCiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuCiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV0KICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuCiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHRocm90dGxlZCBmdW5jdGlvbi4KICogQGV4YW1wbGUKICoKICogLy8gQXZvaWQgZXhjZXNzaXZlbHkgdXBkYXRpbmcgdGhlIHBvc2l0aW9uIHdoaWxlIHNjcm9sbGluZy4KICogalF1ZXJ5KHdpbmRvdykub24oJ3Njcm9sbCcsIF8udGhyb3R0bGUodXBkYXRlUG9zaXRpb24sIDEwMCkpOwogKgogKiAvLyBJbnZva2UgYHJlbmV3VG9rZW5gIHdoZW4gdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLCBidXQgbm90IG1vcmUgdGhhbiBvbmNlIGV2ZXJ5IDUgbWludXRlcy4KICogdmFyIHRocm90dGxlZCA9IF8udGhyb3R0bGUocmVuZXdUb2tlbiwgMzAwMDAwLCB7ICd0cmFpbGluZyc6IGZhbHNlIH0pOwogKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgdGhyb3R0bGVkKTsKICoKICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyB0aHJvdHRsZWQgaW52b2NhdGlvbi4KICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgdGhyb3R0bGVkLmNhbmNlbCk7CiAqLwpmdW5jdGlvbiB0aHJvdHRsZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7CiAgdmFyIGxlYWRpbmcgPSB0cnVlLAogICAgICB0cmFpbGluZyA9IHRydWU7CgogIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7CiAgfQogIGlmIChpc09iamVjdChvcHRpb25zKSkgewogICAgbGVhZGluZyA9ICdsZWFkaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLmxlYWRpbmcgOiBsZWFkaW5nOwogICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZzsKICB9CiAgcmV0dXJuIGRlYm91bmNlKGZ1bmMsIHdhaXQsIHsKICAgICdsZWFkaW5nJzogbGVhZGluZywKICAgICdtYXhXYWl0Jzogd2FpdCwKICAgICd0cmFpbGluZyc6IHRyYWlsaW5nCiAgfSk7Cn0KCi8qKgogKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGUKICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKQogKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApCiAqCiAqIEBzdGF0aWMKICogQG1lbWJlck9mIF8KICogQHNpbmNlIDAuMS4wCiAqIEBjYXRlZ29yeSBMYW5nCiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC4KICogQGV4YW1wbGUKICoKICogXy5pc09iamVjdCh7fSk7CiAqIC8vID0+IHRydWUKICoKICogXy5pc09iamVjdChbMSwgMiwgM10pOwogKiAvLyA9PiB0cnVlCiAqCiAqIF8uaXNPYmplY3QoXy5ub29wKTsKICogLy8gPT4gdHJ1ZQogKgogKiBfLmlzT2JqZWN0KG51bGwpOwogKiAvLyA9PiBmYWxzZQogKi8KZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHsKICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTsKICByZXR1cm4gISF2YWx1ZSAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpOwp9CgovKioKICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgCiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgIm9iamVjdCIuCiAqCiAqIEBzdGF0aWMKICogQG1lbWJlck9mIF8KICogQHNpbmNlIDQuMC4wCiAqIEBjYXRlZ29yeSBMYW5nCiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLgogKiBAZXhhbXBsZQogKgogKiBfLmlzT2JqZWN0TGlrZSh7fSk7CiAqIC8vID0+IHRydWUKICoKICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTsKICogLy8gPT4gdHJ1ZQogKgogKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApOwogKiAvLyA9PiBmYWxzZQogKgogKiBfLmlzT2JqZWN0TGlrZShudWxsKTsKICogLy8gPT4gZmFsc2UKICovCmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkgewogIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JzsKfQoKLyoqCiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LgogKgogKiBAc3RhdGljCiAqIEBtZW1iZXJPZiBfCiAqIEBzaW5jZSA0LjAuMAogKiBAY2F0ZWdvcnkgTGFuZwogKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC4KICogQGV4YW1wbGUKICoKICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpOwogKiAvLyA9PiB0cnVlCiAqCiAqIF8uaXNTeW1ib2woJ2FiYycpOwogKiAvLyA9PiBmYWxzZQogKi8KZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHsKICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8CiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSA9PSBzeW1ib2xUYWcpOwp9CgovKioKICogQ29udmVydHMgYHZhbHVlYCB0byBhIG51bWJlci4KICoKICogQHN0YXRpYwogKiBAbWVtYmVyT2YgXwogKiBAc2luY2UgNC4wLjAKICogQGNhdGVnb3J5IExhbmcKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy4KICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLgogKiBAZXhhbXBsZQogKgogKiBfLnRvTnVtYmVyKDMuMik7CiAqIC8vID0+IDMuMgogKgogKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpOwogKiAvLyA9PiA1ZS0zMjQKICoKICogXy50b051bWJlcihJbmZpbml0eSk7CiAqIC8vID0+IEluZmluaXR5CiAqCiAqIF8udG9OdW1iZXIoJzMuMicpOwogKiAvLyA9PiAzLjIKICovCmZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7CiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykgewogICAgcmV0dXJuIHZhbHVlOwogIH0KICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7CiAgICByZXR1cm4gTkFOOwogIH0KICBpZiAoaXNPYmplY3QodmFsdWUpKSB7CiAgICB2YXIgb3RoZXIgPSB0eXBlb2YgdmFsdWUudmFsdWVPZiA9PSAnZnVuY3Rpb24nID8gdmFsdWUudmFsdWVPZigpIDogdmFsdWU7CiAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyOwogIH0KICBpZiAodHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSB7CiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTsKICB9CiAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKHJlVHJpbSwgJycpOwogIHZhciBpc0JpbmFyeSA9IHJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7CiAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpCiAgICA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOCkKICAgIDogKHJlSXNCYWRIZXgudGVzdCh2YWx1ZSkgPyBOQU4gOiArdmFsdWUpOwp9Cgptb2R1bGUuZXhwb3J0cyA9IHRocm90dGxlOwoKLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMykpKQoKLyoqKi8gfSksCi8qIDExICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwpIHsvKioKICogbG9kYXNoIChDdXN0b20gQnVpbGQpIDxodHRwczovL2xvZGFzaC5jb20vPgogKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9Im5wbSIgLW8gLi9gCiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pxdWVyeS5vcmcvPgogKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+CiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+CiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9ycwogKi8KCi8qKiBVc2VkIGFzIHRoZSBgVHlwZUVycm9yYCBtZXNzYWdlIGZvciAiRnVuY3Rpb25zIiBtZXRob2RzLiAqLwp2YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nOwoKLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovCnZhciBOQU4gPSAwIC8gMDsKCi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi8KdmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nOwoKLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZS4gKi8KdmFyIHJlVHJpbSA9IC9eXHMrfFxzKyQvZzsKCi8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovCnZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7CgovKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovCnZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pOwoKLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovCnZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pOwoKLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi8KdmFyIGZyZWVQYXJzZUludCA9IHBhcnNlSW50OwoKLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi8KdmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsOwoKLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi8KdmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7CgovKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi8KdmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7CgovKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovCnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7CgovKioKICogVXNlZCB0byByZXNvbHZlIHRoZQogKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZykKICogb2YgdmFsdWVzLgogKi8KdmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7CgovKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovCnZhciBuYXRpdmVNYXggPSBNYXRoLm1heCwKICAgIG5hdGl2ZU1pbiA9IE1hdGgubWluOwoKLyoqCiAqIEdldHMgdGhlIHRpbWVzdGFtcCBvZiB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IGhhdmUgZWxhcHNlZCBzaW5jZQogKiB0aGUgVW5peCBlcG9jaCAoMSBKYW51YXJ5IDE5NzAgMDA6MDA6MDAgVVRDKS4KICoKICogQHN0YXRpYwogKiBAbWVtYmVyT2YgXwogKiBAc2luY2UgMi40LjAKICogQGNhdGVnb3J5IERhdGUKICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXN0YW1wLgogKiBAZXhhbXBsZQogKgogKiBfLmRlZmVyKGZ1bmN0aW9uKHN0YW1wKSB7CiAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTsKICogfSwgXy5ub3coKSk7CiAqIC8vID0+IExvZ3MgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaXQgdG9vayBmb3IgdGhlIGRlZmVycmVkIGludm9jYXRpb24uCiAqLwp2YXIgbm93ID0gZnVuY3Rpb24oKSB7CiAgcmV0dXJuIHJvb3QuRGF0ZS5ub3coKTsKfTsKCi8qKgogKiBDcmVhdGVzIGEgZGVib3VuY2VkIGZ1bmN0aW9uIHRoYXQgZGVsYXlzIGludm9raW5nIGBmdW5jYCB1bnRpbCBhZnRlciBgd2FpdGAKICogbWlsbGlzZWNvbmRzIGhhdmUgZWxhcHNlZCBzaW5jZSB0aGUgbGFzdCB0aW1lIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gd2FzCiAqIGludm9rZWQuIFRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgIG1ldGhvZCB0byBjYW5jZWwKICogZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG8gaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uCiAqIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZQogKiBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkCiAqIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnQKICogY2FsbHMgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbiByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AKICogaW52b2NhdGlvbi4KICoKICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpcwogKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIGRlYm91bmNlZCBmdW5jdGlvbgogKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuCiAqCiAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZAogKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuCiAqCiAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKQogKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLmRlYm91bmNlYCBhbmQgYF8udGhyb3R0bGVgLgogKgogKiBAc3RhdGljCiAqIEBtZW1iZXJPZiBfCiAqIEBzaW5jZSAwLjEuMAogKiBAY2F0ZWdvcnkgRnVuY3Rpb24KICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVib3VuY2UuCiAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheS4KICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuCiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz1mYWxzZV0KICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC4KICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdhaXRdCiAqICBUaGUgbWF4aW11bSB0aW1lIGBmdW5jYCBpcyBhbGxvd2VkIHRvIGJlIGRlbGF5ZWQgYmVmb3JlIGl0J3MgaW52b2tlZC4KICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXQogKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC4KICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLgogKiBAZXhhbXBsZQogKgogKiAvLyBBdm9pZCBjb3N0bHkgY2FsY3VsYXRpb25zIHdoaWxlIHRoZSB3aW5kb3cgc2l6ZSBpcyBpbiBmbHV4LgogKiBqUXVlcnkod2luZG93KS5vbigncmVzaXplJywgXy5kZWJvdW5jZShjYWxjdWxhdGVMYXlvdXQsIDE1MCkpOwogKgogKiAvLyBJbnZva2UgYHNlbmRNYWlsYCB3aGVuIGNsaWNrZWQsIGRlYm91bmNpbmcgc3Vic2VxdWVudCBjYWxscy4KICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIF8uZGVib3VuY2Uoc2VuZE1haWwsIDMwMCwgewogKiAgICdsZWFkaW5nJzogdHJ1ZSwKICogICAndHJhaWxpbmcnOiBmYWxzZQogKiB9KSk7CiAqCiAqIC8vIEVuc3VyZSBgYmF0Y2hMb2dgIGlzIGludm9rZWQgb25jZSBhZnRlciAxIHNlY29uZCBvZiBkZWJvdW5jZWQgY2FsbHMuCiAqIHZhciBkZWJvdW5jZWQgPSBfLmRlYm91bmNlKGJhdGNoTG9nLCAyNTAsIHsgJ21heFdhaXQnOiAxMDAwIH0pOwogKiB2YXIgc291cmNlID0gbmV3IEV2ZW50U291cmNlKCcvc3RyZWFtJyk7CiAqIGpRdWVyeShzb3VyY2UpLm9uKCdtZXNzYWdlJywgZGVib3VuY2VkKTsKICoKICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyBkZWJvdW5jZWQgaW52b2NhdGlvbi4KICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgZGVib3VuY2VkLmNhbmNlbCk7CiAqLwpmdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7CiAgdmFyIGxhc3RBcmdzLAogICAgICBsYXN0VGhpcywKICAgICAgbWF4V2FpdCwKICAgICAgcmVzdWx0LAogICAgICB0aW1lcklkLAogICAgICBsYXN0Q2FsbFRpbWUsCiAgICAgIGxhc3RJbnZva2VUaW1lID0gMCwKICAgICAgbGVhZGluZyA9IGZhbHNlLAogICAgICBtYXhpbmcgPSBmYWxzZSwKICAgICAgdHJhaWxpbmcgPSB0cnVlOwoKICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpOwogIH0KICB3YWl0ID0gdG9OdW1iZXIod2FpdCkgfHwgMDsKICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHsKICAgIGxlYWRpbmcgPSAhIW9wdGlvbnMubGVhZGluZzsKICAgIG1heGluZyA9ICdtYXhXYWl0JyBpbiBvcHRpb25zOwogICAgbWF4V2FpdCA9IG1heGluZyA/IG5hdGl2ZU1heCh0b051bWJlcihvcHRpb25zLm1heFdhaXQpIHx8IDAsIHdhaXQpIDogbWF4V2FpdDsKICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7CiAgfQoKICBmdW5jdGlvbiBpbnZva2VGdW5jKHRpbWUpIHsKICAgIHZhciBhcmdzID0gbGFzdEFyZ3MsCiAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzOwoKICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7CiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7CiAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpOwogICAgcmV0dXJuIHJlc3VsdDsKICB9CgogIGZ1bmN0aW9uIGxlYWRpbmdFZGdlKHRpbWUpIHsKICAgIC8vIFJlc2V0IGFueSBgbWF4V2FpdGAgdGltZXIuCiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7CiAgICAvLyBTdGFydCB0aGUgdGltZXIgZm9yIHRoZSB0cmFpbGluZyBlZGdlLgogICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTsKICAgIC8vIEludm9rZSB0aGUgbGVhZGluZyBlZGdlLgogICAgcmV0dXJuIGxlYWRpbmcgPyBpbnZva2VGdW5jKHRpbWUpIDogcmVzdWx0OwogIH0KCiAgZnVuY3Rpb24gcmVtYWluaW5nV2FpdCh0aW1lKSB7CiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLAogICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWUsCiAgICAgICAgcmVzdWx0ID0gd2FpdCAtIHRpbWVTaW5jZUxhc3RDYWxsOwoKICAgIHJldHVybiBtYXhpbmcgPyBuYXRpdmVNaW4ocmVzdWx0LCBtYXhXYWl0IC0gdGltZVNpbmNlTGFzdEludm9rZSkgOiByZXN1bHQ7CiAgfQoKICBmdW5jdGlvbiBzaG91bGRJbnZva2UodGltZSkgewogICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSwKICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lOwoKICAgIC8vIEVpdGhlciB0aGlzIGlzIHRoZSBmaXJzdCBjYWxsLCBhY3Rpdml0eSBoYXMgc3RvcHBlZCBhbmQgd2UncmUgYXQgdGhlCiAgICAvLyB0cmFpbGluZyBlZGdlLCB0aGUgc3lzdGVtIHRpbWUgaGFzIGdvbmUgYmFja3dhcmRzIGFuZCB3ZSdyZSB0cmVhdGluZwogICAgLy8gaXQgYXMgdGhlIHRyYWlsaW5nIGVkZ2UsIG9yIHdlJ3ZlIGhpdCB0aGUgYG1heFdhaXRgIGxpbWl0LgogICAgcmV0dXJuIChsYXN0Q2FsbFRpbWUgPT09IHVuZGVmaW5lZCB8fCAodGltZVNpbmNlTGFzdENhbGwgPj0gd2FpdCkgfHwKICAgICAgKHRpbWVTaW5jZUxhc3RDYWxsIDwgMCkgfHwgKG1heGluZyAmJiB0aW1lU2luY2VMYXN0SW52b2tlID49IG1heFdhaXQpKTsKICB9CgogIGZ1bmN0aW9uIHRpbWVyRXhwaXJlZCgpIHsKICAgIHZhciB0aW1lID0gbm93KCk7CiAgICBpZiAoc2hvdWxkSW52b2tlKHRpbWUpKSB7CiAgICAgIHJldHVybiB0cmFpbGluZ0VkZ2UodGltZSk7CiAgICB9CiAgICAvLyBSZXN0YXJ0IHRoZSB0aW1lci4KICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgcmVtYWluaW5nV2FpdCh0aW1lKSk7CiAgfQoKICBmdW5jdGlvbiB0cmFpbGluZ0VkZ2UodGltZSkgewogICAgdGltZXJJZCA9IHVuZGVmaW5lZDsKCiAgICAvLyBPbmx5IGludm9rZSBpZiB3ZSBoYXZlIGBsYXN0QXJnc2Agd2hpY2ggbWVhbnMgYGZ1bmNgIGhhcyBiZWVuCiAgICAvLyBkZWJvdW5jZWQgYXQgbGVhc3Qgb25jZS4KICAgIGlmICh0cmFpbGluZyAmJiBsYXN0QXJncykgewogICAgICByZXR1cm4gaW52b2tlRnVuYyh0aW1lKTsKICAgIH0KICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7CiAgICByZXR1cm4gcmVzdWx0OwogIH0KCiAgZnVuY3Rpb24gY2FuY2VsKCkgewogICAgaWYgKHRpbWVySWQgIT09IHVuZGVmaW5lZCkgewogICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7CiAgICB9CiAgICBsYXN0SW52b2tlVGltZSA9IDA7CiAgICBsYXN0QXJncyA9IGxhc3RDYWxsVGltZSA9IGxhc3RUaGlzID0gdGltZXJJZCA9IHVuZGVmaW5lZDsKICB9CgogIGZ1bmN0aW9uIGZsdXNoKCkgewogICAgcmV0dXJuIHRpbWVySWQgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IHRyYWlsaW5nRWRnZShub3coKSk7CiAgfQoKICBmdW5jdGlvbiBkZWJvdW5jZWQoKSB7CiAgICB2YXIgdGltZSA9IG5vdygpLAogICAgICAgIGlzSW52b2tpbmcgPSBzaG91bGRJbnZva2UodGltZSk7CgogICAgbGFzdEFyZ3MgPSBhcmd1bWVudHM7CiAgICBsYXN0VGhpcyA9IHRoaXM7CiAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lOwoKICAgIGlmIChpc0ludm9raW5nKSB7CiAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHsKICAgICAgICByZXR1cm4gbGVhZGluZ0VkZ2UobGFzdENhbGxUaW1lKTsKICAgICAgfQogICAgICBpZiAobWF4aW5nKSB7CiAgICAgICAgLy8gSGFuZGxlIGludm9jYXRpb25zIGluIGEgdGlnaHQgbG9vcC4KICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpOwogICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7CiAgICAgIH0KICAgIH0KICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHsKICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTsKICAgIH0KICAgIHJldHVybiByZXN1bHQ7CiAgfQogIGRlYm91bmNlZC5jYW5jZWwgPSBjYW5jZWw7CiAgZGVib3VuY2VkLmZsdXNoID0gZmx1c2g7CiAgcmV0dXJuIGRlYm91bmNlZDsKfQoKLyoqCiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZQogKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpCiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYCkKICoKICogQHN0YXRpYwogKiBAbWVtYmVyT2YgXwogKiBAc2luY2UgMC4xLjAKICogQGNhdGVnb3J5IExhbmcKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLgogKiBAZXhhbXBsZQogKgogKiBfLmlzT2JqZWN0KHt9KTsKICogLy8gPT4gdHJ1ZQogKgogKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7CiAqIC8vID0+IHRydWUKICoKICogXy5pc09iamVjdChfLm5vb3ApOwogKiAvLyA9PiB0cnVlCiAqCiAqIF8uaXNPYmplY3QobnVsbCk7CiAqIC8vID0+IGZhbHNlCiAqLwpmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkgewogIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlOwogIHJldHVybiAhIXZhbHVlICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7Cn0KCi8qKgogKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGAKICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiAib2JqZWN0Ii4KICoKICogQHN0YXRpYwogKiBAbWVtYmVyT2YgXwogKiBAc2luY2UgNC4wLjAKICogQGNhdGVnb3J5IExhbmcKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuCiAqIEBleGFtcGxlCiAqCiAqIF8uaXNPYmplY3RMaWtlKHt9KTsKICogLy8gPT4gdHJ1ZQogKgogKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pOwogKiAvLyA9PiB0cnVlCiAqCiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7CiAqIC8vID0+IGZhbHNlCiAqCiAqIF8uaXNPYmplY3RMaWtlKG51bGwpOwogKiAvLyA9PiBmYWxzZQogKi8KZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7CiAgcmV0dXJuICEhdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnOwp9CgovKioKICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuCiAqCiAqIEBzdGF0aWMKICogQG1lbWJlck9mIF8KICogQHNpbmNlIDQuMC4wCiAqIEBjYXRlZ29yeSBMYW5nCiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLgogKiBAZXhhbXBsZQogKgogKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7CiAqIC8vID0+IHRydWUKICoKICogXy5pc1N5bWJvbCgnYWJjJyk7CiAqIC8vID0+IGZhbHNlCiAqLwpmdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkgewogIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHwKICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpID09IHN5bWJvbFRhZyk7Cn0KCi8qKgogKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLgogKgogKiBAc3RhdGljCiAqIEBtZW1iZXJPZiBfCiAqIEBzaW5jZSA0LjAuMAogKiBAY2F0ZWdvcnkgTGFuZwogKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLgogKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuCiAqIEBleGFtcGxlCiAqCiAqIF8udG9OdW1iZXIoMy4yKTsKICogLy8gPT4gMy4yCiAqCiAqIF8udG9OdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7CiAqIC8vID0+IDVlLTMyNAogKgogKiBfLnRvTnVtYmVyKEluZmluaXR5KTsKICogLy8gPT4gSW5maW5pdHkKICoKICogXy50b051bWJlcignMy4yJyk7CiAqIC8vID0+IDMuMgogKi8KZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHsKICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7CiAgICByZXR1cm4gdmFsdWU7CiAgfQogIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHsKICAgIHJldHVybiBOQU47CiAgfQogIGlmIChpc09iamVjdCh2YWx1ZSkpIHsKICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTsKICAgIHZhbHVlID0gaXNPYmplY3Qob3RoZXIpID8gKG90aGVyICsgJycpIDogb3RoZXI7CiAgfQogIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHsKICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlOwogIH0KICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UocmVUcmltLCAnJyk7CiAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTsKICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSkKICAgID8gZnJlZVBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCBpc0JpbmFyeSA/IDIgOiA4KQogICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7Cn0KCm1vZHVsZS5leHBvcnRzID0gZGVib3VuY2U7CgovKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygzKSkpCgovKioqLyB9KSwKLyogMTIgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKLyohCiAqIGluLXZpZXcgMC42LjEgLSBHZXQgbm90aWZpZWQgd2hlbiBhIERPTSBlbGVtZW50IGVudGVycyBvciBleGl0cyB0aGUgdmlld3BvcnQuCiAqIENvcHlyaWdodCAoYykgMjAxNiBDYW0gV2llZ2VydCA8Y2FtQGNhbXdpZWdlcnQuY29tPiAtIGh0dHBzOi8vY2Ftd2llZ2VydC5naXRodWIuaW8vaW4tdmlldwogKiBMaWNlbnNlOiBNSVQKICovCiFmdW5jdGlvbih0LGUpeyB0cnVlP21vZHVsZS5leHBvcnRzPWUoKToiZnVuY3Rpb24iPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXSxlKToib2JqZWN0Ij09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5pblZpZXc9ZSgpOnQuaW5WaWV3PWUoKX0odGhpcyxmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0KXtmdW5jdGlvbiBlKHIpe2lmKG5bcl0pcmV0dXJuIG5bcl0uZXhwb3J0czt2YXIgaT1uW3JdPXtleHBvcnRzOnt9LGlkOnIsbG9hZGVkOiExfTtyZXR1cm4gdFtyXS5jYWxsKGkuZXhwb3J0cyxpLGkuZXhwb3J0cyxlKSxpLmxvYWRlZD0hMCxpLmV4cG9ydHN9dmFyIG49e307cmV0dXJuIGUubT10LGUuYz1uLGUucD0iIixlKDApfShbZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiByKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ImRlZmF1bHQiOnR9fXZhciBpPW4oMiksbz1yKGkpO3QuZXhwb3J0cz1vWyJkZWZhdWx0Il19LGZ1bmN0aW9uKHQsZSl7ZnVuY3Rpb24gbih0KXt2YXIgZT10eXBlb2YgdDtyZXR1cm4gbnVsbCE9dCYmKCJvYmplY3QiPT1lfHwiZnVuY3Rpb24iPT1lKX10LmV4cG9ydHM9bn0sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiByKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ImRlZmF1bHQiOnR9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgaT1uKDkpLG89cihpKSx1PW4oMyksZj1yKHUpLHM9big0KSxjPWZ1bmN0aW9uKCl7aWYoInVuZGVmaW5lZCIhPXR5cGVvZiB3aW5kb3cpe3ZhciB0PTEwMCxlPVsic2Nyb2xsIiwicmVzaXplIiwibG9hZCJdLG49e2hpc3Rvcnk6W119LHI9e29mZnNldDp7fSx0aHJlc2hvbGQ6MCx0ZXN0OnMuaW5WaWV3cG9ydH0saT0oMCxvWyJkZWZhdWx0Il0pKGZ1bmN0aW9uKCl7bi5oaXN0b3J5LmZvckVhY2goZnVuY3Rpb24odCl7blt0XS5jaGVjaygpfSl9LHQpO2UuZm9yRWFjaChmdW5jdGlvbih0KXtyZXR1cm4gYWRkRXZlbnRMaXN0ZW5lcih0LGkpfSksd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXImJmFkZEV2ZW50TGlzdGVuZXIoIkRPTUNvbnRlbnRMb2FkZWQiLGZ1bmN0aW9uKCl7bmV3IE11dGF0aW9uT2JzZXJ2ZXIoaSkub2JzZXJ2ZShkb2N1bWVudC5ib2R5LHthdHRyaWJ1dGVzOiEwLGNoaWxkTGlzdDohMCxzdWJ0cmVlOiEwfSl9KTt2YXIgdT1mdW5jdGlvbih0KXtpZigic3RyaW5nIj09dHlwZW9mIHQpe3ZhciBlPVtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0KSk7cmV0dXJuIG4uaGlzdG9yeS5pbmRleE9mKHQpPi0xP25bdF0uZWxlbWVudHM9ZTooblt0XT0oMCxmWyJkZWZhdWx0Il0pKGUsciksbi5oaXN0b3J5LnB1c2godCkpLG5bdF19fTtyZXR1cm4gdS5vZmZzZXQ9ZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dClyZXR1cm4gci5vZmZzZXQ7dmFyIGU9ZnVuY3Rpb24odCl7cmV0dXJuIm51bWJlciI9PXR5cGVvZiB0fTtyZXR1cm5bInRvcCIsInJpZ2h0IiwiYm90dG9tIiwibGVmdCJdLmZvckVhY2goZSh0KT9mdW5jdGlvbihlKXtyZXR1cm4gci5vZmZzZXRbZV09dH06ZnVuY3Rpb24obil7cmV0dXJuIGUodFtuXSk/ci5vZmZzZXRbbl09dFtuXTpudWxsfSksci5vZmZzZXR9LHUudGhyZXNob2xkPWZ1bmN0aW9uKHQpe3JldHVybiJudW1iZXIiPT10eXBlb2YgdCYmdD49MCYmdDw9MT9yLnRocmVzaG9sZD10OnIudGhyZXNob2xkfSx1LnRlc3Q9ZnVuY3Rpb24odCl7cmV0dXJuImZ1bmN0aW9uIj09dHlwZW9mIHQ/ci50ZXN0PXQ6ci50ZXN0fSx1LmlzPWZ1bmN0aW9uKHQpe3JldHVybiByLnRlc3QodCxyKX0sdS5vZmZzZXQoMCksdX19O2VbImRlZmF1bHQiXT1jKCl9LGZ1bmN0aW9uKHQsZSl7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIG4odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIHI9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsInZhbHVlImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxyLmtleSxyKX19cmV0dXJuIGZ1bmN0aW9uKGUsbixyKXtyZXR1cm4gbiYmdChlLnByb3RvdHlwZSxuKSxyJiZ0KGUsciksZX19KCksaT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSxyKXtuKHRoaXMsdCksdGhpcy5vcHRpb25zPXIsdGhpcy5lbGVtZW50cz1lLHRoaXMuY3VycmVudD1bXSx0aGlzLmhhbmRsZXJzPXtlbnRlcjpbXSxleGl0OltdfSx0aGlzLnNpbmdsZXM9e2VudGVyOltdLGV4aXQ6W119fXJldHVybiByKHQsW3trZXk6ImNoZWNrIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7cmV0dXJuIHRoaXMuZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgbj10Lm9wdGlvbnMudGVzdChlLHQub3B0aW9ucykscj10LmN1cnJlbnQuaW5kZXhPZihlKSxpPXI+LTEsbz1uJiYhaSx1PSFuJiZpO28mJih0LmN1cnJlbnQucHVzaChlKSx0LmVtaXQoImVudGVyIixlKSksdSYmKHQuY3VycmVudC5zcGxpY2UociwxKSx0LmVtaXQoImV4aXQiLGUpKX0pLHRoaXN9fSx7a2V5OiJvbiIsdmFsdWU6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5oYW5kbGVyc1t0XS5wdXNoKGUpLHRoaXN9fSx7a2V5OiJvbmNlIix2YWx1ZTpmdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLnNpbmdsZXNbdF0udW5zaGlmdChlKSx0aGlzfX0se2tleToiZW1pdCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtmb3IoO3RoaXMuc2luZ2xlc1t0XS5sZW5ndGg7KXRoaXMuc2luZ2xlc1t0XS5wb3AoKShlKTtmb3IodmFyIG49dGhpcy5oYW5kbGVyc1t0XS5sZW5ndGg7LS1uPi0xOyl0aGlzLmhhbmRsZXJzW3RdW25dKGUpO3JldHVybiB0aGlzfX1dKSx0fSgpO2VbImRlZmF1bHQiXT1mdW5jdGlvbih0LGUpe3JldHVybiBuZXcgaSh0LGUpfX0sZnVuY3Rpb24odCxlKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gbih0LGUpe3ZhciBuPXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkscj1uLnRvcCxpPW4ucmlnaHQsbz1uLmJvdHRvbSx1PW4ubGVmdCxmPW4ud2lkdGgscz1uLmhlaWdodCxjPXt0Om8scjp3aW5kb3cuaW5uZXJXaWR0aC11LGI6d2luZG93LmlubmVySGVpZ2h0LXIsbDppfSxhPXt4OmUudGhyZXNob2xkKmYseTplLnRocmVzaG9sZCpzfTtyZXR1cm4gYy50PmUub2Zmc2V0LnRvcCthLnkmJmMucj5lLm9mZnNldC5yaWdodCthLngmJmMuYj5lLm9mZnNldC5ib3R0b20rYS55JiZjLmw+ZS5vZmZzZXQubGVmdCthLnh9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLGUuaW5WaWV3cG9ydD1ufSxmdW5jdGlvbih0LGUpeyhmdW5jdGlvbihlKXt2YXIgbj0ib2JqZWN0Ij09dHlwZW9mIGUmJmUmJmUuT2JqZWN0PT09T2JqZWN0JiZlO3QuZXhwb3J0cz1ufSkuY2FsbChlLGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KCkpfSxmdW5jdGlvbih0LGUsbil7dmFyIHI9big1KSxpPSJvYmplY3QiPT10eXBlb2Ygc2VsZiYmc2VsZiYmc2VsZi5PYmplY3Q9PT1PYmplY3QmJnNlbGYsbz1yfHxpfHxGdW5jdGlvbigicmV0dXJuIHRoaXMiKSgpO3QuZXhwb3J0cz1vfSxmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gcih0LGUsbil7ZnVuY3Rpb24gcihlKXt2YXIgbj14LHI9bTtyZXR1cm4geD1tPXZvaWQgMCxFPWUsdz10LmFwcGx5KHIsbil9ZnVuY3Rpb24gYSh0KXtyZXR1cm4gRT10LGo9c2V0VGltZW91dChoLGUpLE0/cih0KTp3fWZ1bmN0aW9uIGwodCl7dmFyIG49dC1PLHI9dC1FLGk9ZS1uO3JldHVybiBfP2MoaSxnLXIpOml9ZnVuY3Rpb24gZCh0KXt2YXIgbj10LU8scj10LUU7cmV0dXJuIHZvaWQgMD09PU98fG4+PWV8fG48MHx8XyYmcj49Z31mdW5jdGlvbiBoKCl7dmFyIHQ9bygpO3JldHVybiBkKHQpP3AodCk6dm9pZChqPXNldFRpbWVvdXQoaCxsKHQpKSl9ZnVuY3Rpb24gcCh0KXtyZXR1cm4gaj12b2lkIDAsVCYmeD9yKHQpOih4PW09dm9pZCAwLHcpfWZ1bmN0aW9uIHYoKXt2b2lkIDAhPT1qJiZjbGVhclRpbWVvdXQoaiksRT0wLHg9Tz1tPWo9dm9pZCAwfWZ1bmN0aW9uIHkoKXtyZXR1cm4gdm9pZCAwPT09aj93OnAobygpKX1mdW5jdGlvbiBiKCl7dmFyIHQ9bygpLG49ZCh0KTtpZih4PWFyZ3VtZW50cyxtPXRoaXMsTz10LG4pe2lmKHZvaWQgMD09PWopcmV0dXJuIGEoTyk7aWYoXylyZXR1cm4gaj1zZXRUaW1lb3V0KGgsZSkscihPKX1yZXR1cm4gdm9pZCAwPT09aiYmKGo9c2V0VGltZW91dChoLGUpKSx3fXZhciB4LG0sZyx3LGosTyxFPTAsTT0hMSxfPSExLFQ9ITA7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIHQpdGhyb3cgbmV3IFR5cGVFcnJvcihmKTtyZXR1cm4gZT11KGUpfHwwLGkobikmJihNPSEhbi5sZWFkaW5nLF89Im1heFdhaXQiaW4gbixnPV8/cyh1KG4ubWF4V2FpdCl8fDAsZSk6ZyxUPSJ0cmFpbGluZyJpbiBuPyEhbi50cmFpbGluZzpUKSxiLmNhbmNlbD12LGIuZmx1c2g9eSxifXZhciBpPW4oMSksbz1uKDgpLHU9bigxMCksZj0iRXhwZWN0ZWQgYSBmdW5jdGlvbiIscz1NYXRoLm1heCxjPU1hdGgubWluO3QuZXhwb3J0cz1yfSxmdW5jdGlvbih0LGUsbil7dmFyIHI9big2KSxpPWZ1bmN0aW9uKCl7cmV0dXJuIHIuRGF0ZS5ub3coKX07dC5leHBvcnRzPWl9LGZ1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiByKHQsZSxuKXt2YXIgcj0hMCxmPSEwO2lmKCJmdW5jdGlvbiIhPXR5cGVvZiB0KXRocm93IG5ldyBUeXBlRXJyb3IodSk7cmV0dXJuIG8obikmJihyPSJsZWFkaW5nImluIG4/ISFuLmxlYWRpbmc6cixmPSJ0cmFpbGluZyJpbiBuPyEhbi50cmFpbGluZzpmKSxpKHQsZSx7bGVhZGluZzpyLG1heFdhaXQ6ZSx0cmFpbGluZzpmfSl9dmFyIGk9big3KSxvPW4oMSksdT0iRXhwZWN0ZWQgYSBmdW5jdGlvbiI7dC5leHBvcnRzPXJ9LGZ1bmN0aW9uKHQsZSl7ZnVuY3Rpb24gbih0KXtyZXR1cm4gdH10LmV4cG9ydHM9bn1dKX0pOwoKLyoqKi8gfSksCi8qIDEzICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKCnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHsKICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8CiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fAogICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9OwogICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7CiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTsKICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH0KICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7CiAgICB9Owp9KSgpOwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7IHZhbHVlOiB0cnVlIH0pOwp2YXIgcHJvdmlkZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7CnZhciB1dGlsc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTsKdmFyIFpoaWh1Wmh1YW5sYW5Qcm92aWRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHsKICAgIF9fZXh0ZW5kcyhaaGlodVpodWFubGFuUHJvdmlkZXIsIF9zdXBlcik7CiAgICBmdW5jdGlvbiBaaGlodVpodWFubGFuUHJvdmlkZXIoKSB7CiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpczsKICAgICAgICBfdGhpcy50ZXN0ID0gL2xpbmtcLnpoaWh1XC5jb21cL1w/dGFyZ2V0PSguKikvOwogICAgICAgIHJldHVybiBfdGhpczsKICAgIH0KICAgIFpoaWh1Wmh1YW5sYW5Qcm92aWRlci5wcm90b3R5cGUub25TY3JvbGwgPSBmdW5jdGlvbiAoYUVsZW1lbnRMaXN0KSB7CiAgICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgICBhRWxlbWVudExpc3QuZm9yRWFjaChmdW5jdGlvbiAoYUVsZW1lbnQpIHsKICAgICAgICAgICAgX3RoaXMub25Ib3ZlcihhRWxlbWVudCk7CiAgICAgICAgfSk7CiAgICB9OwogICAgWmhpaHVaaHVhbmxhblByb3ZpZGVyLnByb3RvdHlwZS5vbkhvdmVyID0gZnVuY3Rpb24gKGFFbGVtZW50KSB7CiAgICAgICAgdGhpcy5lbWl0KHRoaXMuQU5USV9SRURJUkVDVF9ET05FX0VWRU5ULCBhRWxlbWVudCwgdXRpbHNfMS5tYXRjaExpbmtGcm9tVXJsKGFFbGVtZW50LCB0aGlzLnRlc3QpKTsKICAgIH07CiAgICByZXR1cm4gWmhpaHVaaHVhbmxhblByb3ZpZGVyOwp9KHByb3ZpZGVyXzEuUHJvdmlkZXIpKTsKZXhwb3J0cy5aaGlodVpodWFubGFuUHJvdmlkZXIgPSBaaGlodVpodWFubGFuUHJvdmlkZXI7CgoKLyoqKi8gfSksCi8qIDE0ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7CglpZih0cnVlKQoJCW1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpOwoJZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpCgkJZGVmaW5lKFtdLCBmYWN0b3J5KTsKCWVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKQoJCWV4cG9ydHNbIkV2ZW50RW1pdHRlciJdID0gZmFjdG9yeSgpOwoJZWxzZQoJCXJvb3RbIkV2ZW50RW1pdHRlciJdID0gZmFjdG9yeSgpOwp9KSh0aGlzLCBmdW5jdGlvbigpIHsKcmV0dXJuIC8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXAKLyoqKioqKi8gCS8vIFRoZSBtb2R1bGUgY2FjaGUKLyoqKioqKi8gCXZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307CgovKioqKioqLyAJLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb24KLyoqKioqKi8gCWZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHsKCi8qKioqKiovIAkJLy8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlCi8qKioqKiovIAkJaWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pCi8qKioqKiovIAkJCXJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzOwoKLyoqKioqKi8gCQkvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKQovKioqKioqLyAJCXZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHsKLyoqKioqKi8gCQkJaTogbW9kdWxlSWQsCi8qKioqKiovIAkJCWw6IGZhbHNlLAovKioqKioqLyAJCQlleHBvcnRzOiB7fQovKioqKioqLyAJCX07CgovKioqKioqLyAJCS8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvbgovKioqKioqLyAJCW1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pOwoKLyoqKioqKi8gCQkvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkCi8qKioqKiovIAkJbW9kdWxlLmwgPSB0cnVlOwoKLyoqKioqKi8gCQkvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZQovKioqKioqLyAJCXJldHVybiBtb2R1bGUuZXhwb3J0czsKLyoqKioqKi8gCX0KCgovKioqKioqLyAJLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXykKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7CgovKioqKioqLyAJLy8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGUKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7CgovKioqKioqLyAJLy8gaWRlbnRpdHkgZnVuY3Rpb24gZm9yIGNhbGxpbmcgaGFybW9ueSBpbXBvcnRzIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dAovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5pID0gZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9OwoKLyoqKioqKi8gCS8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0cwovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7Ci8qKioqKiovIAkJaWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkgewovKioqKioqLyAJCQlPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgewovKioqKioqLyAJCQkJY29uZmlndXJhYmxlOiBmYWxzZSwKLyoqKioqKi8gCQkJCWVudW1lcmFibGU6IHRydWUsCi8qKioqKiovIAkJCQlnZXQ6IGdldHRlcgovKioqKioqLyAJCQl9KTsKLyoqKioqKi8gCQl9Ci8qKioqKiovIAl9OwoKLyoqKioqKi8gCS8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHsKLyoqKioqKi8gCQl2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID8KLyoqKioqKi8gCQkJZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDoKLyoqKioqKi8gCQkJZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTsKLyoqKioqKi8gCQlfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7Ci8qKioqKiovIAkJcmV0dXJuIGdldHRlcjsKLyoqKioqKi8gCX07CgovKioqKioqLyAJLy8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07CgovKioqKioqLyAJLy8gX193ZWJwYWNrX3B1YmxpY19wYXRoX18KLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18ucCA9ICIiOwoKLyoqKioqKi8gCS8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0cwovKioqKioqLyAJcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7Ci8qKioqKiovIH0pCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKioqKiovIChbCi8qIDAgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwpPYmplY3QuZGVmaW5lUHJvcGVydHkoX193ZWJwYWNrX2V4cG9ydHNfXywgIl9fZXNNb2R1bGUiLCB7IHZhbHVlOiB0cnVlIH0pOwovKioKICogQ3JlYXRlZCBieSBheGV0cm95IG9uIDIwMTcvMy82LgogKi8KLy8vIDxyZWZlcmVuY2UgcGF0aD0iLi9pbmRleC5kLnRzIiAvPgoKdmFyIG5hbWUgPSAnQGF4ZXRyb3kvZXZlbnQtZW1pdHRlci5qcyc7CnZhciBpZF9JZGVudGlmaWVyID0gJ19faWRfXyc7CgpmdW5jdGlvbiByYW5kb21JZCgpIHsKICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDE2KTsKfQoKZnVuY3Rpb24gZmluZEluZGV4QnlJZChpZCkgewogIHJldHVybiB0aGlzLmZpbmRJbmRleChmdW5jdGlvbiAoY2FsbGJhY2spIHsKICAgIHJldHVybiBjYWxsYmFja1tpZF9JZGVudGlmaWVyXSA9PT0gaWQ7CiAgfSk7Cn0KCnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTsKCmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHsKICB0aGlzW25hbWVdID0ge307CiAgZGVmaW5lUHJvcGVydHkgJiYgZGVmaW5lUHJvcGVydHkodGhpcywgbmFtZSwgeyBlbnVtZXJhYmxlOiBmYWxzZSwgY29uZmlndXJhYmxlOiBmYWxzZSB9KTsKfQoKdmFyIHByb3RvdHlwZSA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGU7Cgpwcm90b3R5cGUuY29uc3RydWN0b3IgPSBFdmVudEVtaXR0ZXI7Cgpwcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZXZlbnQsIGxpc3RlbmVyKSB7CiAgdmFyIGV2ZW50cyA9IHRoaXNbbmFtZV0sCiAgICAgIGNvbnRhaW5lciA9IGV2ZW50c1tldmVudF0gPSBldmVudHNbZXZlbnRdIHx8IFtdLAogICAgICBpZCA9IHJhbmRvbUlkKCksCiAgICAgIGluZGV4ID0gdm9pZCAwOwogIGxpc3RlbmVyW2lkX0lkZW50aWZpZXJdID0gaWQ7CiAgY29udGFpbmVyLnB1c2gobGlzdGVuZXIpOwogIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICBpbmRleCA9IGZpbmRJbmRleEJ5SWQuY2FsbChjb250YWluZXIsIGlkKTsKICAgIGluZGV4ID49IDAgJiYgY29udGFpbmVyLnNwbGljZShpbmRleCwgMSk7CiAgfTsKfTsKCnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbiAoZXZlbnQpIHsKICB0aGlzW25hbWVdW2V2ZW50XSA9IFtdOwp9OwoKcHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkgewogIHRoaXNbbmFtZV0gPSB7fTsKfTsKCnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gKGV2ZW50LCBsaXN0ZW5lcikgewogIHZhciBzZWxmID0gdGhpcywKICAgICAgZXZlbnRzID0gc2VsZltuYW1lXSwKICAgICAgY29udGFpbmVyID0gZXZlbnRzW2V2ZW50XSA9IGV2ZW50c1tldmVudF0gfHwgW10sCiAgICAgIGlkID0gcmFuZG9tSWQoKSwKICAgICAgaW5kZXggPSB2b2lkIDAsCiAgICAgIGNhbGxiYWNrID0gZnVuY3Rpb24gY2FsbGJhY2soKSB7CiAgICBpbmRleCA9IGZpbmRJbmRleEJ5SWQuY2FsbChjb250YWluZXIsIGlkKTsKICAgIGluZGV4ID49IDAgJiYgY29udGFpbmVyLnNwbGljZShpbmRleCwgMSk7CiAgICBsaXN0ZW5lci5hcHBseShzZWxmLCBhcmd1bWVudHMpOwogIH07CiAgY2FsbGJhY2tbaWRfSWRlbnRpZmllcl0gPSBpZDsKICBjb250YWluZXIucHVzaChjYWxsYmFjayk7Cn07Cgpwcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uICgpIHsKICB2YXIgc2VsZiA9IHRoaXMsCiAgICAgIGFyZ3YgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cyksCiAgICAgIGV2ZW50ID0gYXJndi5zaGlmdCgpLAogICAgICBldmVudHMgPSBzZWxmW25hbWVdOwogIChldmVudHNbJyonXSB8fCBbXSkuY29uY2F0KGV2ZW50c1tldmVudF0gfHwgW10pLm1hcChmdW5jdGlvbiAobGlzdGVuZXIpIHsKICAgIHJldHVybiBzZWxmLmVtaXR0aW5nKGV2ZW50LCBhcmd2LCBsaXN0ZW5lcik7CiAgfSk7Cn07Cgpwcm90b3R5cGUuZW1pdHRpbmcgPSBmdW5jdGlvbiAoZXZlbnQsIGRhdGFBcnJheSwgbGlzdGVuZXIpIHsKICBsaXN0ZW5lci5hcHBseSh0aGlzLCBkYXRhQXJyYXkpOwp9OwoKLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fWyJkZWZhdWx0Il0gPSBFdmVudEVtaXR0ZXI7CgovKioqLyB9KQovKioqKioqLyBdKTsKfSk7CgovKioqLyB9KSwKLyogMTUgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKdmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkgewogICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwKICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8CiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07CiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHsKICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpOwogICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfQogICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTsKICAgIH07Cn0pKCk7Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsgdmFsdWU6IHRydWUgfSk7CnZhciBwcm92aWRlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTsKdmFyIHV0aWxzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpOwp2YXIgWmhpaHVEYWlseVByb3ZpZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikgewogICAgX19leHRlbmRzKFpoaWh1RGFpbHlQcm92aWRlciwgX3N1cGVyKTsKICAgIGZ1bmN0aW9uIFpoaWh1RGFpbHlQcm92aWRlcigpIHsKICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzOwogICAgICAgIF90aGlzLnRlc3QgPSAvemhpaHVcLmNvbVwvXD90YXJnZXQ9KC4qKS87CiAgICAgICAgcmV0dXJuIF90aGlzOwogICAgfQogICAgWmhpaHVEYWlseVByb3ZpZGVyLnByb3RvdHlwZS5vblNjcm9sbCA9IGZ1bmN0aW9uIChhRWxlbWVudExpc3QpIHsKICAgICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICAgIGFFbGVtZW50TGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChhRWxlbWVudCkgewogICAgICAgICAgICBfdGhpcy5vbkhvdmVyKGFFbGVtZW50KTsKICAgICAgICB9KTsKICAgIH07CiAgICBaaGlodURhaWx5UHJvdmlkZXIucHJvdG90eXBlLm9uSG92ZXIgPSBmdW5jdGlvbiAoYUVsZW1lbnQpIHsKICAgICAgICB0aGlzLmVtaXQodGhpcy5BTlRJX1JFRElSRUNUX0RPTkVfRVZFTlQsIGFFbGVtZW50LCB1dGlsc18xLm1hdGNoTGlua0Zyb21VcmwoYUVsZW1lbnQsIHRoaXMudGVzdCkpOwogICAgfTsKICAgIHJldHVybiBaaGlodURhaWx5UHJvdmlkZXI7Cn0ocHJvdmlkZXJfMS5Qcm92aWRlcikpOwpleHBvcnRzLlpoaWh1RGFpbHlQcm92aWRlciA9IFpoaWh1RGFpbHlQcm92aWRlcjsKCgovKioqLyB9KSwKLyogMTYgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKdmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkgewogICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwKICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8CiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07CiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHsKICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpOwogICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfQogICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTsKICAgIH07Cn0pKCk7Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsgdmFsdWU6IHRydWUgfSk7CnZhciBwcm92aWRlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTsKdmFyIFRpZWJhUHJvdmlkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7CiAgICBfX2V4dGVuZHMoVGllYmFQcm92aWRlciwgX3N1cGVyKTsKICAgIGZ1bmN0aW9uIFRpZWJhUHJvdmlkZXIoKSB7CiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpczsKICAgICAgICBfdGhpcy50ZXN0ID0gL2p1bXBcZCpcLmJkaW1nXC5jb20vOwogICAgICAgIHJldHVybiBfdGhpczsKICAgIH0KICAgIFRpZWJhUHJvdmlkZXIucHJvdG90eXBlLm9uU2Nyb2xsID0gZnVuY3Rpb24gKGFFbGVtZW50TGlzdCkgewogICAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgICAgYUVsZW1lbnRMaXN0LmZvckVhY2goZnVuY3Rpb24gKGFFbGVtZW50KSB7CiAgICAgICAgICAgIF90aGlzLm9uSG92ZXIoYUVsZW1lbnQpOwogICAgICAgIH0pOwogICAgfTsKICAgIFRpZWJhUHJvdmlkZXIucHJvdG90eXBlLm9uSG92ZXIgPSBmdW5jdGlvbiAoYUVsZW1lbnQpIHsKICAgICAgICBpZiAoIXRoaXMudGVzdC50ZXN0KGFFbGVtZW50LmhyZWYpKQogICAgICAgICAgICByZXR1cm47CiAgICAgICAgdmFyIHVybCA9ICcnOwogICAgICAgIHZhciB0ZXh0ID0gYUVsZW1lbnQuaW5uZXJUZXh0IHx8IGFFbGVtZW50LnRleHRDb250ZW50IHx8ICcnOwogICAgICAgIHRyeSB7CiAgICAgICAgICAgIHVybCA9IGRlY29kZVVSSUNvbXBvbmVudCh0ZXh0KTsKICAgICAgICB9CiAgICAgICAgY2F0Y2ggKGUpIHsKICAgICAgICAgICAgdXJsID0gL2h0dHBzPzpcL1wvLy50ZXN0KHRleHQpID8gdGV4dCA6ICcnOwogICAgICAgIH0KICAgICAgICBpZiAodXJsKSB7CiAgICAgICAgICAgIHRoaXMuZW1pdCh0aGlzLkFOVElfUkVESVJFQ1RfRE9ORV9FVkVOVCwgYUVsZW1lbnQsIHVybCk7CiAgICAgICAgfQogICAgfTsKICAgIHJldHVybiBUaWViYVByb3ZpZGVyOwp9KHByb3ZpZGVyXzEuUHJvdmlkZXIpKTsKZXhwb3J0cy5UaWViYVByb3ZpZGVyID0gVGllYmFQcm92aWRlcjsKCgovKioqLyB9KSwKLyogMTcgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKdmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkgewogICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwKICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8CiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07CiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHsKICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpOwogICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfQogICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTsKICAgIH07Cn0pKCk7Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsgdmFsdWU6IHRydWUgfSk7CnZhciBwcm92aWRlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTsKdmFyIEdvb2dsZVByb3ZpZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikgewogICAgX19leHRlbmRzKEdvb2dsZVByb3ZpZGVyLCBfc3VwZXIpOwogICAgZnVuY3Rpb24gR29vZ2xlUHJvdmlkZXIoKSB7CiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpczsKICAgICAgICBfdGhpcy50ZXN0ID0gL25vdGhpbmcvOwogICAgICAgIHJldHVybiBfdGhpczsKICAgIH0KICAgIEdvb2dsZVByb3ZpZGVyLnByb3RvdHlwZS5vblNjcm9sbCA9IGZ1bmN0aW9uIChhRWxlbWVudExpc3QpIHsKICAgICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICAgIGFFbGVtZW50TGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChhRWxlbWVudCkgewogICAgICAgICAgICBfdGhpcy5vbkhvdmVyKGFFbGVtZW50KTsKICAgICAgICB9KTsKICAgIH07CiAgICBHb29nbGVQcm92aWRlci5wcm90b3R5cGUub25Ib3ZlciA9IGZ1bmN0aW9uIChhRWxlbWVudCkgewogICAgICAgIGlmIChhRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ29ubW91c2Vkb3duJykpIHsKICAgICAgICAgICAgYUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdvbm1vdXNlZG93bicpOwogICAgICAgIH0KICAgICAgICBpZiAoYUVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWhyZWYnKSkgewogICAgICAgICAgICB2YXIgcmVhbFVybCA9IGFFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1ocmVmJyk7CiAgICAgICAgICAgIHRoaXMuZW1pdCh0aGlzLkFOVElfUkVESVJFQ1RfRE9ORV9FVkVOVCwgYUVsZW1lbnQsIHJlYWxVcmwpOwogICAgICAgIH0KICAgIH07CiAgICByZXR1cm4gR29vZ2xlUHJvdmlkZXI7Cn0ocHJvdmlkZXJfMS5Qcm92aWRlcikpOwpleHBvcnRzLkdvb2dsZVByb3ZpZGVyID0gR29vZ2xlUHJvdmlkZXI7CgoKLyoqKi8gfSksCi8qIDE4ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKCnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHsKICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8CiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fAogICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9OwogICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7CiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTsKICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH0KICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7CiAgICB9Owp9KSgpOwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7IHZhbHVlOiB0cnVlIH0pOwp2YXIgcHJvdmlkZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7CnZhciB1dGlsc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTsKdmFyIEdvb2dsZURvY3NQcm92aWRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHsKICAgIF9fZXh0ZW5kcyhHb29nbGVEb2NzUHJvdmlkZXIsIF9zdXBlcik7CiAgICBmdW5jdGlvbiBHb29nbGVEb2NzUHJvdmlkZXIoKSB7CiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpczsKICAgICAgICBfdGhpcy50ZXN0ID0gL3d3d1wuZ29vZ2xlXC5jb21cL3VybFw/cT0oLiopLzsKICAgICAgICByZXR1cm4gX3RoaXM7CiAgICB9CiAgICBHb29nbGVEb2NzUHJvdmlkZXIucHJvdG90eXBlLm9uU2Nyb2xsID0gZnVuY3Rpb24gKGFFbGVtZW50TGlzdCkgewogICAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgICAgYUVsZW1lbnRMaXN0LmZvckVhY2goZnVuY3Rpb24gKGFFbGVtZW50KSB7CiAgICAgICAgICAgIF90aGlzLm9uSG92ZXIoYUVsZW1lbnQpOwogICAgICAgIH0pOwogICAgfTsKICAgIEdvb2dsZURvY3NQcm92aWRlci5wcm90b3R5cGUub25Ib3ZlciA9IGZ1bmN0aW9uIChhRWxlbWVudCkgewogICAgICAgIHRoaXMuZW1pdCh0aGlzLkFOVElfUkVESVJFQ1RfRE9ORV9FVkVOVCwgYUVsZW1lbnQsIHV0aWxzXzEubWF0Y2hMaW5rRnJvbVVybChhRWxlbWVudCwgdGhpcy50ZXN0KSk7CiAgICB9OwogICAgcmV0dXJuIEdvb2dsZURvY3NQcm92aWRlcjsKfShwcm92aWRlcl8xLlByb3ZpZGVyKSk7CmV4cG9ydHMuR29vZ2xlRG9jc1Byb3ZpZGVyID0gR29vZ2xlRG9jc1Byb3ZpZGVyOwoKCi8qKiovIH0pLAovKiAxOSAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7Cgp2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7CiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fAogICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHwKICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTsKICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikgewogICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7CiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9CiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpOwogICAgfTsKfSkoKTsKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgeyB2YWx1ZTogdHJ1ZSB9KTsKdmFyIHByb3ZpZGVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApOwp2YXIgdXRpbHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7CnZhciBaaGlodVByb3ZpZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikgewogICAgX19leHRlbmRzKFpoaWh1UHJvdmlkZXIsIF9zdXBlcik7CiAgICBmdW5jdGlvbiBaaGlodVByb3ZpZGVyKCkgewogICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7CiAgICAgICAgX3RoaXMudGVzdCA9IC96aGlodVwuY29tXC9cP3RhcmdldD0oLiopLzsKICAgICAgICByZXR1cm4gX3RoaXM7CiAgICB9CiAgICBaaGlodVByb3ZpZGVyLnByb3RvdHlwZS5vblNjcm9sbCA9IGZ1bmN0aW9uIChhRWxlbWVudExpc3QpIHsKICAgICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICAgIGFFbGVtZW50TGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChhRWxlbWVudCkgewogICAgICAgICAgICBfdGhpcy5vbkhvdmVyKGFFbGVtZW50KTsKICAgICAgICB9KTsKICAgIH07CiAgICBaaGlodVByb3ZpZGVyLnByb3RvdHlwZS5vbkhvdmVyID0gZnVuY3Rpb24gKGFFbGVtZW50KSB7CiAgICAgICAgdGhpcy5lbWl0KHRoaXMuQU5USV9SRURJUkVDVF9ET05FX0VWRU5ULCBhRWxlbWVudCwgdXRpbHNfMS5tYXRjaExpbmtGcm9tVXJsKGFFbGVtZW50LCB0aGlzLnRlc3QpKTsKICAgIH07CiAgICByZXR1cm4gWmhpaHVQcm92aWRlcjsKfShwcm92aWRlcl8xLlByb3ZpZGVyKSk7CmV4cG9ydHMuWmhpaHVQcm92aWRlciA9IFpoaWh1UHJvdmlkZXI7CgoKLyoqKi8gfSksCi8qIDIwICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKCnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHsKICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8CiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fAogICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9OwogICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7CiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTsKICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH0KICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7CiAgICB9Owp9KSgpOwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7IHZhbHVlOiB0cnVlIH0pOwp2YXIgcHJvdmlkZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7CnZhciB1dGlsc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTsKdmFyIFNvUHJvdmlkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7CiAgICBfX2V4dGVuZHMoU29Qcm92aWRlciwgX3N1cGVyKTsKICAgIGZ1bmN0aW9uIFNvUHJvdmlkZXIoKSB7CiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpczsKICAgICAgICBfdGhpcy50ZXN0ID0gL3NvXC5jb21cL2xpbmtcP3VybD0oLiopLzsKICAgICAgICByZXR1cm4gX3RoaXM7CiAgICB9CiAgICBTb1Byb3ZpZGVyLnByb3RvdHlwZS5vblNjcm9sbCA9IGZ1bmN0aW9uIChhRWxlbWVudExpc3QpIHsgfTsKICAgIFNvUHJvdmlkZXIucHJvdG90eXBlLm9uSG92ZXIgPSBmdW5jdGlvbiAoYUVsZW1lbnQpIHsKICAgICAgICB0aGlzLmVtaXQodGhpcy5BTlRJX1JFRElSRUNUX0RPTkVfRVZFTlQsIGFFbGVtZW50LCB1dGlsc18xLm1hdGNoTGlua0Zyb21VcmwoYUVsZW1lbnQsIHRoaXMudGVzdCkpOwogICAgICAgIC8vIOmineWklueahAogICAgICAgIGFFbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1yZXMnKTsgLy8g5Y676Zmk54K55Ye76L+96LiqCiAgICAgICAgYUVsZW1lbnQuaHJlZiA9IGFFbGVtZW50LmhyZWYucmVwbGFjZSgvXCYocXx0fHRzfHNyYyk9W15cJl0qL2csICcnKTsKICAgICAgICB2YXIgZGF0YVVybCA9IGFFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS11cmwnKTsKICAgICAgICBpZiAoZGF0YVVybCkgewogICAgICAgICAgICBhRWxlbWVudC5ocmVmID0gZGF0YVVybDsKICAgICAgICB9CiAgICB9OwogICAgcmV0dXJuIFNvUHJvdmlkZXI7Cn0ocHJvdmlkZXJfMS5Qcm92aWRlcikpOwpleHBvcnRzLlNvUHJvdmlkZXIgPSBTb1Byb3ZpZGVyOwoKCi8qKiovIH0pLAovKiAyMSAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7Cgp2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7CiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fAogICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHwKICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTsKICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikgewogICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7CiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9CiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpOwogICAgfTsKfSkoKTsKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgeyB2YWx1ZTogdHJ1ZSB9KTsKdmFyIHByb3ZpZGVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApOwp2YXIgV2Vib1Byb3ZpZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikgewogICAgX19leHRlbmRzKFdlYm9Qcm92aWRlciwgX3N1cGVyKTsKICAgIGZ1bmN0aW9uIFdlYm9Qcm92aWRlcigpIHsKICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzOwogICAgICAgIF90aGlzLnRlc3QgPSAvdFwuY25cL1x3Ky87CiAgICAgICAgcmV0dXJuIF90aGlzOwogICAgfQogICAgV2Vib1Byb3ZpZGVyLnByb3RvdHlwZS5vblNjcm9sbCA9IGZ1bmN0aW9uIChhRWxlbWVudExpc3QpIHsKICAgICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICAgIGFFbGVtZW50TGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChhRWxlbWVudCkgewogICAgICAgICAgICBfdGhpcy5vbkhvdmVyKGFFbGVtZW50KTsKICAgICAgICB9KTsKICAgIH07CiAgICBXZWJvUHJvdmlkZXIucHJvdG90eXBlLm9uSG92ZXIgPSBmdW5jdGlvbiAoYUVsZW1lbnQpIHsKICAgICAgICBpZiAoIXRoaXMudGVzdC50ZXN0KGFFbGVtZW50LmhyZWYpIHx8ICEvXmh0dHBzPzpcL1wvLy50ZXN0KGFFbGVtZW50LnRpdGxlKSkKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIHZhciB1cmwgPSBkZWNvZGVVUklDb21wb25lbnQoYUVsZW1lbnQudGl0bGUpOwogICAgICAgIGlmICh1cmwpIHsKICAgICAgICAgICAgYUVsZW1lbnQuaHJlZiA9IHVybDsKICAgICAgICAgICAgdGhpcy5lbWl0KHRoaXMuQU5USV9SRURJUkVDVF9ET05FX0VWRU5ULCBhRWxlbWVudCwgdXJsKTsKICAgICAgICB9CiAgICB9OwogICAgcmV0dXJuIFdlYm9Qcm92aWRlcjsKfShwcm92aWRlcl8xLlByb3ZpZGVyKSk7CmV4cG9ydHMuV2Vib1Byb3ZpZGVyID0gV2Vib1Byb3ZpZGVyOwoKCi8qKiovIH0pLAovKiAyMiAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7Cgp2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7CiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fAogICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHwKICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTsKICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikgewogICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7CiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9CiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpOwogICAgfTsKfSkoKTsKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgeyB2YWx1ZTogdHJ1ZSB9KTsKdmFyIHByb3ZpZGVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApOwp2YXIgVHdpdHRlclByb3ZpZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikgewogICAgX19leHRlbmRzKFR3aXR0ZXJQcm92aWRlciwgX3N1cGVyKTsKICAgIGZ1bmN0aW9uIFR3aXR0ZXJQcm92aWRlcigpIHsKICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzOwogICAgICAgIF90aGlzLnRlc3QgPSAvdFwuY29cL1x3Ky87CiAgICAgICAgcmV0dXJuIF90aGlzOwogICAgfQogICAgVHdpdHRlclByb3ZpZGVyLnByb3RvdHlwZS5vblNjcm9sbCA9IGZ1bmN0aW9uIChhRWxlbWVudExpc3QpIHsKICAgICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICAgIGFFbGVtZW50TGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChhRWxlbWVudCkgewogICAgICAgICAgICBfdGhpcy5vbkhvdmVyKGFFbGVtZW50KTsKICAgICAgICB9KTsKICAgIH07CiAgICBUd2l0dGVyUHJvdmlkZXIucHJvdG90eXBlLm9uSG92ZXIgPSBmdW5jdGlvbiAoYUVsZW1lbnQpIHsKICAgICAgICBpZiAoIXRoaXMudGVzdC50ZXN0KGFFbGVtZW50LmhyZWYpIHx8ICEvXmh0dHBzPzpcL1wvLy50ZXN0KGFFbGVtZW50LnRpdGxlKSkKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIHZhciB1cmwgPSBkZWNvZGVVUklDb21wb25lbnQoYUVsZW1lbnQudGl0bGUpOwogICAgICAgIGlmICh1cmwpIHsKICAgICAgICAgICAgdGhpcy5lbWl0KHRoaXMuQU5USV9SRURJUkVDVF9ET05FX0VWRU5ULCBhRWxlbWVudCwgdXJsKTsKICAgICAgICB9CiAgICB9OwogICAgcmV0dXJuIFR3aXR0ZXJQcm92aWRlcjsKfShwcm92aWRlcl8xLlByb3ZpZGVyKSk7CmV4cG9ydHMuVHdpdHRlclByb3ZpZGVyID0gVHdpdHRlclByb3ZpZGVyOwoKCi8qKiovIH0pLAovKiAyMyAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7Cgp2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7CiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fAogICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHwKICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTsKICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikgewogICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7CiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9CiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpOwogICAgfTsKfSkoKTsKdmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykgewogICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDsKICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gIm9iamVjdCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09ICJmdW5jdGlvbiIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTsKICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7CiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByOwp9Owp2YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHsKICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH0KICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvclsidGhyb3ciXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9CiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH0KICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7CiAgICB9KTsKfTsKdmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHsKICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7CiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgInRocm93IjogdmVyYigxKSwgInJldHVybiI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZzsKICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfQogICAgZnVuY3Rpb24gc3RlcChvcCkgewogICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuIik7CiAgICAgICAgd2hpbGUgKF8pIHRyeSB7CiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IHlbb3BbMF0gJiAyID8gInJldHVybiIgOiBvcFswXSA/ICJ0aHJvdyIgOiAibmV4dCJdKSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDsKICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFswLCB0LnZhbHVlXTsKICAgICAgICAgICAgc3dpdGNoIChvcFswXSkgewogICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9OwogICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlOwogICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlOwogICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH0KICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfQogICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfQogICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH0KICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7CiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTsKICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9CiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07CiAgICB9Cn07Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsgdmFsdWU6IHRydWUgfSk7CnZhciBnbV9odHRwXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpOwp2YXIgcHJvdmlkZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7CnZhciB1dGlsc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTsKdmFyIFNvR291UHJvdmlkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7CiAgICBfX2V4dGVuZHMoU29Hb3VQcm92aWRlciwgX3N1cGVyKTsKICAgIGZ1bmN0aW9uIFNvR291UHJvdmlkZXIoKSB7CiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpczsKICAgICAgICBfdGhpcy50ZXN0ID0gL3d3d1wuc29nb3VcLmNvbVwvbGlua1w/dXJsPS87CiAgICAgICAgcmV0dXJuIF90aGlzOwogICAgfQogICAgU29Hb3VQcm92aWRlci5wcm90b3R5cGUuaGFuZGxlck9uZUVsZW1lbnQgPSBmdW5jdGlvbiAoYUVsZW1lbnQpIHsKICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciByZXMsIGZpbmFsVXJsLCBtYXRjaGVyLCBlcnJfMTsKICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkgewogICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkgewogICAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnRlc3QudGVzdChhRWxlbWVudC5ocmVmKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTsKICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAxOwogICAgICAgICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICAgICAgICAgICAgX2EudHJ5cy5wdXNoKFsxLCA0LCAsIDVdKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodXRpbHNfMS5nZXRSZWRpcmVjdChhRWxlbWVudCkgPD0gMiAmJiB0aGlzLnRlc3QudGVzdChhRWxlbWVudC5ocmVmKSkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdOwogICAgICAgICAgICAgICAgICAgICAgICB1dGlsc18xLmluY3JlYXNlUmVkaXJlY3QoYUVsZW1lbnQpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBnbV9odHRwXzEuZGVmYXVsdC5nZXQoYUVsZW1lbnQuaHJlZildOwogICAgICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gX2Euc2VudCgpOwogICAgICAgICAgICAgICAgICAgICAgICB1dGlsc18xLmRlY3JlYXNlUmVkaXJlY3QoYUVsZW1lbnQpOwogICAgICAgICAgICAgICAgICAgICAgICBmaW5hbFVybCA9IHJlcy5maW5hbFVybDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbmFsVXJsICYmICF0aGlzLnRlc3QudGVzdChmaW5hbFVybCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCh0aGlzLkFOVElfUkVESVJFQ1RfRE9ORV9FVkVOVCwgYUVsZW1lbnQsIHJlcy5maW5hbFVybCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVyID0gcmVzLnJlc3BvbnNlVGV4dC5tYXRjaCgvVVJMPVsnIl0oW14nIl0rKVsnIl0vKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaGVyICYmIG1hdGNoZXJbMV0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQodGhpcy5BTlRJX1JFRElSRUNUX0RPTkVfRVZFTlQsIGFFbGVtZW50LCBtYXRjaGVyWzFdKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDM7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzMgLypicmVhayovLCA1XTsKICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICAgICAgICAgIGVycl8xID0gX2Euc2VudCgpOwogICAgICAgICAgICAgICAgICAgICAgICB1dGlsc18xLmRlY3JlYXNlUmVkaXJlY3QoYUVsZW1lbnQpOwogICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycl8xKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07CiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzIgLypyZXR1cm4qL107CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgfTsKICAgIFNvR291UHJvdmlkZXIucHJvdG90eXBlLm9uU2Nyb2xsID0gZnVuY3Rpb24gKGFFbGVtZW50TGlzdCkgewogICAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgICAgYUVsZW1lbnRMaXN0LmZvckVhY2goZnVuY3Rpb24gKGFFbGVtZW50KSB7CiAgICAgICAgICAgIF90aGlzLmhhbmRsZXJPbmVFbGVtZW50KGFFbGVtZW50KTsKICAgICAgICB9KTsKICAgIH07CiAgICBTb0dvdVByb3ZpZGVyLnByb3RvdHlwZS5vbkhvdmVyID0gZnVuY3Rpb24gKGFFbGVtZW50KSB7CiAgICAgICAgdGhpcy5oYW5kbGVyT25lRWxlbWVudChhRWxlbWVudCk7CiAgICB9OwogICAgU29Hb3VQcm92aWRlci5wcm90b3R5cGUucGFyc2VQYWdlID0gZnVuY3Rpb24gKHJlcykgewogICAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgICAgdmFyIHJlc3BvbnNlVGV4dCA9IHJlcy5yZXNwb25zZVRleHQucmVwbGFjZSgvKHNyYz1bXj5dKnxsaW5rPVtePl0pL2csICcnKTsKICAgICAgICB2YXIgaHRtbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2h0bWwnKTsKICAgICAgICBodG1sLmlubmVySFRNTCA9IHJlc3BvbnNlVGV4dDsKICAgICAgICAvLyBsZXQgc2VsZWN0b3IgPSAnI21haW4gLnJlc3VsdHMgZGl2LnZyd3JhcD5oMyc7CiAgICAgICAgLy8gbGV0IHNlbGVjdG9yID0gJyNtYWluIC5yZXN1bHRzIGgzPmEnOwogICAgICAgIHZhciBzZWxlY3RvciA9ICcjbWFpbiAucmVzdWx0cyBhW2hyZWYqPSJ3d3cuc29nb3UuY29tL2xpbms/dXJsPSJdJzsKICAgICAgICB2YXIgcmVtb3RlcyA9IFtdLnNsaWNlLmNhbGwoaHRtbC5xdWVyeVNlbGVjdG9yQWxsKCcjbWFpbiAucmVzdWx0cyBhW2hyZWZdJykpOwogICAgICAgIHZhciBsb2NhbHMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKTsKICAgICAgICBsb2NhbHMuZm9yRWFjaChmdW5jdGlvbiAobG9jYWxFbGUpIHsKICAgICAgICAgICAgcmVtb3Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChyZW1vdGVFbGUpIHsKICAgICAgICAgICAgICAgIHZhciBsb2NhbFRleHQgPSB1dGlsc18xLmdldFRleHQobG9jYWxFbGUpOwogICAgICAgICAgICAgICAgdmFyIHJlbW90ZVRleHQgPSB1dGlsc18xLmdldFRleHQocmVtb3RlRWxlKTsKICAgICAgICAgICAgICAgIC8vIOmAmueUqOaMiemSru+8jOS+i+WmguOAkOeCueWHu+S4i+i9veOAkQogICAgICAgICAgICAgICAgaWYgKGxvY2FsRWxlLmNsYXNzTGlzdC5jb250YWlucygnc3RyLXB1YmxpYy1idG4nKSkgewogICAgICAgICAgICAgICAgICAgIGxvY2FsVGV4dCA9IHV0aWxzXzEuZ2V0VGV4dChsb2NhbEVsZS5wYXJlbnROb2RlKTsKICAgICAgICAgICAgICAgICAgICByZW1vdGVUZXh0ID0gdXRpbHNfMS5nZXRUZXh0KHJlbW90ZUVsZS5wYXJlbnROb2RlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKGxvY2FsRWxlLmNsYXNzTGlzdC5jb250YWlucygnc3RyX2ltZycpKSB7CiAgICAgICAgICAgICAgICAgICAgLy8g5Zu+54mHCiAgICAgICAgICAgICAgICAgICAgbG9jYWxUZXh0ID0gdXRpbHNfMS5nZXRUZXh0KGxvY2FsRWxlLnBhcmVudE5vZGUucGFyZW50Tm9kZSk7CiAgICAgICAgICAgICAgICAgICAgcmVtb3RlVGV4dCA9IHV0aWxzXzEuZ2V0VGV4dChyZW1vdGVFbGUucGFyZW50Tm9kZS5wYXJlbnROb2RlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICghbG9jYWxUZXh0IHx8IGxvY2FsVGV4dCAhPT0gcmVtb3RlVGV4dCkKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICBfdGhpcy5lbWl0KF90aGlzLkFOVElfUkVESVJFQ1RfRE9ORV9FVkVOVCwgbG9jYWxFbGUsIHJlbW90ZUVsZS5ocmVmKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICB9OwogICAgU29Hb3VQcm92aWRlci5wcm90b3R5cGUub25Jbml0ID0gZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgICAgaWYgKCEvd3d3XC5zb2dvdVwuY29tXC93ZWIvLnRlc3Qod2luZG93LnRvcC5sb2NhdGlvbi5ocmVmKSkKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIHZhciBxdWVyeSA9IHV0aWxzXzEucXVlcnlQYXJzZXIod2luZG93LnRvcC5sb2NhdGlvbi5zZWFyY2gpOwogICAgICAgIC8vIOaQnOe0ouS9v+eUqGh0dHDmkJzntKLvvIzlvpfliLDnmoTmmK/nm7TmjqXpk77mjqUKICAgICAgICB2YXIgdXJsID0gbG9jYXRpb24ucHJvdG9jb2wKICAgICAgICAgICAgLnJlcGxhY2UoLzokLywgJycpCiAgICAgICAgICAgIC5yZXBsYWNlKCdzJywgJycpICsgIjovLyIgKyAobG9jYXRpb24uaG9zdCArIGxvY2F0aW9uLnBhdGhuYW1lICsgcXVlcnkpOwogICAgICAgIGdtX2h0dHBfMS5kZWZhdWx0CiAgICAgICAgICAgIC5nZXQodXJsKQogICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgICAgIF90aGlzLnBhcnNlUGFnZShyZXMpOwogICAgICAgIH0pCiAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTsKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gdGhpczsKICAgIH07CiAgICBfX2RlY29yYXRlKFsKICAgICAgICB1dGlsc18xLnRocm90dGxlRGVjb3JhdG9yKDUwMCkKICAgIF0sIFNvR291UHJvdmlkZXIucHJvdG90eXBlLCAib25Ib3ZlciIsIG51bGwpOwogICAgcmV0dXJuIFNvR291UHJvdmlkZXI7Cn0ocHJvdmlkZXJfMS5Qcm92aWRlcikpOwpleHBvcnRzLlNvR291UHJvdmlkZXIgPSBTb0dvdVByb3ZpZGVyOwoKCi8qKiovIH0pLAovKiAyNCAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7Cgp2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7CiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fAogICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHwKICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTsKICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikgewogICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7CiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9CiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpOwogICAgfTsKfSkoKTsKdmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykgewogICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDsKICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gIm9iamVjdCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09ICJmdW5jdGlvbiIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTsKICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7CiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByOwp9Owp2YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHsKICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH0KICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvclsidGhyb3ciXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9CiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH0KICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7CiAgICB9KTsKfTsKdmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHsKICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7CiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgInRocm93IjogdmVyYigxKSwgInJldHVybiI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZzsKICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfQogICAgZnVuY3Rpb24gc3RlcChvcCkgewogICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuIik7CiAgICAgICAgd2hpbGUgKF8pIHRyeSB7CiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IHlbb3BbMF0gJiAyID8gInJldHVybiIgOiBvcFswXSA/ICJ0aHJvdyIgOiAibmV4dCJdKSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDsKICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFswLCB0LnZhbHVlXTsKICAgICAgICAgICAgc3dpdGNoIChvcFswXSkgewogICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9OwogICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlOwogICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlOwogICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH0KICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfQogICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfQogICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH0KICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7CiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTsKICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9CiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07CiAgICB9Cn07Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsgdmFsdWU6IHRydWUgfSk7CnZhciBnbV9odHRwXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpOwp2YXIgcHJvdmlkZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7CnZhciB1dGlsc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTsKdmFyIEJhaWR1UHJvdmlkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7CiAgICBfX2V4dGVuZHMoQmFpZHVQcm92aWRlciwgX3N1cGVyKTsKICAgIGZ1bmN0aW9uIEJhaWR1UHJvdmlkZXIoKSB7CiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpczsKICAgICAgICBfdGhpcy50ZXN0ID0gL3d3d1wuYmFpZHVcLmNvbVwvbGlua1w/dXJsPS87CiAgICAgICAgcmV0dXJuIF90aGlzOwogICAgfQogICAgQmFpZHVQcm92aWRlci5wcm90b3R5cGUub25TY3JvbGwgPSBmdW5jdGlvbiAoYUVsZW1lbnRMaXN0KSB7CiAgICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgICBhRWxlbWVudExpc3QuZm9yRWFjaChmdW5jdGlvbiAoYUVsZW1lbnQpIHsKICAgICAgICAgICAgaWYgKHV0aWxzXzEuZ2V0UmVkaXJlY3QoYUVsZW1lbnQpIDw9IDIgJiYgX3RoaXMudGVzdC50ZXN0KGFFbGVtZW50LmhyZWYpKSB7CiAgICAgICAgICAgICAgICB1dGlsc18xLmluY3JlYXNlUmVkaXJlY3QoYUVsZW1lbnQpOwogICAgICAgICAgICAgICAgX3RoaXMuaGFuZGxlck9uZUVsZW1lbnQoYUVsZW1lbnQpCiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgICAgICAgICAgICAgIHV0aWxzXzEuZGVjcmVhc2VSZWRpcmVjdChhRWxlbWVudCk7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgICAgICAgICAgdXRpbHNfMS5kZWNyZWFzZVJlZGlyZWN0KGFFbGVtZW50KTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9OwogICAgQmFpZHVQcm92aWRlci5wcm90b3R5cGUuaGFuZGxlck9uZUVsZW1lbnQgPSBmdW5jdGlvbiAoYUVsZW1lbnQpIHsKICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciByZXMsIGVycl8xOwogICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzAsIDIsICwgM10pOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBnbV9odHRwXzEuZGVmYXVsdC5nZXQoYUVsZW1lbnQuaHJlZildOwogICAgICAgICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gX2Euc2VudCgpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzLmZpbmFsVXJsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQodGhpcy5BTlRJX1JFRElSRUNUX0RPTkVfRVZFTlQsIGFFbGVtZW50LCByZXMuZmluYWxVcmwpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCByZXNdOwogICAgICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgICAgICAgICAgZXJyXzEgPSBfYS5zZW50KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyXzEpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAzXTsKICAgICAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbMiAvKnJldHVybiovXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICB9OwogICAgQmFpZHVQcm92aWRlci5wcm90b3R5cGUub25Ib3ZlciA9IGZ1bmN0aW9uIChhRWxlbWVudCwgY2FsbGJhY2spIHsKICAgICAgICBpZiAoIXRoaXMudGVzdC50ZXN0KGFFbGVtZW50LmhyZWYpKQogICAgICAgICAgICByZXR1cm47CiAgICAgICAgdGhpcy5oYW5kbGVyT25lRWxlbWVudChhRWxlbWVudCk7CiAgICB9OwogICAgLy8gcHJpdmF0ZSBwYXJzZVBhZ2UocmVzOiBSZXNwb25zZSQpOiB2b2lkIHt9CiAgICBCYWlkdVByb3ZpZGVyLnByb3RvdHlwZS5vbkluaXQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgLy8gaWYgKCEvd3d3XC5iYWlkdVwuY29tXC9zLy50ZXN0KHdpbmRvdy50b3AubG9jYXRpb24uaHJlZikpIHJldHVybjsKICAgICAgICAvLyBjb25zdCBxdWVyeSA9IHF1ZXJ5UGFyc2VyKHdpbmRvdy50b3AubG9jYXRpb24uc2VhcmNoKTsKICAgICAgICAvLyBjb25zdCBza2lwID0gcXVlcnkub2JqZWN0LnBuIHx8IDA7CiAgICAgICAgLy8KICAgICAgICAvLyBxdWVyeS5vYmplY3QudG4gPSAnYmFpZHVsb2NhbCc7CiAgICAgICAgLy8gcXVlcnkub2JqZWN0LnRpbWVzdGFtcCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOwogICAgICAgIC8vIHF1ZXJ5Lm9iamVjdC5ybiA9IDUwOwogICAgICAgIC8vCiAgICAgICAgLy8gY29uc3QgdXJsOiBzdHJpbmcgPSBgJHtsb2NhdGlvbi5wcm90b2NvbC5yZXBsYWNlKAogICAgICAgIC8vICAgLzokLywKICAgICAgICAvLyAgICcnCiAgICAgICAgLy8gKX06Ly8ke2xvY2F0aW9uLmhvc3QgKyBsb2NhdGlvbi5wYXRobmFtZSArIHF1ZXJ5fWA7CiAgICAgICAgLy8KICAgICAgICAvLyBQcm9taXNlLmFsbChbCiAgICAgICAgLy8gICBodHRwLmdldCh1cmwpLAogICAgICAgIC8vICAgaHR0cC5nZXQodXJsLnJlcGxhY2UoL3BuPShcZCspLywgYHBuPSR7c2tpcCArIDEwfWApKQogICAgICAgIC8vIF0pCiAgICAgICAgLy8gICAudGhlbigocmVzTGlzdDogUmVzcG9uc2UkW10pID0+IHsKICAgICAgICAvLyAgICAgaWYgKCFyZXNMaXN0IHx8ICFyZXNMaXN0Lmxlbmd0aCkgcmV0dXJuOwogICAgICAgIC8vICAgICByZXNMaXN0LmZvckVhY2gocmVzID0+IHsKICAgICAgICAvLyAgICAgICByZXR1cm4gdGhpcy5wYXJzZVBhZ2UocmVzKTsKICAgICAgICAvLyAgICAgfSk7CiAgICAgICAgLy8gICB9KQogICAgICAgIC8vICAgLmNhdGNoKGVyciA9PiB7CiAgICAgICAgLy8gICAgIGNvbnNvbGUuZXJyb3IoZXJyKTsKICAgICAgICAvLyAgIH0pOwogICAgICAgIHJldHVybiB0aGlzOwogICAgfTsKICAgIF9fZGVjb3JhdGUoWwogICAgICAgIHV0aWxzXzEudGhyb3R0bGVEZWNvcmF0b3IoNTAwKQogICAgXSwgQmFpZHVQcm92aWRlci5wcm90b3R5cGUsICJvbkhvdmVyIiwgbnVsbCk7CiAgICByZXR1cm4gQmFpZHVQcm92aWRlcjsKfShwcm92aWRlcl8xLlByb3ZpZGVyKSk7CmV4cG9ydHMuQmFpZHVQcm92aWRlciA9IEJhaWR1UHJvdmlkZXI7CgoKLyoqKi8gfSksCi8qIDI1ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKCnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHsKICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8CiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fAogICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9OwogICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7CiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTsKICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH0KICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7CiAgICB9Owp9KSgpOwp2YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7CiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkOwogICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAib2JqZWN0IiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gImZ1bmN0aW9uIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpOwogICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjsKICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7Cn07Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsgdmFsdWU6IHRydWUgfSk7CnZhciBnbV9odHRwXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpOwp2YXIgcHJvdmlkZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7CnZhciB1dGlsc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTsKdmFyIEJhaWR1VmlkZW9Qcm92aWRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHsKICAgIF9fZXh0ZW5kcyhCYWlkdVZpZGVvUHJvdmlkZXIsIF9zdXBlcik7CiAgICBmdW5jdGlvbiBCYWlkdVZpZGVvUHJvdmlkZXIoKSB7CiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpczsKICAgICAgICBfdGhpcy50ZXN0ID0gL3ZcLmJhaWR1XC5jb21cL2xpbmtcP3VybD0vOwogICAgICAgIHJldHVybiBfdGhpczsKICAgIH0KICAgIEJhaWR1VmlkZW9Qcm92aWRlci5wcm90b3R5cGUub25TY3JvbGwgPSBmdW5jdGlvbiAoYUVsZW1lbnRMaXN0KSB7IH07CiAgICBCYWlkdVZpZGVvUHJvdmlkZXIucHJvdG90eXBlLm9uSG92ZXIgPSBmdW5jdGlvbiAoYUVsZW1lbnQpIHsKICAgICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICAgIGlmICghdGhpcy50ZXN0LnRlc3QoYUVsZW1lbnQuaHJlZikpCiAgICAgICAgICAgIHJldHVybjsKICAgICAgICBnbV9odHRwXzEuZGVmYXVsdAogICAgICAgICAgICAuZ2V0KGFFbGVtZW50LmhyZWYpCiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICAgICAgaWYgKHJlcy5maW5hbFVybCkgewogICAgICAgICAgICAgICAgX3RoaXMuZW1pdChfdGhpcy5BTlRJX1JFRElSRUNUX0RPTkVfRVZFTlQsIGFFbGVtZW50LCByZXMuZmluYWxVcmwpOwogICAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpOwogICAgICAgIH0pOwogICAgfTsKICAgIF9fZGVjb3JhdGUoWwogICAgICAgIHV0aWxzXzEudGhyb3R0bGVEZWNvcmF0b3IoNTAwKQogICAgXSwgQmFpZHVWaWRlb1Byb3ZpZGVyLnByb3RvdHlwZSwgIm9uSG92ZXIiLCBudWxsKTsKICAgIHJldHVybiBCYWlkdVZpZGVvUHJvdmlkZXI7Cn0ocHJvdmlkZXJfMS5Qcm92aWRlcikpOwpleHBvcnRzLkJhaWR1VmlkZW9Qcm92aWRlciA9IEJhaWR1VmlkZW9Qcm92aWRlcjsKCgovKioqLyB9KSwKLyogMjYgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKdmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkgewogICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwKICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8CiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07CiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHsKICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpOwogICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfQogICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTsKICAgIH07Cn0pKCk7Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsgdmFsdWU6IHRydWUgfSk7CnZhciBwcm92aWRlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTsKdmFyIHV0aWxzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpOwp2YXIgSnVlamluUHJvdmlkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7CiAgICBfX2V4dGVuZHMoSnVlamluUHJvdmlkZXIsIF9zdXBlcik7CiAgICBmdW5jdGlvbiBKdWVqaW5Qcm92aWRlcigpIHsKICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzOwogICAgICAgIF90aGlzLnRlc3QgPSAvbGlua1wuanVlamluXC5pbVwvXD90YXJnZXQ9KC4qKS87CiAgICAgICAgcmV0dXJuIF90aGlzOwogICAgfQogICAgSnVlamluUHJvdmlkZXIucHJvdG90eXBlLm9uU2Nyb2xsID0gZnVuY3Rpb24gKGFFbGVtZW50TGlzdCkgewogICAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgICAgYUVsZW1lbnRMaXN0LmZvckVhY2goZnVuY3Rpb24gKGFFbGVtZW50KSB7CiAgICAgICAgICAgIF90aGlzLm9uSG92ZXIoYUVsZW1lbnQpOwogICAgICAgIH0pOwogICAgfTsKICAgIEp1ZWppblByb3ZpZGVyLnByb3RvdHlwZS5vbkhvdmVyID0gZnVuY3Rpb24gKGFFbGVtZW50KSB7CiAgICAgICAgdGhpcy5lbWl0KHRoaXMuQU5USV9SRURJUkVDVF9ET05FX0VWRU5ULCBhRWxlbWVudCwgdXRpbHNfMS5tYXRjaExpbmtGcm9tVXJsKGFFbGVtZW50LCB0aGlzLnRlc3QpKTsKICAgIH07CiAgICByZXR1cm4gSnVlamluUHJvdmlkZXI7Cn0ocHJvdmlkZXJfMS5Qcm92aWRlcikpOwpleHBvcnRzLkp1ZWppblByb3ZpZGVyID0gSnVlamluUHJvdmlkZXI7CgoKLyoqKi8gfSkKLyoqKioqKi8gXSk7"}]}