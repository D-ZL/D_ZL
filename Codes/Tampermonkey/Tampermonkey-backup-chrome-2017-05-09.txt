{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"Google: Bypass Result Page Redirect","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["/^https?://(?:www|encrypted|ipv[46])\\.google\\.[^/]+/(?:$|[#?]|search|webhp|imgres)/"],"orig_matches":["https://news.google.com/*","https://cse.google.com/cse/*"],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1487594258306},"enabled":false,"position":1,"file_url":"https://greasyfork.org/scripts/14150-google-%E7%BB%95%E8%BF%87%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E7%BD%91%E9%A1%B5%E9%93%BE%E6%8E%A5%E9%87%8D%E5%AE%9A%E5%90%91/code/Google%EF%BC%9A%E7%BB%95%E8%BF%87%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E7%BD%91%E9%A1%B5%E9%93%BE%E6%8E%A5%E9%87%8D%E5%AE%9A%E5%90%91.user.js","uuid":"c65f0816-cf1f-429d-a2a7-50681993d6f3","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWVzcGFjZSAgIFZBX2kKLy8gQHZlcnNpb24gICAgIDcuMi4xLjIwMTcwMjI3Ci8vIEBncmFudCAgICAgICB1bnNhZmVXaW5kb3cKLy8gQGdyYW50ICAgICAgIEdNX2FkZFN0eWxlCi8vIEBncmFudCAgICAgICBHTV9nZXRWYWx1ZQovLyBAZ3JhbnQgICAgICAgR01fc2V0VmFsdWUKLy8gQGluY2x1ZGUgICAgIC9eaHR0cHM/Oi8vKD86d3d3fGVuY3J5cHRlZHxpcHZbNDZdKVwuZ29vZ2xlXC5bXi9dKy8oPzokfFsjP118c2VhcmNofHdlYmhwfGltZ3JlcykvCi8vIEBtYXRjaCAgICAgICBodHRwczovL25ld3MuZ29vZ2xlLmNvbS8qCi8vIEBtYXRjaCAgICAgICBodHRwczovL2NzZS5nb29nbGUuY29tL2NzZS8qCi8vIEBydW4tYXQgICAgICBkb2N1bWVudC1zdGFydAovLyBAbmFtZSAgICAgICAgR29vZ2xlOiBCeXBhc3MgUmVzdWx0IFBhZ2UgUmVkaXJlY3QKLy8gQG5hbWU6emgtQ04gIEdvb2dsZe+8mue7lei/h+aQnOe0oue7k+aenOe9kemhtemTvuaOpemHjeWumuWQkQovLyBAbmFtZTp6aC1UVyAgR29vZ2xl77ya57me6YGO5pCc5bCL57WQ5p6c57ay6aCB6Y+I5o6l6YeN5a6a5ZCRCi8vIEBkZXNjcmlwdGlvbiBBdm9pZCBHb29nbGUgcmVkaXJlY3QgZm9yIHNlYXJjaCByZXN1bHQgcGFnZXMuCi8vIEBkZXNjcmlwdGlvbjp6aC1DTiDku6QgR29vZ2xlIOebtOaOpemTvuaOpeiHs+aQnOe0oue7k+aenOe9kemhte+8jOaXoOmhu+mHjeWumuWQkeOAggovLyBAZGVzY3JpcHRpb246emgtVFcg5LukIEdvb2dsZSDnm7TmjqXpj4jmjqXoh7PmkJzlsIvntZDmnpzntrLpoIHvvIznhKHpoIjph43lrprlkJHjgIIKLy8gPT0vVXNlclNjcmlwdD09CgovLyBGb3IgZXhhbXBsZTogb3BlbiBodHRwczovL2lwdjQuZ29vZ2xlLmNvbS8jeC1vcHRpb246b3Blbi1pbnBsYWNlCnN3aXRjaCAobG9jYXRpb24uaGFzaCkgewogIC8vIE9wZW4gbGlua3MgaW4gdGhlIGN1cnJlbnQgdGFiLgogIGNhc2UgJyN4LW9wdGlvbjpvcGVuLWlucGxhY2UnOiBHTV9zZXRWYWx1ZSgnb3B0X25vb3BlbicsIHRydWUpOyBicmVhazsKICAvLyBEbyBub3QgLi4uCiAgY2FzZSAnI3gtb3B0aW9uOm5vLW9wZW4taW5wbGFjZSc6IEdNX3NldFZhbHVlKCdvcHRfbm9vcGVuJywgZmFsc2UpOyBicmVhazsKfQoKdmFyIG9wdGlvbnMgPSB7CiAgb3B0X25vb3BlbjogR01fZ2V0VmFsdWUoJ29wdF9ub29wZW4nLCBmYWxzZSkKfTsKCnVuc2FmZVdpbmRvdy5GdW5jdGlvbigoZnVuY3Rpb24gKCkgewoKdmFyIGRlYnVnID0gZmFsc2U7CnZhciBjb3VudCA9IDA7Cgp2YXIgb3B0aW9ucyA9IEpTT04ucGFyc2UoYXJndW1lbnRzWzBdIHx8ICd7fScpOwpkZWJ1ZyAmJiBjb25zb2xlLmxvZygnT3B0aW9uczonLCBvcHRpb25zKTsKCi8vIHdlYiBwYWdlczogdXJsP3VybD0KLy8gY3VzdG9tIHNlYXJjaCBlbmdpbmU6IHVybD9xPQovLyBtYWx3YXJlOiBpbnRlcnN0aXRpYWw/dXJsPQp2YXIgcmUgPSAvXGJ1cmxcPy4qP1xiKD86dXJsfHEpPShodHRwcz9cYlteJiNdKykvaTsKdmFyIHJlc3RvcmUgPSBmdW5jdGlvbiAobGluaywgdXJsKSB7CiAgdmFyIG9sZFVybCA9IGxpbmsuZ2V0QXR0cmlidXRlKCdocmVmJykgfHwgJyc7CiAgdmFyIG5ld1VybCA9IHVybCB8fCBvbGRVcmw7CiAgdmFyIG1hdGNoZXMgPSBuZXdVcmwubWF0Y2gocmUpOwogIGlmIChtYXRjaGVzKSB7CiAgICBsaW5rLnNldEF0dHJpYnV0ZSgnaHJlZicsIGRlY29kZVVSSUNvbXBvbmVudChtYXRjaGVzWzFdKSk7CiAgICByZW1vdmVSZWZlcnJlcihsaW5rKTsKICB9IGVsc2UgaWYgKHVybCAhPSBudWxsKSB7CiAgICBsaW5rLnNldEF0dHJpYnV0ZSgnaHJlZicsIHVybCk7CiAgfQp9OwoKdmFyIHJlbW92ZVJlZmVycmVyID0gZnVuY3Rpb24gKGEpIHsKICBhLnNldEF0dHJpYnV0ZSgncmVsJywgJ25vcmVmZXJyZXInKTsKICBhLnNldEF0dHJpYnV0ZSgncmVmZXJyZXJwb2xpY3knLCAnbm8tcmVmZXJyZXInKTsKICBpZiAob3B0aW9ucy5vcHRfbm9vcGVuKSB7CiAgICBhLnNldEF0dHJpYnV0ZSgndGFyZ2V0JywgJ19zZWxmJyk7CiAgICBhLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOwogICAgfSwgdHJ1ZSk7CiAgfQp9OwoKdmFyIGZha2VMaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOwp2YXIgbm9ybWFsaXplVXJsID0gZnVuY3Rpb24gKHVybCkgewogIGZha2VMaW5rLmhyZWYgPSB1cmw7CiAgcmV0dXJuIGZha2VMaW5rLmhyZWY7Cn07Cgp2YXIgc2V0dGVyID0gZnVuY3Rpb24gKHYpIHsKICB2ID0gU3RyaW5nKHYpOyAgLy8gaW4gY2FzZSBhbiBvYmplY3QgaXMgcGFzc2VkIGJ5IGNsZXZlciBHb29nbGUKICBkZWJ1ZyAmJiBjb25zb2xlLmxvZygnU3RhdGU6JywgZG9jdW1lbnQucmVhZHlTdGF0ZSk7CiAgZGVidWcgJiYgY29uc29sZS5sb2coJ3NldCcsIHRoaXMuX3hfaWQsIHRoaXMuZ2V0QXR0cmlidXRlKCdocmVmJyksIHYpOwogIHJlc3RvcmUodGhpcywgdik7Cn07CnZhciBnZXR0ZXIgPSBmdW5jdGlvbiAoKSB7CiAgZGVidWcgJiYgY29uc29sZS5sb2coJ2dldCcsIHRoaXMuX3hfaWQsIHRoaXMuZ2V0QXR0cmlidXRlKCdocmVmJykpOwogIHJldHVybiBub3JtYWxpemVVcmwodGhpcy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSk7Cn07CnZhciBibG9ja2VyID0gZnVuY3Rpb24gKGV2ZW50KSB7CiAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7CiAgcmVzdG9yZSh0aGlzKTsKICBkZWJ1ZyAmJiBjb25zb2xlLmxvZygnYmxvY2snLCB0aGlzLl94X2lkLCB0aGlzLmdldEF0dHJpYnV0ZSgnaHJlZicpKTsKfTsKCnZhciBoYW5kbGVyID0gZnVuY3Rpb24gKGEpIHsKICBpZiAoYS5feF9pZCkgewogICAgcmVzdG9yZShhKTsKICAgIHJldHVybjsKICB9CiAgYS5feF9pZCA9ICsrY291bnQ7CiAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgewogICAgZGVidWcgJiYgY29uc29sZS5sb2coJ2RlZmluZSBwcm9wZXJ0eScsIGEuX3hfaWQpOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGEsICdocmVmJywge2dldDogZ2V0dGVyLCBzZXQ6IHNldHRlcn0pOwogIH0gZWxzZSBpZiAoYS5fX2RlZmluZVNldHRlcl9fKSB7CiAgICBkZWJ1ZyAmJiBjb25zb2xlLmxvZygnZGVmaW5lIGdldHRlcicsIGEuX3hfaWQpOwogICAgYS5fX2RlZmluZVNldHRlcl9fKCdocmVmJywgc2V0dGVyKTsKICAgIGEuX19kZWZpbmVHZXR0ZXJfXygnaHJlZicsIGdldHRlcik7CiAgfSBlbHNlIHsKICAgIGRlYnVnICYmIGNvbnNvbGUubG9nKCdkZWZpbmUgbGlzdGVuZXInLCBhLl94X2lkKTsKICAgIGEub25tb3VzZWVudGVyID0gYS5vbm1vdXNlbW92ZSA9IGEub25tb3VzZXVwID0gYS5vbm1vdXNlZG93biA9CiAgICAgIGEub25kYmNsaWNrID0gYS5vbmNsaWNrID0gYS5vbmNvbnRleHRtZW51ID0gYmxvY2tlcjsKICB9CiAgZGVidWcgJiYgYS5zZXRBdHRyaWJ1dGUoJ3gtaWQnLCBhLl94X2lkKTsKICByZXN0b3JlKGEpOwp9OwoKdmFyIGNoZWNrTmV3Tm9kZXMgPSBmdW5jdGlvbiAobXV0YXRpb25zKSB7CiAgZGVidWcgJiYgY29uc29sZS5sb2coJ1N0YXRlOicsIGRvY3VtZW50LnJlYWR5U3RhdGUpOwogIGlmIChtdXRhdGlvbnMudGFyZ2V0KSB7CiAgICBjaGVja0F0dHJpYnV0ZShtdXRhdGlvbnMpOwogIH0gZWxzZSB7CiAgICBtdXRhdGlvbnMuZm9yRWFjaCAmJiBtdXRhdGlvbnMuZm9yRWFjaChjaGVja0F0dHJpYnV0ZSk7CiAgfQp9Owp2YXIgY2hlY2tBdHRyaWJ1dGUgPSBmdW5jdGlvbiAobXV0YXRpb24pIHsKICB2YXIgdGFyZ2V0ID0gbXV0YXRpb24udGFyZ2V0OwogIGlmICh0YXJnZXQgJiYgdGFyZ2V0Lm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkgPT09ICdBJykgewogICAgaWYgKChtdXRhdGlvbi5hdHRyaWJ1dGVOYW1lIHx8IG11dGF0aW9uLmF0dHJOYW1lKSA9PT0gJ2hyZWYnKSB7CiAgICAgIGRlYnVnICYmIGNvbnNvbGUubG9nKCdyZXN0b3JlIGF0dHJpYnV0ZScsIHRhcmdldC5feF9pZCwgdGFyZ2V0LmdldEF0dHJpYnV0ZSgnaHJlZicpKTsKICAgIH0KICAgIGhhbmRsZXIodGFyZ2V0KTsKICB9IGVsc2UgaWYgKHRhcmdldC5ub2RlVHlwZSA9PT0gRWxlbWVudC5FTEVNRU5UX05PREUpIHsKICAgIFtdLnNsaWNlLmNhbGwodGFyZ2V0LnF1ZXJ5U2VsZWN0b3JBbGwoJ2EnKSkuZm9yRWFjaChoYW5kbGVyKTsKICB9Cn07Cgp2YXIgTXV0YXRpb25PYnNlcnZlciA9IHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyIHx8IHdpbmRvdy5XZWJLaXRNdXRhdGlvbk9ic2VydmVyOwoKaWYgKE11dGF0aW9uT2JzZXJ2ZXIpIHsKICBkZWJ1ZyAmJiBjb25zb2xlLmxvZygnTXV0YXRpb25PYnNlcnZlcjogdHJ1ZScpOwogIG5ldyBNdXRhdGlvbk9ic2VydmVyKGNoZWNrTmV3Tm9kZXMpLm9ic2VydmUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB7CiAgICBjaGlsZExpc3Q6IHRydWUsCiAgICBhdHRyaWJ1dGVzOiB0cnVlLAogICAgYXR0cmlidXRlRmlsdGVyOiBbJ2hyZWYnXSwKICAgIHN1YnRyZWU6IHRydWUKICB9KTsKfSBlbHNlIHsKICBkZWJ1ZyAmJiBjb25zb2xlLmxvZygnTXV0YXRpb25FdmVudDogdHJ1ZScpOwogIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUF0dHJNb2RpZmllZCcsIGNoZWNrQXR0cmlidXRlLCBmYWxzZSk7CiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NTm9kZUluc2VydGVkJywgY2hlY2tOZXdOb2RlcywgZmFsc2UpOwp9Cgp9KS50b1N0cmluZygpLm1hdGNoKC97KFtcc1xTXSopfS8pWzFdKS5jYWxsKHVuc2FmZVdpbmRvdywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShvcHRpb25zKSk7"},{"name":"gwdang","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["http://*.jd.com/*","https://*.jd.com/*","http://*.jd.hk/*","https://*.jd.hk/*","http://*.taobao.com/*","https://*.taobao.com/*","http://*.tmall.com/*","https://*.tmall.com/*","https://*.tmall.hk/*","http://*.yixun.com/*","http://*.51buy.com/*","http://*.yhd.com/*","http://*.suning.com/*","https://*.suning.com/*","http://*.dangdang.com/*","http://*.gome.com.cn/*","http://*.newegg.cn/*","http://*.paipai.com/*","https://*.amazon.com/*","https://*.amazon.cn/*","https://*.amazon.*/*","http://www.kjt.com/*","http://www.kaola.com/*","http://www.tcl.com/*","http://shop.hisense.com/*","http://*.oppo.com/*","http://shop.vivo.com.cn/*","http://www.ebay.com/*","http://t.dianping.com/*","http://*.nuomi.com/*","http://*.meituan.com/*","https://yao.95095.com/*","http://*.feiniu.com/*","http://*.meilishuo.com/*","http://*.mogujie.com/*","http://shop.coolpad.cn/*","http://*.sephora.cn/*","http://*.yesmywine.com/*","http://*.yiguo.com/*","http://*.wanggou.com/*","http://mall.jia.com/*","http://weigou.baidu.com/*","http://*.mi.com/*","http://shop.letv.com/*","http://*.handu.com/*","http://*.taoshu.com/*","http://*.1688.com/*","http://*.muyingzhijia.com/*","http://*.vmall.com/*","http://*.xiji.com/*","http://*.xijie.com/*","http://www.yougou.com/*","http://www.okbuy.com/*","http://*.001town.com/*","http://*.01goo.com/*","http://*.03l.cn/*","http://*.133china.com/*","http://*.139shop.com/*","http://yxp.163.com/*","http://*.168dg.com/*","http://*.186mall.com/*","http://*.18to82.com/*","http://*.1j.cn/*","http://*.22shop.com/*","http://*.24dq.com/*","http://*.24quan.com/*","http://*.258sd.com/*","http://*.2688.com/*","http://*.360buy.com/*","http://*.360hqb.com/*","http://*.360kxr.com/*","http://*.360mart.com/*","http://*.365goba.com/*","http://*.38hzt.com/*","http://*.39ty.com/*","http://*.4inlook.com/*","http://*.5188bag.com/*","http://*.51buy.com/*","http://51buy.com/","http://*.51dg.com/*","http://*.51eng.com/*","http://*.51sheyuan.com/*","http://*.51youpin.com/*","http://*.520eye.com/*","http://*.52shehua.com/*","http://*.5366.com/*","http://t.58.com/*","http://*.58hua.com/*","http://*.5lux.com/*","http://*.5yth.com/*","http://*.6919.com/*","http://*.6sbuy.com/*","http://*.77toy.com/*","http://*.7caihua.com/*","http://*.7cv.com/*","http://*.7sev.com/*","http://*.80ebus.com/*","http://*.8801.net/*","http://*.919it.com/*","http://*.929.cn/*","http://*.942radio.com/*","http://b2c.958shop.com/*","http://*.96128.com/*","http://*.99pto.com/*","http://*.99read.com/*","http://*.9dadao.com/*","http://*.9you.com/*","http://*.afffff.com/*","http://*.ai356.com/*","http://*.aibang.com/*","http://*.aidai.com/*","http://*.aiju.com/*","http://*.aim36.com/*","http://*.aimer.com.cn/*","http://*.aiyingshi.com/*","http://*.aizhigu.com.cn/*","http://*.amazon.cn/*","http://*.anni.com/*","http://*.apabi.com/*","http://*.augshow.com/*","http://*.autosup.com/*","http://*.baiyjk.com/*","http://*.bbesports.com/*","http://*.bookuu.com/*","http://*.bearbuy.com.cn/*","http://*.beautyplus.cn/*","http://*.beifabook.com/*","http://*.benq.com.cn/*","http://*.best1.com/*","http://*.biaoshang.hk/*","http://*.binggo.com/*","http://*.bloves.com/*","http://*.bobomobi.com/*","http://*.bookschina.com/*","http://*.boqii.com/*","http://*.buding.com/*","http://*.buy007.com/*","http://*.buy361.cn/*","http://*.buyfine.net/*","http://*.buynow.com.cn/*","http://*.caistv.com/*","http://*.caomeipai.com/*","http://*.car339.com.cn/*","http://*.car6688.com/*","http://*.carrefour.com.cn/*","http://*.cdream.com/*","http://*.ceetop.com/*","http://*.chashu.cn/*","http://*.chedangjia.com/*","http://*.chengdecs.com/*","http://*.china-gift.com/*","http://*.china-pub.com/*","http://emall.chinapay.com/*","http://*.chinayrs.com/*","http://*.chris-tina.com/*","http://*.clady.com/*","http://*.clinique.com.cn/*","http://*.cncard.com/*","http://*.cnfse.com/*","http://*.colebuy.com/*","http://*.conslive.com/*","http://*.coo8.com/*","http://*.cosize.com/*","http://*.cosme-de.com/*","http://*.ctrip.com/*","http://*.cw100.com/*","http://*.d1.com.cn/*","http://*.daisonghua.com/*","http://*.dangdang.com/*","http://*.daoyao.com/*","http://*.woyo.com/*","http://*.dazhe.cn/*","http://*.dazhongdianqi.com.cn/*","http://*.dianpu.com/*","http://*.didatuan.com/*","http://*.disiqu.cn/*","http://*.dixintong.com/*","http://*.doulaimai.com/*","http://*.dsgoo.com/*","http://*.dtoto.com/*","http://*.duhub.com/*","http://*.duoding.com/*","http://*.e-giordano.com/*","http://*.e-lining.com/*","http://*.e-my.com.cn/*","http://*.easy361.com/*","http://*.ebaimi.com/*","http://*.eboxbuy.com/*","http://*.ebtea.com/*","http://*.ecosme.cn/*","http://*.efeihu.com/*","http://*.ehaier.com/*","http://*.ejia.com/*","http://*.enet.com.cn/*","http://*.enjoyeye.com/*","http://*.epetbar.com/*","http://*.et5155.com/*","http://*.f508.com/*","http://*.fclub.cn/*","http://*.flowerby.com/*","http://*.flowercn.com/*","http://*.gap.cn/*","http://*.godida.com/*","http://*.gome.com.cn/*","http://*.goocctv.cn/*","http://*.goodjd.com/*","http://*.goodnourish.cn/*","http://*.gou3618.com/*","http://*.gouduo.com/*","http://*.gouwulian.com/*","http://*.gouxie.com/*","http://*.goyahome.com/*","http://*.guobuy.com/*","http://*.guopi.com/*","http://*.guuoo.com/*","http://*.hany.cn/*","http://*.happigo.com/*","http://*.hit168.com.cn/*","http://*.hitao.com/*","http://*.homeold.cn/*","http://*.homevv.com/*","http://*.hongkouzi.com/*","http://*.hopebook.net/*","http://*.huachu.com.cn/*","http://*.huimeifang.cn/*","http://*.hw2008.cn/*","http://*.icaifeng.com/*","http://*.icson.com/*","http://*.ideemall.com/*","http://*.ihush.com/*","http://*.iloveyou.com.cn/*","http://*.ilovezuan.com/*","http://*.imeelee.com/*","http://*.inoble.com.cn/*","http://*.inshion.com/*","http://*.ishop.cn/*","http://*.it88.com.cn/*","http://*.itzm.com/*","http://*.iyuyou.com/*","http://*.jiajiajk.com/*","http://*.jiaju.com/*","http://*.jiatx.com/*","http://*.jiayougo.com/*","http://*.jinbaidu.com/*","http://*.jmeishop.com/*","http://*.joyran.com/*","http://*.jsbcmall.com/*","http://*.jtlhome.com/*","http://*.jumei.com/*","http://*.junph.com/*","http://*.justonline.cn/*","http://*.jxdyf.com/*","http://*.k121.com/*","http://*.kadang.com/*","http://*.keede.com.cn/*","http://*.kela.cn/*","http://*.kuaishubao.com/*","http://*.kxtkx.com/*","http://*.ladypk.com/*","http://*.laeibelle.com/*","http://*.lafaso.com/*","http://*.lamiu.com/*","http://*.lancome.com.cn/*","http://*.lashou.com/*","http://*.ledaojia.com/*","http://*.leftlady.com/*","http://*.lenovo.com.cn/*","http://*.lens2005.com/*","http://*.letao.com/*","http://*.leyou.com/*","http://*.leyou.com.cn/*","http://*.lijiababy.com.cn/*","http://*.lijigou.com/*","http://*.likebuy.com/*","http://*.likeface.com/*","http://*.lingshi.com/*","http://*.liqunshop.com/*","http://*.liyi99.com/*","http://*.locknlock.com.cn/*","http://*.lovo.cn/*","http://*.luckigo.com/*","http://*.lusen.com/*","http://*.lyceem.com/*","http://*.m18.com/*","http://*.maichawang.com/*","http://*.maimaike.cn/*","http://*.mamabb.com/*","http://*.mamahao.cn/*","http://*.mangocity.com/*","http://*.manzuo.com/*","http://*.masamaso.com/*","http://*.maxfunbuy.com/*","http://*.maywon.com/*","http://*.mbaobao.com/*","http://*.meici.com/*","http://*.meilele.com/*","http://*.meilieasy.com/*","http://*.meituan.com/*","http://*.menglu.com/*","http://*.mengmai.com/*","http://*.minibuy.com/*","http://*.mmgw.cn/*","http://*.mmuses.com/*","http://*.mobi001.com/*","http://*.mokamall.com/*","http://*.momoyoyo.com/*","http://*.montrosechina.com/*","http://*.mooiee.com/*","http://*.moonbasa.com/*","http://*.motostore.com.cn/*","http://*.mpshow.com.cn/*","http://*.naccoo.com/*","http://*.naguu.com/*","http://*.nayao.com/*","http://*.newegg.com.cn/*","http://*.newgo5.com/*","http://*.nmlch.com/*","http://*.no5.com.cn/*","http://*.nokia.com.cn/*","http://*.nonmin88.com/*","http://*.obuy.cn/*","http://*.ofcard.com/*","http://*.ogage.cn/*","http://*.okbig.com/*","http://*.okbuy.com/*","http://*.okddy.com/*","http://*.okgolf.cn/*","http://*.olomo.com/*","http://*.olympus.com.cn/*","http://*.olymsports.com/*","http://*.ono.com.cn/*","http://*.orange3c.com/*","http://*.ouku.com/*","http://*.ourtasty.com/*","http://*.outice.com/*","http://*.oyego.com/*","http://*.paixie.net/*","http://*.palcent.com/*","http://*.ocj.com.cn/*","http://*.pb89.com/*","http://*.pcarm.com/*","http://*.petyoo.com/*","http://*.pgbao.com/*","http://*.piaoliang100.com/*","http://*.pirateship.com.cn/*","http://*.popyj.com/*","http://*.pupai.cn/*","http://*.purcotton.com/*","http://*.qianxun.com/*","http://*.qingci.com/*","http://*.qinqinbaby.com/*","http://*.qmango.com/*","http://*.qumei.com/*","http://*.quwan.com/*","http://*.qxian.com/*","http://*.rayi.cn/*","http://*.redbaby.com.cn/*","http://*.robam.com/*","http://*.salala.com.cn/*","http://*.samsclub.cn/*","http://*.sanfo.com/*","http://*.sapo.com.hk/*","http://*.sasa.com/*","http://*.sasacity.com/*","http://*.sawbuy.com/*","http://*.shanghai-sports.com/*","http://*.shentop.com/*","http://*.shishangqiyi.com/*","http://*.shjdq.com/*","http://*.shnn.com/*","http://*.shopin.net/*","http://*.shoubiao.com.cn/*","http://*.sigo.cn/*","http://mall.sina.com.cn/*","http://*.sinobuy.cn/*","http://*.skcoo.com/*","http://*.skomart.com/*","http://*.snyun.com/*","http://*.sonmai.cn/*","http://*.sport2008.com.cn/*","http://*.strawberrynet.com/*","http://*.suning.com/*","http://*.sz-esun.com/*","http://*.tao3c.com/*","http://item.taobao.com/*","http://*.taoxie.cn/*","http://*.the365.com/*","http://*.thinkshop.cn/*","http://*.tian10.com/*","http://*.tiantian.com/*","http://*.junph.com/*","http://*.tieyou.com/*","http://detail.tmall.com/*","http://*.togj.com/*","http://*.tooogooo.com/*","http://*.toy90.com/*","http://*.toys365.com/*","http://*.tpy100.com/*","http://*.tuniu.com/*","http://*.tztart.com/*","http://*.ugou.cn/*","http://*.uipmall.com/*","http://*.uiyi.cn/*","http://*.ushan.cn/*","http://*.uushouji.com/*","http://*.uya100.com/*","http://*.vaakav.com/*","http://*.vafox.com/*","http://*.vancl.com/*","http://*.vcotton.com/*","http://*.veedl.com/*","http://*.vegoos.com/*","http://*.venusveil.com/*","http://*.veryok.cn/*","http://*.viccol.com/*","http://*.vipshop.com/*","http://*.vipstore.com/*","http://*.vivian.cn/*","http://*.vjia.com/*","http://*.vnasi.com/*","http://*.voipyeah.com/*","http://*.w1.cn/*","http://*.waipowang.com/*","http://*.wangshanghai.com/*","http://*.wg365.com/*","http://*.winenice.com/*","http://*.wl.cn/*","http://*.womai.com/*","http://*.woye.com/*","http://*.wtaotao.com/*","http://*.wumeiwang.com/*","http://*.x-playboy.com/*","http://*.xiaokang.com/*","http://*.xiaozhuren.com/*","http://*.xinbaigo.com/*","http://*.xindou.com/*","http://*.xing800.com/*","http://*.xinhuabookstore.com/*","http://*.xiu.com/*","http://*.xtpo.cn/*","http://*.xzuan.com/*","http://*.yaja.com.cn/*","http://*.yaofang.cn/*","http://*.yasai.cn/*","http://*.yeecare.com/*","http://buy.yesky.com/*","http://*.yesmytea.com/*","http://*.yesmywine.com/*","http://*.yide.com/*","http://*.yifu.com/*","http://*.yihaodian.com/*","http://*.yintai.com/*","http://*.yinyuehe.net/*","http://*.yjcs.cn/*","http://*.yobrand.com/*","http://*.yoger.com.cn/*","http://*.yoho.cn/*","http://*.yongle.com.cn/*","http://*.yougou.com/*","http://*.youjk.com/*","http://*.yoyo18.com/*","http://*.yumaoclub.com/*","http://*.yyosso.com/*","http://*.zbird.com/*","http://*.zgcbb.com/*","http://*.zm7.cn/*","http://*.zopo.com/*","http://*.ibuying.com/*","http://*.33go.com.cn/*","http://*.xijie.com/*","http://*.nop.cn/*","http://*.asyp.com/*","http://*.sparty.cn/*","http://*.yizhedian.com/*","http://*.lvhezi.com/*","http://*.aishangbaobao.com/*","http://*.sportica.cn/*","http://*.jstsilk.cn/*","http://*.camel.com.cn/*","http://*.cottonpop.net/*","http://*.hyj.com/*","http://*.myxiequ.com/*","http://*.mfplaza.com/*","http://*.do93.com/*","http://*.3guo.cn/*","http://*.yaqifushi.com/*","http://*.trura.com/*","http://*.lbaobao.cn/*","http://*.xiutuan.com/*","http://*.usashopcn.com/*","http://*.ihaveu.com/*","http://*.vipku.com/*","http://*.vipchina.com/*","http://*.fanrry.cn/*","http://*.lesunvip.com/*","http://*.nala.com.cn/*","http://*.miqi.cn/*","http://*.meiribuy.com/*","http://*.pufung.com/*","http://*.xiaoye.com/*","http://*.hmeili.com/*","http://*.oulybuy.com/*","http://*.meifenzi.com/*","http://*.caomeishop.com/*","http://*.meifu360.com/*","http://*.bapashop.com/*","http://*.bulangxiongdi.com/*","http://*.gusubuy.com/*","http://*.opearl.net/*","http://*.ruci.cn/*","http://*.rax.cn/*","http://*.jiuxian.com/*","http://*.maimaicha.com/*","http://*.pinwine.cn/*","http://*.meiweidao.com/*","http://*.okliang.com/*","http://*.365wine.com/*","http://*.jjlg.com.cn/*","http://*.bianlishe.com/*","http://*.epkmall.com/*","http://*.gdcct.com/*","http://*.500ccc.com/*","http://*.me361.com/*","http://*.malatamobile.com/*","http://*.trioo.com/*","http://*.oohdear.com/*","http://*.yaahe.cn/*","http://*.easeeyes.com/*","http://*.dbox.cn/*","http://*.haotehui.com/*","http://*.m6go.com/*","http://*.bianyigo.com/*","http://*.okjee.com/*","http://*.mygeek.cn/*","http://*.tbb.cn/*","http://*.ushare360.com/*","http://*.gqt168.com/*","http://*.konjoy.com/*","http://*.aoliz.com/*","http://*.jianianle.com/*","http://*.akajia.com/*","http://*.miqi.com.cn/*","http://*.lehuimai.com/*","http://*.lifevc.com/*","http://*www.ouku.com/","http://nuomi.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1487594258314},"enabled":true,"position":2,"file_url":"https://greasyfork.org/scripts/14466-%E8%B4%AD%E7%89%A9%E5%85%9A%E6%AF%94%E4%BB%B7%E5%B7%A5%E5%85%B7/code/%E8%B4%AD%E7%89%A9%E5%85%9A%E6%AF%94%E4%BB%B7%E5%B7%A5%E5%85%B7.user.js","uuid":"5798ff4f-8510-459c-ac62-e880469923c8","source":""},{"name":"為什麼你們就是不能加個空格呢？","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1487594258319},"enabled":true,"position":3,"file_url":"https://greasyfork.org/scripts/2185-%E7%82%BA%E4%BB%80%E9%BA%BC%E4%BD%A0%E5%80%91%E5%B0%B1%E6%98%AF%E4%B8%8D%E8%83%BD%E5%8A%A0%E5%80%8B%E7%A9%BA%E6%A0%BC%E5%91%A2/code/%E7%82%BA%E4%BB%80%E9%BA%BC%E4%BD%A0%E5%80%91%E5%B0%B1%E6%98%AF%E4%B8%8D%E8%83%BD%E5%8A%A0%E5%80%8B%E7%A9%BA%E6%A0%BC%E5%91%A2%EF%BC%9F.user.js","uuid":"1b09c190-b99f-4e0f-b1dd-7a459943f088","source":""},{"name":"Bypass Wait, Code & Login on Websites","options":{"awareOfChrome":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_prototypes":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["down.lepan.cc","music.baidu.com","yinyueyun.baidu.com","media.store.kugou.com","trackercdn.kugou.com","yinyuetai.com","itwusun.com","self"],"orig_excludes":[],"orig_includes":["http://localhost.cuwcl4c/*","http://jixunmoe.github.io/*","http://123564.com/*","http://m.123564.com/*","http://5xfile.com/*","http://www.5xfile.com/*","http://yun.baidu.com/*","http://pan.baidu.com/*","http://howfile.com/*","http://*.howfile.com/*","http://jkpan.cc/*","http://*.jkpan.cc/*","http://namipan.cc/*","http://*.namipan.cc/*","http://10pan.cc/*","http://*.10pan.cc/*","http://66yp.cc/*","http://*.66yp.cc/*","http://123wzwp.com/*","http://*.123wzwp.com/*","http://hiyp.cc/*","http://*.hiyp.cc/*","http://jkpan.cc/*","http://*.jkpan.cc/*","http://webhd.xuite.net/*","http://sync.hamicloud.net/*","http://www.yimuhe.com/*","http://douban.fm/*","https://douban.fm/*","http://moe.fm/*","http://music.163.com/*","https://music.163.com/*","http://www.1ting.com/*","http://www.23356.com/*","http://www.app-echo.com/*","http://web.kugou.com/*","https://jixunmoe.github.io/cuwcl4c/config/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"CUWCL4C":"s{\"version\":1,\"bDiaplayLog\":true,\"bUseCustomRules\":false,\"dAria_auth\":0,\"dAria_port\":6800,\"dUriType\":0,\"sAria_dir\":\"D:\\\\Download\\\\\",\"sAria_host\":\"127.0.0.1\",\"sAria_pass\":\"\",\"sAria_user\":\"\",\"sCustomRule\":\"\"}"},"ts":1487594258355},"enabled":true,"position":4,"file_url":"https://greasyfork.org/scripts/2600-%E8%B7%B3%E8%BF%87%E7%BD%91%E7%AB%99%E7%AD%89%E5%BE%85-%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8F%8A%E7%99%BB%E5%BD%95/code/%E8%B7%B3%E8%BF%87%E7%BD%91%E7%AB%99%E7%AD%89%E5%BE%85%E3%80%81%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8F%8A%E7%99%BB%E5%BD%95.user.js","uuid":"b11f85fc-9f3f-43c3-b1b6-3671fe3d4695","source":""},{"name":"Download YouTube Videos as MP4","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":["http://www.youtube.com/embed/*","https://www.youtube.com/embed/*"],"orig_includes":["http://www.youtube.com/*","https://www.youtube.com/*"],"orig_matches":["http://www.youtube.com/*","https://www.youtube.com/*","http://s.ytimg.com/yts/jsbin/html5player*","https://s.ytimg.com/yts/jsbin/html5player*","http://manifest.googlevideo.com/*","https://manifest.googlevideo.com/*","http://*.googlevideo.com/videoplayback*","https://*.googlevideo.com/videoplayback*","http://*.youtube.com/videoplayback*","https://*.youtube.com/videoplayback*"],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"download-youtube-dash-enabled":"s0","download-youtube-script-url":"shttps://s.ytimg.com/yts/jsbin/player-zh_CN-vflvVmQ0z/base.js","download-youtube-signature-code":"s-3,13,41,-1,51,0,53,0,57"},"ts":1487594258365},"enabled":false,"position":5,"file_url":"https://greasyfork.org/scripts/1317-download-youtube-videos-as-mp4/code/Download%20YouTube%20Videos%20as%20MP4.user.js","uuid":"a850a58d-2f71-4114-b763-127ec25c90be","source":""},{"name":"Anti-Adblock Killer | Reek","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":true,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["http://*/*","https://*/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"nextchecklist":"s1605165979642","nextcheckupdate":"s1605684379983"},"ts":1487594258371},"enabled":true,"position":6,"file_url":"https://raw.githubusercontent.com/reek/anti-adblock-killer/master/anti-adblock-killer.user.js","uuid":"ec693dec-33cc-4a51-8a5d-0325972c723e","source":""},{"name":"YouTube +","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":["*://www.youtube.com/tv*","*://www.youtube.com/embed/*","*://www.youtube.com/live_chat*"],"orig_includes":[],"orig_matches":["*://www.youtube.com/*"],"orig_noframes":true,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"particleSettings":"s{\"GEN_BTTR_NTF\":true,\"GEN_SUB_LIST\":true,\"GEN_INF_SCRL\":true,\"GEN_BLUE_GLOW\":true,\"GEN_PPOT_ON\":true,\"VID_END_SHRE\":true,\"VID_DFLT_QLTY\":\"hd1080\",\"VID_PLST_ATPL\":true,\"VID_PLST_RVRS\":true,\"VID_PLR_ATPL\":true,\"VID_PLR_ALVIS\":true,\"VID_PLR_SIZE_MEM\":true,\"VID_PLR_VOL_LDN\":true,\"VID_POST_TIME\":true,\"VID_VID_CNT\":true,\"VID_DESC_SHRT\":true,\"VID_PPOT_SZ\":false,\"VID_PLR_HTML5\":true,\"BLK_ON\":true,\"floaterX\":2000,\"floaterY\":2000,\"firstTime\":false,\"volLev\":50,\"advOpts\":true,\"blacklist\":{},\"extLang\":{\"zh_CN\":{\"YTSETS\":\"YouTube+ 设置\",\"ADV_OPTS\":\"高级选项\",\"SUB_PLST\":\"播放最新上传的内容\",\"PPOT_OPEN\":\"在弹出窗口中打开\",\"BLCK_ADD\":\"添加到黑名单\",\"BLCK_EDIT\":\"编辑\",\"BLCK_SAVE\":\"保存\",\"BLCK_CLSE\":\"关闭\",\"CNSL_AP\":\"自动播放\",\"CNSL_RPT\":\"循环播放\",\"CNSL_SVTH\":\"打开缩略图\",\"CNSL_SS\":\"画面截图\",\"CNSL_SS_CLS\":\"关闭\",\"CNSL_PPOT\":\"弹出播放视频\",\"CNSL_FLBR\":\"网页全屏模式\",\"CNSL_CINM_MD\":\"影院模式\",\"CNSL_YTSC\":\"YouTube 快捷键列表\",\"PLST_AP\":\"自动播放\",\"PLST_RVRS\":\"倒序排列\",\"SHOW_CMTS\":\"显示评论\",\"HIDE_CMTS\":\"隐藏评论\",\"GLB_IMPR\":\"导入/导出设置\",\"GLB_LOCL_LANG\":\"点击修改 YT+ 语言\",\"GLB_LOCL_LANG_CSTM\":\"本地化\",\"GLB_IMPR_SAVE\":\"保存并加载\",\"GLB_RSET\":\"重置\",\"GLB_RSET_CONF\":\"这将重置YT+的所有设置和黑名单。是否要继续？\",\"GLB_SVE\":\"保存\",\"GLB_SVE_SETS\":\"设置已保存\",\"GLB_RMBL\":\"从黑名单中移除\",\"FTR_DESC\":\"详细了解\",\"GEN\":\"常规\",\"VID\":\"视频\",\"CHN\":\"频道\",\"BLK\":\"黑名单\",\"ABT\":\"关于\",\"HLP\":\"帮助\",\"DNT\":\"捐赠\",\"GEN_TTL\":\"通用设置\",\"GEN_GEN\":\"常规\",\"GEN_LYT\":\"布局\",\"GEN_LOCL_LANG\":\"使用自定义的 YT+ 语言包\",\"GEN_PPOT_ON\":\"启用弹出模式\",\"GEN_DSBL_ADS\":\"禁止视频页面以外的广告\",\"GEN_INF_SCRL\":\"在信息源列表启用无限滚动\",\"GEN_YT_LOGO_LINK\":\"YouTube 标志重定向到订阅页\",\"GEN_SUB_LIST\":\"启用订阅播放列表\",\"GEN_REM_APUN\":\"去除自动播放下一个\",\"GEN_SPF_OFF\":\"禁用动态加载\",\"GEN_HIDE_FTR\":\"隐藏页脚\",\"GEN_BLUE_GLOW\":\"去除点击过的按钮周围的蓝色光圈\",\"GEN_HDE_RECM_SDBR\":\"隐藏推荐频道侧边栏\",\"GEN_HDE_SRCH_SDBR\":\"隐藏搜索结果侧边栏\",\"GEN_HDE_CHN_SDBR\":\"隐藏频道侧边栏\",\"GEN_CMPT_TTLS\":\"在信息源中使用缩略标题\",\"GEN_DSB_HVRC\":\"禁用悬停卡片\",\"GEN_BTTR_NTF\":\"改进的蓝色通知框\",\"GEN_GRID_SUBS\":\"在订阅中使用网格布局\",\"GEN_GRID_SRCH\":\"在搜索结果中使用网格布局\",\"VID_TTL\":\"视频设置\",\"VID_PLR\":\"播放器设置\",\"VID_PLR_LYT\":\"播放器布局\",\"VID_DFLT_QLTY\":\"默认视频质量：\",\"VID_DFLT_QLTY_AUTO\":\"自动\",\"VID_DFLT_QLTY_TNY\":\"144p\",\"VID_DFLT_QLTY_SML\":\"240p\",\"VID_DFLT_QLTY_MDM\":\"360p\",\"VID_DFLT_QLTY_LRG\":\"480p\",\"VID_DFLT_QLTY_720\":\"720p\",\"VID_DFLT_QLTY_1080\":\"1080p\",\"VID_DFLT_QLTY_1440\":\"1440p\",\"VID_DFLT_QLTY_2160\":\"2160p (4k)\",\"VID_DFLT_QLTY_2880\":\"2880p (5k)\",\"VID_DFLT_QLTY_ORIG\":\"4320p (8k)\",\"VID_PLR_ALVIS\":\"阅读评论时保持播放器可见\",\"VID_PLR_ALVIS_WDTH\":\"悬浮播放器宽度\",\"VID_PLR_ALVIS_RST\":\"重设位置\",\"VID_PLR_ALVIS_SCRL_TOP\":\"返回顶部\",\"VID_PLR_ATPL\":\"自动播放视频\",\"VID_LAYT\":\"布局\",\"VID_VID_CNT\":\"显示已上传视频数及链接\",\"VID_POST_TIME\":\"显示视频已发布时间\",\"VID_HIDE_DETLS\":\"隐藏视频详细信息\",\"VID_HIDE_COMS\":\"评论区\",\"VID_HIDE_COMS_SHOW\":\"显示\",\"VID_HIDE_COMS_HIDE\":\"隐藏\",\"VID_HIDE_COMS_REM\":\"去除\",\"VID_END_SHRE\":\"禁用视频结束时的分享面板\",\"VID_PLST\":\"播放列表\",\"VID_PLST_ATPL\":\"启用播放列表的自动播放按钮\",\"VID_PLST_RVRS\":\"启用播放列表的倒序排列按钮\",\"VID_PLR_SIZE_MEM\":\"记住播放模式\",\"VID_VOL_WHEEL\":\"使用鼠标滚轮更改音量\",\"VID_PLR_VOL_MEM\":\"记住音量\",\"VID_PLR_VOL_LDN\":\"禁用 YouTube 响度统一化\",\"VID_PLR_ADS\":\"禁用视频页面中的广告\",\"VID_PLR_ALACT\":\"播放器快捷键始终生效\",\"VID_SUB_ADS\":\"仅启用已订阅频道中视频的广告\",\"VID_PLR_ANTS\":\"禁用注释\",\"VID_PLR_HFR\":\"禁用高帧率 (60fps)\",\"VID_PLR_HTML5\":\"可能时使用 HTML 5 播放器\",\"VID_PLR_CC\":\"禁用字幕和隐藏式字幕\",\"VID_PLR_INFO\":\"启用稍后观看按钮\",\"VID_PLR_FIT\":\"为剧场模式适配页面\",\"VID_PLR_FIT_WDTH\":\"适配页面最大宽度:\",\"VID_PLR_DYN_SIZE\":\"默认视图中禁用播放器动态调节尺寸\",\"VID_DESC_SHRT\":\"小巧的视频描述按钮\",\"VID_TTL_CMPT\":\"缩略视频描述标题\",\"VID_PPOT_SZ\":\"弹出播放器的大小\",\"VID_LAYT_AUTO_PNL\":\"自动展开视频描述\",\"GEN_CHN_DFLT_PAGE\":\"默认的频道页面：\",\"GEN_CHN_DFLT_PAGE_DFLT\":\"默认\",\"GEN_CHN_DFLT_PAGE_VID\":\"视频\",\"GEN_CHN_DFLT_PAGE_PL\":\"播放列表\",\"GEN_CHN_DFLT_PAGE_CHN\":\"频道\",\"GEN_CHN_DFLT_PAGE_DISC\":\"讨论\",\"GEN_CHN_DFLT_PAGE_ABT\":\"关于\",\"BLK_TTL\":\"黑名单设置\",\"BLK_BLK\":\"黑名单\",\"BLK_ON\":\"启用黑名单\",\"ABT_TTL\":\"相关信息和实用链接\",\"ABT_THKS\":\"鸣谢：\",\"ABT_THKS_YEPPHA\":\"，他们的成果给此项目带来了灵感，没有他们，今天这些就不会存在。\",\"ABT_THKS_USERSCRIPT\":\" 使开发和发行第三方软件的任务无比简单。\",\"ABT_THKS_STACKOV\":\" 无价的信息对软件开发做出了巨大贡献。\",\"ABT_INFO\":\"官方页面\",\"ABT_LNK_GHB\":\"GitHub\",\"ABT_LNK_GRFK\":\"Greasy Fork\",\"ABT_LNK_OPNU\":\"OpenUserJS\",\"WLCM\":\"感谢您安装 YouTube+\",\"WLCMSTRT\":\"您可以点击上面的按钮来自定义您的设置\",\"WLCMFTRS\":\"点击这里查看所有特性的介绍\",\"LOCALE\":\"中文 (简体)\",\"lastMod\":1478206054000},\"nextCheck\":1480903070769},\"GEN_HDE_CHN_SDBR\":false,\"GEN_HDE_SRCH_SDBR\":false,\"GEN_HDE_RECM_SDBR\":false,\"GEN_HIDE_FTR\":false,\"GEN_CMPT_TTLS\":false,\"GEN_DSB_HVRC\":false,\"GEN_GRID_SRCH\":false,\"GEN_GRID_SUBS\":false,\"GEN_CHN_DFLT_PAGE\":\"default\",\"GEN_SPF_OFF\":false,\"GEN_REM_APUN\":false,\"GEN_YT_LOGO_LINK\":false,\"GEN_DSBL_ADS\":false,\"GEN_LOCL_LANG\":false,\"VID_LAYT_AUTO_PNL\":false,\"VID_HIDE_DETLS\":false,\"VID_TTL_CMPT\":false,\"VID_HIDE_COMS\":\"0\",\"VID_PLR_FIT_WDTH\":false,\"VID_PLR_FIT\":false,\"VID_PLR_DYN_SIZE\":false,\"VID_PLR_INFO\":false,\"VID_PLR_HFR\":false,\"VID_VOL_WHEEL\":true,\"VID_PLR_ALACT\":false,\"VID_PLR_VOL_MEM\":false,\"VID_PLR_ANTS\":false,\"VID_PLR_CC\":false,\"VID_PLR_ALVIS_WDTH\":false,\"VID_SUB_ADS\":false,\"VID_PLR_ADS\":true,\"lightsOut\":false,\"theaterMode\":false,\"fullBrs\":false}"},"ts":1487594258376},"enabled":false,"position":7,"file_url":"https://greasyfork.org/scripts/9932-youtube/code/YouTube%20+.user.js","uuid":"f036c817-e556-4bb9-9941-5081c51a16da","source":""},{"name":"iZhihu","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["http://www.zhihu.com/*","https://www.zhihu.com/*"],"orig_matches":["http://www.zhihu.com/*","https://www.zhihu.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1487594258402},"enabled":true,"position":8,"file_url":"https://greasyfork.org/scripts/350-izhihu/code/iZhihu.user.js","uuid":"a3402b39-10fd-40e9-9ee5-c72302d817c7","source":""},{"name":"百度网盘直接下载助手","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://pan.baidu.com/disk/home*","*://yun.baidu.com/disk/home*","*://pan.baidu.com/s/*","*://yun.baidu.com/s/*","*://pan.baidu.com/share/link*","*://yun.baidu.com/share/link*"],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1487594258409},"enabled":true,"position":9,"file_url":"https://greasyfork.org/scripts/23635-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD/code/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD.user.js","uuid":"a1482c65-ea9d-48c5-bbca-e89ed17e042f","source":""},{"name":"True URL downloads","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":["http://192.168.*"],"orig_includes":["http://*","https://*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-body","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1487594258418},"enabled":false,"position":10,"file_url":"https://greasyfork.org/scripts/7362-true-url-downloads/code/True%20URL%20downloads.user.js","uuid":"dc391cae-a91e-4a67-9dfd-1da0750f1b5d","source":""},{"name":"Zhihu Link Redirect Fix","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["*.zhihu.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1487594258428},"enabled":true,"position":11,"file_url":"https://greasyfork.org/scripts/20431-zhihu-link-redirect-fix/code/Zhihu%20Link%20Redirect%20Fix.user.js","uuid":"f49a21a4-130a-4d21-aa10-994aff4f7585","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgICAgICAgWmhpaHUgTGluayBSZWRpcmVjdCBGaXgKLy8gQG5hbWU6emgtQ04gICAgICAgICAg55+l5LmO55yf5a6e6ZO+5o6l5Zyw5Z2A6YeN5a6a5ZCRCi8vIEBuYW1lOnpoLVRXICAgICAgICAgIOefpeS5juecn+WvpumPiOaOpeWcsOWdgOmHjeWumuWQkQovLyBAZGVzY3JpcHRpb24gICAgICAgICBBdm9pZCBsaW5rIHJlZGlyZWN0IGZvciB6aGlodS5jb20KLy8gQGRlc2NyaXB0aW9uOnpoLUNOICAg6K6p55+l5LmO572R6aG15Lit55qE56uZ5aSW6ZO+5o6l55u05o6l6Lez6L2s6Iez55uu5qCH572R5Z2A77yM6ICM5LiN57uP6L+H5LiA5Liq5LqM5qyh6Lez6L2s6aG16Z2i44CC6YeN5a6a5ZCR5aSE55CG5bCG5Lya5Zyo54K55Ye76ZO+5o6l556s6Ze06Ieq5Yqo6Kem5Y+RCi8vIEBkZXNjcmlwdGlvbjp6aC1UVyAgIOiuk+efpeS5jue2sumggeS4reeahOermeWklumPiOaOpeebtOaOpei3s+i9ieiHs+ebruaomee2suWdgO+8jOiAjOS4jee2k+mBjuWjueWAi+S6jOasoei3s+i9iemggemdouOAgumHjeWumuWQkeiZleeQhuWwh+acg+WcqOm7nuaTiumPiOaOpeeerOmWk+iHquWLleinuOeZvAoKLy8gQGF1dGhvciAgICAgICAgICAgICAgTW9zaGVsCi8vIEBuYW1lc3BhY2UgICAgICAgICAgIGh0dHBzOi8vaHp5LnB3Ci8vIEBob21lcGFnZVVSTCAgICAgICAgIGh0dHBzOi8vaHp5LnB3L3AvMjA1NgovLyBAc3VwcG9ydFVSTCAgICAgICAgICBodHRwczovL2dpdGh1Yi5jb20vaDJ5L2xpbmstZml4Ci8vIEBsaWNlbnNlICAgICAgICAgICAgIEdQTC0zLjAKLy8gQGljb24gICAgICAgICAgICAgICAgaHR0cHM6Ly9waWMxLnpoaW1nLmNvbS8yZTMzZjA2M2YxYmQ5MjIxZGY5NjcyMTkxNjdiNWRlMF9tLmpwZwoKLy8gQGdyYW50ICAgICAgICAgICAgICAgbm9uZQovLyBAcnVuLWF0ICAgICAgICAgICAgICBkb2N1bWVudC1zdGFydAovLyBAaW5jbHVkZSAgICAgICAgICAgICAqLnpoaWh1LmNvbS8qCgovLyBAZGF0ZSAgICAgICAgICAgICAgICAwNi8xMC8yMDE2Ci8vIEBtb2RpZmllZCAgICAgICAgICAgIDAyLzE1LzIwMTcKLy8gQHZlcnNpb24gICAgICAgICAgICAgMS4zLjEuNgovLyA9PS9Vc2VyU2NyaXB0PT0KCgppZihsb2NhdGlvbi5ob3N0PT09J2xpbmsuemhpaHUuY29tJykgewogICAgbGV0IHJlZ1JldCA9IGxvY2F0aW9uLnNlYXJjaC5tYXRjaCgvdGFyZ2V0PSguKz8pKCZ8JCkvKTsKICAgIGlmKHJlZ1JldCAmJiByZWdSZXQubGVuZ3RoPT0zKQogICAgICAgIGxvY2F0aW9uLmhyZWYgPSBkZWNvZGVVUklDb21wb25lbnQocmVnUmV0WzFdKTsKfQplbHNlCiAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZSl7CiAgICAgICAgbGV0IGRvbSA9IGUudGFyZ2V0LAogICAgICAgICAgICBtYXhfdGltZXMgPSAzOwogICAgICAgIHdoaWxlKGRvbSAmJiBtYXhfdGltZXMtLSkgewogICAgICAgICAgICBpZihkb20ubm9kZU5hbWUudG9VcHBlckNhc2UoKT09PSdBJykgewogICAgICAgICAgICAgICAgbGV0IHJlZ1JldCA9IGRvbS5zZWFyY2gubWF0Y2goL3RhcmdldD0oLis/KSgmfCQpLyk7CiAgICAgICAgICAgICAgICBpZihyZWdSZXQgJiYgcmVnUmV0Lmxlbmd0aD09MykKICAgICAgICAgICAgICAgICAgICBkb20uaHJlZiA9IGRlY29kZVVSSUNvbXBvbmVudChyZWdSZXRbMV0pOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIGRvbSA9IGRvbS5wYXJlbnROb2RlOwogICAgICAgIH0KICAgIH0pOwo="},{"name":"anti-redirect (typescript)","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["*"],"orig_excludes":[],"orig_includes":["*www.baidu.com*","*tieba.baidu.com*","*v.baidu.com*","*www.google.*","*encrypted.google.com*","*www.so.com*","*www.zhihu.com*","*daily.zhihu.com*","*zhuanlan.zhihu.com*","*weibo.com*","*twitter.com*","*www.sogou.com*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1494260745834,"data":{}},"enabled":true,"position":12,"file_url":"https://greasyfork.org/scripts/11915-anti-redirect-typescript/code/anti-redirect%20(typescript).user.js","uuid":"940abf92-5596-46e1-a189-b613f3d47cee","source":""}],"settings":{"configMode":100,"editor_autoLint":true,"editor_autoLintMaxLen":"50000","editor_autoSave":false,"editor_easySave":true,"editor_electricChars":true,"editor_enabled":true,"editor_fontSize":"150","editor_highlightTrailingWhitespace":true,"editor_indentUnit":"4","editor_indentWithTabs":"spaces","editor_keyMap":"vim","editor_lineWrapping":false,"editor_tabMode":"smart","editor_theme":"monokai","enabled":true,"i18n":"zh_CN","script_blacklist_server":[{"rules":["/https?:\\/\\/userscripts\\.org\\/scripts\\/(source|version)/(102614).*\\.user\\.js/"],"severity":"2"},{"name":"SaveFrom.net helper","reason":"Shows advertisements","rules":["/https?:\\/\\/sf-addon\\.com\\/.*\\/.*\\.user\\.js/","/https?:\\/\\/.*\\.sf-helper\\.com\\/.*\\.user\\.js/"],"severity":"3"}]}}