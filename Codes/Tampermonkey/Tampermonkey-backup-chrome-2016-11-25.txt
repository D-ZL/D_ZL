{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"Google: Bypass Result Page Redirect","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["/^https?://(?:encrypted|www)\\.google\\.[^/]+/(?:$|[#?]|search|webhp|imgres)/"],"orig_matches":["https://news.google.com/*","https://cse.google.com/cse/*"],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1475148528069,"data":{}},"enabled":true,"position":1,"file_url":"https://greasyfork.org/scripts/14150-google-%E7%BB%95%E8%BF%87%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E7%BD%91%E9%A1%B5%E9%93%BE%E6%8E%A5%E9%87%8D%E5%AE%9A%E5%90%91/code/Google%EF%BC%9A%E7%BB%95%E8%BF%87%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E7%BD%91%E9%A1%B5%E9%93%BE%E6%8E%A5%E9%87%8D%E5%AE%9A%E5%90%91.user.js","uuid":"c65f0816-cf1f-429d-a2a7-50681993d6f3","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWVzcGFjZSAgIFZBX2kKLy8gQHZlcnNpb24gICAgIDUuMC4yLjIwMTYwNTAzCi8vIEBncmFudCAgICAgICBub25lCi8vIEBpbmNsdWRlICAgICAvXmh0dHBzPzovLyg/OmVuY3J5cHRlZHx3d3cpXC5nb29nbGVcLlteL10rLyg/OiR8WyM/XXxzZWFyY2h8d2ViaHB8aW1ncmVzKS8KLy8gQG1hdGNoICAgICAgIGh0dHBzOi8vbmV3cy5nb29nbGUuY29tLyoKLy8gQG1hdGNoICAgICAgIGh0dHBzOi8vY3NlLmdvb2dsZS5jb20vY3NlLyoKLy8gQHJ1bi1hdCAgICAgIGRvY3VtZW50LXN0YXJ0Ci8vIEBuYW1lICAgICAgICBHb29nbGU6IEJ5cGFzcyBSZXN1bHQgUGFnZSBSZWRpcmVjdAovLyBAbmFtZTp6aC1DTiAgR29vZ2xl77ya57uV6L+H5pCc57Si57uT5p6c572R6aG16ZO+5o6l6YeN5a6a5ZCRCi8vIEBuYW1lOnpoLVRXICBHb29nbGXvvJrnuZ7pgY7mkJzlsIvntZDmnpzntrLpoIHpj4jmjqXph43lrprlkJEKLy8gQGRlc2NyaXB0aW9uIEF2b2lkIEdvb2dsZSByZWRpcmVjdCBmb3Igc2VhcmNoIHJlc3VsdCBwYWdlcy4KLy8gQGRlc2NyaXB0aW9uOnpoLUNOIOS7pCBHb29nbGUg55u05o6l6ZO+5o6l6Iez5pCc57Si57uT5p6c572R6aG177yM5peg6aG76YeN5a6a5ZCR44CCCi8vIEBkZXNjcmlwdGlvbjp6aC1UVyDku6QgR29vZ2xlIOebtOaOpemPiOaOpeiHs+aQnOWwi+e1kOaenOe2sumgge+8jOeEoemgiOmHjeWumuWQkeOAggovLyA9PS9Vc2VyU2NyaXB0PT0KCnZhciBkZWJ1ZyA9IGZhbHNlOwp2YXIgY291bnQgPSAwOwoKLy8gd2ViIHBhZ2VzOiB1cmw/dXJsPQovLyBjdXN0b20gc2VhcmNoIGVuZ2luZTogdXJsP3E9CnZhciByZSA9IC9cYnVybFw/Lio/XGIoPzp1cmx8cSk9KGh0dHBzP1xiW14mI10rKS9pOwp2YXIgcmVzdG9yZSA9IGZ1bmN0aW9uIChsaW5rLCB1cmwpIHsKICB1cmwgPSB1cmwgfHwgbGluay5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSB8fCAnJzsKICB2YXIgbWF0Y2hlcyA9IHVybC5tYXRjaChyZSk7CiAgbGluay5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBtYXRjaGVzID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoZXNbMV0pIDogdXJsKTsKfTsKCnZhciBmYWtlTGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTsKdmFyIG5vcm1hbGl6ZVVybCA9IGZ1bmN0aW9uICh1cmwpIHsKICBmYWtlTGluay5ocmVmID0gdXJsOwogIHJldHVybiBmYWtlTGluay5ocmVmOwp9OwoKdmFyIHNldHRlciA9IGZ1bmN0aW9uICh2KSB7CiAgdiA9IFN0cmluZyh2KTsgIC8vIGluIGNhc2UgYW4gb2JqZWN0IGlzIHBhc3NlZCBieSBjbGV2ZXIgR29vZ2xlCiAgZGVidWcgJiYgY29uc29sZS5sb2coJ3NldCcsIHRoaXMuX3hfaWQsIHRoaXMuZ2V0QXR0cmlidXRlKCdocmVmJyksIHYpOwogIHJlc3RvcmUodGhpcywgdik7Cn07CnZhciBnZXR0ZXIgPSBmdW5jdGlvbiAoKSB7CiAgZGVidWcgJiYgY29uc29sZS5sb2coJ2dldCcsIHRoaXMuX3hfaWQsIHRoaXMuZ2V0QXR0cmlidXRlKCdocmVmJykpOwogIHJldHVybiBub3JtYWxpemVVcmwodGhpcy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSk7Cn07CnZhciBibG9ja2VyID0gZnVuY3Rpb24gKGV2ZW50KSB7CiAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7CiAgcmVzdG9yZSh0aGlzKTsKICBkZWJ1ZyAmJiBjb25zb2xlLmxvZygnYmxvY2snLCB0aGlzLl94X2lkLCB0aGlzLmdldEF0dHJpYnV0ZSgnaHJlZicpKTsKfTsKCnZhciBoYW5kbGVyID0gZnVuY3Rpb24gKGEpIHsKICBpZiAoYS5feF9pZCkgewogICAgcmV0dXJuOwogIH0KICBhLl94X2lkID0gZGVidWcgPyArK2NvdW50IDogdHJ1ZTsKICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7CiAgICBkZWJ1ZyAmJiBjb25zb2xlLmxvZygnZGVmaW5lIHByb3BlcnR5JywgYS5feF9pZCk7CiAgICByZXN0b3JlKGEpOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGEsICdocmVmJywge2dldDogZ2V0dGVyLCBzZXQ6IHNldHRlcn0pOwogIH0gZWxzZSBpZiAoYS5fX2RlZmluZVNldHRlcl9fKSB7CiAgICBkZWJ1ZyAmJiBjb25zb2xlLmxvZygnZGVmaW5lIGdldHRlcicsIGEuX3hfaWQpOwogICAgcmVzdG9yZShhKTsKICAgIGEuX19kZWZpbmVTZXR0ZXJfXygnaHJlZicsIHNldHRlcik7CiAgICBhLl9fZGVmaW5lR2V0dGVyX18oJ2hyZWYnLCBnZXR0ZXIpOwogIH0gZWxzZSB7CiAgICBkZWJ1ZyAmJiBjb25zb2xlLmxvZygnZGVmaW5lIGxpc3RlbmVyJywgYS5feF9pZCk7CiAgICByZXN0b3JlKGEpOwogICAgYS5vbm1vdXNlZW50ZXIgPSBhLm9ubW91c2Vtb3ZlID0gYS5vbm1vdXNldXAgPSBhLm9ubW91c2Vkb3duID0KICAgICAgYS5vbmRiY2xpY2sgPSBhLm9uY2xpY2sgPSBhLm9uY29udGV4dG1lbnUgPSBibG9ja2VyOwogIH0KfTsKCnZhciB1cGRhdGUgPSBmdW5jdGlvbiAoKSB7CiAgW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdhW2hyZWZdJykpLmZvckVhY2goaGFuZGxlcik7Cn07Cgp2YXIgdGlkID0gbnVsbDsKdmFyIHByZXYgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpOwp2YXIgY2hlY2sgPSBmdW5jdGlvbiAobXV0YXRpb24pIHsKICByZXR1cm4gbXV0YXRpb24uYWRkZWROb2Rlcy5sZW5ndGggPiAwOwp9Owp2YXIgY2hlY2tOZXdOb2RlcyA9IGZ1bmN0aW9uIChtdXRhdGlvbnMpIHsKICBtdXRhdGlvbnMuZm9yRWFjaCAmJiBtdXRhdGlvbnMuZm9yRWFjaChjaGVja0F0dHJpYnV0ZSk7CiAgdmFyIG5leHQgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpOwogIGlmIChuZXh0IC0gcHJldiA+IDEwMDApIHsgIC8vIERvbid0IGxldCBtZSB3YWl0IHRvbyBsb25nLgogICAgcHJldiA9IG5leHQ7CiAgICBjbGVhclRpbWVvdXQodGlkKTsKICAgIHVwZGF0ZSgpOyAgLy8gVGhyb3R0bGUgaXMgd2hhdD8KICB9IGVsc2UgaWYgKCFtdXRhdGlvbnMuc29tZSB8fCBtdXRhdGlvbnMuc29tZShjaGVjaykpIHsKICAgIGNsZWFyVGltZW91dCh0aWQpOwogICAgdGlkID0gc2V0VGltZW91dCh1cGRhdGUsIDIwMCk7CiAgfQp9Owp2YXIgY2hlY2tBdHRyaWJ1dGUgPSBmdW5jdGlvbiAobXV0YXRpb24pIHsKICB2YXIgdGFyZ2V0ID0gbXV0YXRpb24udGFyZ2V0OwogIGlmICh0YXJnZXQgJiYgdGFyZ2V0Lm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkgPT09ICdBJyAmJgogICAgICAobXV0YXRpb24uYXR0cmlidXRlTmFtZSB8fCBtdXRhdGlvbi5hdHRyTmFtZSkgPT09ICdocmVmJyAmJgogICAgICByZS50ZXN0KHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkpIHsKICAgIGRlYnVnICYmIGNvbnNvbGUubG9nKCdyZXN0b3JlIGF0dHJpYnV0ZScsIHRhcmdldC5feF9pZCwgdGFyZ2V0LmdldEF0dHJpYnV0ZSgnaHJlZicpKTsKICAgIHJlc3RvcmUodGFyZ2V0KTsKICB9Cn07Cgp2YXIgTXV0YXRpb25PYnNlcnZlciA9IHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyIHx8IHdpbmRvdy5XZWJLaXRNdXRhdGlvbk9ic2VydmVyOwoKaWYgKE11dGF0aW9uT2JzZXJ2ZXIpIHsKICBkZWJ1ZyAmJiBjb25zb2xlLmxvZygnTXV0YXRpb25PYnNlcnZlcjogdHJ1ZScpOwogIG5ldyBNdXRhdGlvbk9ic2VydmVyKGNoZWNrTmV3Tm9kZXMpLm9ic2VydmUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB7CiAgICBjaGlsZExpc3Q6IHRydWUsCiAgICBhdHRyaWJ1dGVzOiB0cnVlLAogICAgYXR0cmlidXRlRmlsdGVyOiBbJ2hyZWYnXSwKICAgIHN1YnRyZWU6IHRydWUKICB9KTsKfSBlbHNlIHsKICBkZWJ1ZyAmJiBjb25zb2xlLmxvZygnTXV0YXRpb25FdmVudDogdHJ1ZScpOwogIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUF0dHJNb2RpZmllZCcsIGNoZWNrQXR0cmlidXRlLCBmYWxzZSk7CiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NTm9kZUluc2VydGVkJywgY2hlY2tOZXdOb2RlcywgZmFsc2UpOwp9"},{"name":"gwdang","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["http://*.jd.com/*","https://*.jd.com/*","http://*.taobao.com/*","https://*.taobao.com/*","http://*.tmall.com/*","https://*.tmall.com/*","http://*.yixun.com/*","http://*.51buy.com/*","http://*.amazon.cn/*","http://*.yhd.com/*","http://*.suning.com/*","http://*.dangdang.com/*","http://*.gome.com.cn/*","http://*.newegg.cn/*","http://*.paipai.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1475936798635},"enabled":true,"position":2,"file_url":"https://greasyfork.org/scripts/14466-%E8%B4%AD%E7%89%A9%E5%85%9A%E6%AF%94%E4%BB%B7%E5%B7%A5%E5%85%B7/code/%E8%B4%AD%E7%89%A9%E5%85%9A%E6%AF%94%E4%BB%B7%E5%B7%A5%E5%85%B7.user.js","uuid":"5798ff4f-8510-459c-ac62-e880469923c8","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIGd3ZGFuZwovLyBAbmFtZTp6aC1DTiAgIOi0reeJqeWFmuavlOS7t+W3peWFtwovLyBAbmFtZXNwYWNlICAgbm8KLy8gQGRlc2NyaXB0aW9uIOS6rOS4nC7mt5jlrp0u5aSp54yrLuaYk+i/hS7kuprpqazpgIrkuK3lm70u5LiA5Y+35bqXLuiLj+WugeaYk+i0rS7lvZPlvZPnvZEu5Zu9576O5Zyo57q/LuaWsOibi+e9keS4reWbvS7mi43mi43nvZHoh6rliqjmr5Tku7fjgILkuI3kvJrooqvliKDnmoTniYjmnKzvvIjlpKfmpoIKLy8gQGRlc2NyaXB0aW9uOnpoLUNOIOS6rOS4nC7mt5jlrp0u5aSp54yrLuaYk+i/hS7kuprpqazpgIrkuK3lm70u5LiA5Y+35bqXLuiLj+WugeaYk+i0rS7lvZPlvZPnvZEu5Zu9576O5Zyo57q/LuaWsOibi+e9keS4reWbvS7mi43mi43nvZHoh6rliqjmr5Tku7fjgILkuI3kvJrooqvliKDnmoTniYjmnKzvvIjlpKfmpoLlkKcKLy8gQGluY2x1ZGUgICAgIGh0dHA6Ly8qLmpkLmNvbS8qCi8vIEBpbmNsdWRlICAgICBodHRwczovLyouamQuY29tLyoKLy8gQGluY2x1ZGUgICAgIGh0dHA6Ly8qLnRhb2Jhby5jb20vKgovLyBAaW5jbHVkZSAgICAgaHR0cHM6Ly8qLnRhb2Jhby5jb20vKgovLyBAaW5jbHVkZSAgICAgaHR0cDovLyoudG1hbGwuY29tLyoKLy8gQGluY2x1ZGUgICAgIGh0dHBzOi8vKi50bWFsbC5jb20vKgovLyBAaW5jbHVkZSAgICAgaHR0cDovLyoueWl4dW4uY29tLyoKLy8gQGluY2x1ZGUgICAgIGh0dHA6Ly8qLjUxYnV5LmNvbS8qCi8vIEBpbmNsdWRlICAgICBodHRwOi8vKi5hbWF6b24uY24vKgovLyBAaW5jbHVkZSAgICAgaHR0cDovLyoueWhkLmNvbS8qCi8vIEBpbmNsdWRlICAgICBodHRwOi8vKi5zdW5pbmcuY29tLyoKLy8gQGluY2x1ZGUgICAgIGh0dHA6Ly8qLmRhbmdkYW5nLmNvbS8qCi8vIEBpbmNsdWRlICAgICBodHRwOi8vKi5nb21lLmNvbS5jbi8qCi8vIEBpbmNsdWRlICAgICBodHRwOi8vKi5uZXdlZ2cuY24vKgovLyBAaW5jbHVkZSAgICAgaHR0cDovLyoucGFpcGFpLmNvbS8qCi8vIEB2ZXJzaW9uICAgICAxLjEKLy8gQGdyYW50IAkJbm9uZQovLyA9PS9Vc2VyU2NyaXB0PT0KKGZ1bmN0aW9uKCl7CnZhciBzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7cy5zZXRBdHRyaWJ1dGUoJ3NyYycsJ2h0dHBzOi8vZ3JlYXN5Zm9yay5vcmcvc2NyaXB0cy8xNDQ2NC1nd2QvY29kZS9nd2QuanM/dmVyc2lvbj0xNDkyNjEnKTtkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHMpOwp9KSgp"},{"name":"為什麼你們就是不能加個空格呢？","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1475150539885,"data":{}},"enabled":true,"position":3,"file_url":"https://greasyfork.org/scripts/2185-%E7%82%BA%E4%BB%80%E9%BA%BC%E4%BD%A0%E5%80%91%E5%B0%B1%E6%98%AF%E4%B8%8D%E8%83%BD%E5%8A%A0%E5%80%8B%E7%A9%BA%E6%A0%BC%E5%91%A2/code/%E7%82%BA%E4%BB%80%E9%BA%BC%E4%BD%A0%E5%80%91%E5%B0%B1%E6%98%AF%E4%B8%8D%E8%83%BD%E5%8A%A0%E5%80%8B%E7%A9%BA%E6%A0%BC%E5%91%A2%EF%BC%9F.user.js","uuid":"1b09c190-b99f-4e0f-b1dd-7a459943f088","source":""},{"name":"Bypass Wait, Code & Login on Websites","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["http://d.119g.com/*","http://123564.com/*","http://m.123564.com/*","http://www.5xfile.com/*","http://7958.com/*","http://*.7958.com/*","http://qjwm.com/*","http://*.qjwm.com/*","http://www.9pan.net/*","http://*.www.9pan.net/*","http://yun.baidu.com/*","http://*.yun.baidu.com/*","http://pan.baidu.com/*","http://*.pan.baidu.com/*","http://bx0635.com/*","http://*.bx0635.com/*","http://colayun.com/*","http://*.colayun.com/*","http://colafile.com/*","http://*.colafile.com/*","http://coladrive.com/*","http://*.coladrive.com/*","http://400gb.com/*","http://*.400gb.com/*","http://ctdisk.com/*","http://*.ctdisk.com/*","http://pipipan.com/*","http://*.pipipan.com/*","http://bego.cc/*","http://*.bego.cc/*","http://ctfile.com/*","http://*.ctfile.com/*","http://t00y.com/*","http://*.t00y.com/*","http://dlkoo.com/*","http://*.dlkoo.com/*","http://howfile.com/*","http://*.howfile.com/*","http://www.lepan.cc/*","http://www.sx566.com/*","http://rayfile.com/*","http://*.rayfile.com/*","http://sudupan.com/*","http://*.sudupan.com/*","http://vdisk.cn/*","http://*.vdisk.cn/*","http://yimuhe.com/*","http://*.yimuhe.com/*","http://douban.fm/*","http://jing.fm/*","http://moe.fm/*","http://fm.qq.com/*","http://music.163.com/*","http://www.1ting.com/*","http://www.565656.com/*","http://5sing.com/*","http://*.5sing.com/*","http://5sing.kugou.com/*","http://*.5sing.kugou.com/*","http://www.9ku.com/*","http://music.baidu.com/*","http://play.baidu.com/*","http://*.play.baidu.com/*","http://yinyueyun.baidu.com/*","http://www.djcc.com/*","http://www.djkk.com/*","http://www.djye.com/*","http://music.douban.com/*","http://www.duole.com/*","http://ear.duomi.com/*","http://web.kugou.com/*","http://kugou.com/*","http://www.kugou.com/*","http://oyinyue.com/*","http://*.oyinyue.com/*","http://y.qq.com/*","http://*.y.qq.com/*","http://i.y.qq.com/*","http://*.i.y.qq.com/*","http://fm.qq.com/*","http://*.fm.qq.com/*","http://y.qq.com/*","http://soso.music.qq.com/*","http://songtaste.com/*","http://*.songtaste.com/*","http://www.xiami.com/*","http://yinyuetai.com/*","http://*.yinyuetai.com/*","http://79pan.com/*","http://*.79pan.com/*","http://03xg.com/*","http://*.03xg.com/*","http://7mv.cc/*","http://*.7mv.cc/*","http://pan.52zz.org/*","http://*.pan.52zz.org/*","http://258pan.com/*","http://*.258pan.com/*","http://huimeiku.com/*","http://*.huimeiku.com/*","http://wpan.cc/*","http://*.wpan.cc/*","http://ypan.cc/*","http://*.ypan.cc/*","http://azpan.com/*","http://*.azpan.com/*","http://gxdisk.com/*","http://*.gxdisk.com/*","http://2kuai.com/*","http://*.2kuai.com/*","http://1wp.me/*","http://*.1wp.me/*","http://77pan.cc/*","http://*.77pan.cc/*","http://vvpan.com/*","http://*.vvpan.com/*","http://fmdisk.com/*","http://*.fmdisk.com/*","http://bx0635.com/*","http://*.bx0635.com/*","http://10pan.cc/*","http://*.10pan.cc/*","http://1pan.cc/*","http://*.1pan.cc/*","http://123wzwp.com/*","http://*.123wzwp.com/*","http://wwp5.com/*","http://*.wwp5.com/*","http://fydisk.com/*","http://*.fydisk.com/*","https://jixunmoe.github.io/cuwcl4c/config/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1475936798678},"enabled":true,"position":4,"file_url":"https://greasyfork.org/scripts/2600-%E8%B7%B3%E8%BF%87%E7%BD%91%E7%AB%99%E7%AD%89%E5%BE%85-%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8F%8A%E7%99%BB%E5%BD%95/code/%E8%B7%B3%E8%BF%87%E7%BD%91%E7%AB%99%E7%AD%89%E5%BE%85%E3%80%81%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8F%8A%E7%99%BB%E5%BD%95.user.js","uuid":"b11f85fc-9f3f-43c3-b1b6-3671fe3d4695","source":""},{"name":"Download YouTube Videos as MP4","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["googlevideo.com","ytimg.com"],"orig_excludes":["http://www.youtube.com/embed/*","https://www.youtube.com/embed/*"],"orig_includes":["http://www.youtube.com/*","https://www.youtube.com/*"],"orig_matches":["http://www.youtube.com/*","https://www.youtube.com/*","http://s.ytimg.com/yts/jsbin/html5player*","https://s.ytimg.com/yts/jsbin/html5player*","http://manifest.googlevideo.com/*","https://manifest.googlevideo.com/*","http://*.googlevideo.com/videoplayback*","https://*.googlevideo.com/videoplayback*","http://*.youtube.com/videoplayback*","https://*.youtube.com/videoplayback*"],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"download-youtube-dash-enabled":"s0","download-youtube-script-url":"shttps://s.ytimg.com/yts/jsbin/player-zh_CN-vfl6J9imP/base.js","download-youtube-signature-code":"s0,9,0,-3,0,-3,51,0"},"ts":1475761158388},"enabled":true,"position":5,"file_url":"https://greasyfork.org/scripts/1317-download-youtube-videos-as-mp4/code/Download%20YouTube%20Videos%20as%20MP4.user.js","uuid":"a850a58d-2f71-4114-b763-127ec25c90be","source":""},{"name":"Anti-Adblock Killer | Reek","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":true,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["http://*/*","https://*/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":["*"],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"nextchecklist":"s1475975762857","nextcheckupdate":"s1476494165055"},"ts":1475936798698},"enabled":true,"position":6,"file_url":"https://greasyfork.org/scripts/735-anti-adblock-killer-reek/code/Anti-Adblock%20Killer%20%7C%20Reek.user.js","uuid":"ec693dec-33cc-4a51-8a5d-0325972c723e","source":""},{"name":"YouTube +","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":["*://www.youtube.com/tv*","*://www.youtube.com/embed/*","*://www.youtube.com/live_chat*"],"orig_includes":[],"orig_matches":["*://www.youtube.com/*"],"orig_noframes":true,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"particleSettings":"s{\"GEN_BTTR_NTF\":true,\"GEN_SUB_LIST\":true,\"GEN_INF_SCRL\":true,\"GEN_BLUE_GLOW\":true,\"GEN_PPOT_ON\":true,\"VID_END_SHRE\":true,\"VID_DFLT_QLTY\":\"hd1080\",\"VID_PLST_ATPL\":true,\"VID_PLST_RVRS\":true,\"VID_PLR_ATPL\":true,\"VID_PLR_ALVIS\":true,\"VID_PLR_SIZE_MEM\":true,\"VID_PLR_VOL_LDN\":true,\"VID_POST_TIME\":true,\"VID_VID_CNT\":true,\"VID_DESC_SHRT\":true,\"VID_PPOT_SZ\":false,\"VID_PLR_HTML5\":true,\"BLK_ON\":true,\"floaterX\":2000,\"floaterY\":2000,\"firstTime\":false,\"volLev\":50,\"advOpts\":true,\"blacklist\":{},\"extLang\":{\"zh_CN\":{\"YTSETS\":\"YouTube+ 设置\",\"ADV_OPTS\":\"高级选项\",\"SUB_PLST\":\"播放最新上传的内容\",\"BLCK_ADD\":\"添加到黑名单\",\"BLCK_EDIT\":\"编辑\",\"BLCK_SAVE\":\"保存\",\"BLCK_CLSE\":\"关闭\",\"CNSL_AP\":\"自动播放\",\"CNSL_RPT\":\"再次播放视频\",\"CNSL_SVTH\":\"打开缩略图\",\"CNSL_SS\":\"屏幕截图\",\"CNSL_SS_CLS\":\"关闭\",\"CNSL_FLBR\":\"网页全屏模式\",\"CNSL_CINM_MD\":\"影院模式\",\"CNSL_FRME\":\"逐帧\",\"PLST_AP\":\"自动播放\",\"PLST_RVRS\":\"倒序排列\",\"SHOW_CMTS\":\"显示评论\",\"HIDE_CMTS\":\"隐藏评论\",\"GLB_IMPR\":\"导入/导出设置\",\"GLB_LOCL_LANG\":\"点击以设置 YT+ 语言\",\"GLB_LOCL_LANG_CSTM\":\"本地化\",\"GLB_IMPR_SAVE\":\"保存和加载\",\"GLB_RSET\":\"重置\",\"GLB_SVE\":\"保存\",\"GLB_SVE_SETS\":\"设置已保存\",\"FTR_DESC\":\"这是什么\",\"GEN\":\"一般\",\"VID\":\"视频\",\"CHN\":\"频道\",\"BLK\":\"黑名单\",\"ABT\":\"关于\",\"HLP\":\"帮助\",\"DNT\":\"捐赠\",\"GEN_TTL\":\"通用设置\",\"GEN_GEN\":\"常规\",\"GEN_LYT\":\"布局\",\"GEN_LOCL_LANG\":\"使用更改过的 YT+ 语言\",\"GEN_DSBL_ADS\":\"禁止视频页面以外的广告\",\"GEN_INF_SCRL\":\"在信息源列表启用无限滚动\",\"GEN_YT_LOGO_LINK\":\"将YouTube标志重定向到订阅\",\"GEN_SUB_LIST\":\"启用播放列表订阅\",\"GEN_REM_APUN\":\"删除自动播放下一个\",\"GEN_SPF_OFF\":\"禁用SPF\",\"GEN_HIDE_FTR\":\"隐藏页脚\",\"GEN_BLUE_GLOW\":\"删除点击过的按钮周围的蓝色光圈\",\"GEN_HDE_RECM_SDBR\":\"隐藏推荐频道侧边栏\",\"GEN_HDE_SRCH_SDBR\":\"隐藏搜索结果侧边栏\",\"GEN_HDE_CHN_SDBR\":\"隐藏频道侧边栏\",\"GEN_CMPT_TTLS\":\"在信息源中使用紧凑型标题\",\"GEN_DSB_HVRC\":\"禁用悬停卡片\",\"GEN_BTTR_NTF\":\"改进的蓝色通知框\",\"GEN_GRID_SUBS\":\"在订阅中使用网格布局\",\"GEN_GRID_SRCH\":\"在搜索结果中使用网格布局\",\"VID_TTL\":\"视频设置\",\"VID_PLR\":\"播放器设置\",\"VID_PLR_LYT\":\"播放器布局\",\"VID_DFLT_QLTY\":\"默认视频质量：\",\"VID_DFLT_QLTY_AUTO\":\"自动\",\"VID_DFLT_QLTY_TNY\":\"144p\",\"VID_DFLT_QLTY_SML\":\"240p\",\"VID_DFLT_QLTY_MDM\":\"360p\",\"VID_DFLT_QLTY_LRG\":\"480p\",\"VID_DFLT_QLTY_720\":\"720p\",\"VID_DFLT_QLTY_1080\":\"1080p\",\"VID_DFLT_QLTY_1440\":\"1440p\",\"VID_DFLT_QLTY_2160\":\"2160p (4k)\",\"VID_DFLT_QLTY_2880\":\"2880p (5k)\",\"VID_DFLT_QLTY_ORIG\":\"4320p (8k)\",\"VID_PLR_ALVIS\":\"阅读评论时保持播放器可见\",\"VID_PLR_ALVIS_RST\":\"重设位置\",\"VID_PLR_ALVIS_SCRL_TOP\":\"返回顶部\",\"VID_PLR_ATPL\":\"自动播放视频\",\"VID_LAYT\":\"布局\",\"VID_VID_CNT\":\"显示指向已上传视频数的链\",\"VID_POST_TIME\":\"显示视频已发布时间\",\"VID_HIDE_DETLS\":\"隐藏视频详细信息\",\"VID_HIDE_COMS\":\"评论区\",\"VID_HIDE_COMS_SHOW\":\"显示\",\"VID_HIDE_COMS_HIDE\":\"隐藏\",\"VID_HIDE_COMS_REM\":\"删除\",\"VID_END_SHRE\":\"视频结束时禁用分享面板\",\"VID_PLST\":\"播放列表\",\"VID_PLST_ATPL\":\"启用播放列表自动播放按钮\",\"VID_PLST_RVRS\":\"启用播放列表倒序排列按钮\",\"VID_PLR_SIZE_MEM\":\"记住播放模式\",\"VID_VOL_WHEEL\":\"使用鼠标滚轮改变音量\",\"VID_PLR_VOL_MEM\":\"记住音量\",\"VID_PLR_ADS\":\"在视频页面禁用广告\",\"VID_PLR_ALACT\":\"播放器快捷方式始终处于活动状态\",\"VID_SUB_ADS\":\"仅在订阅频道的视频中启用广告\",\"VID_PLR_ANTS\":\"禁用注释\",\"VID_PLR_DASH\":\"禁用回放\",\"VID_PLR_HFR\":\"禁用HFR (60fps)\",\"VID_PLR_HTML5\":\"在可能时使用HTML 5播放器\",\"VID_PLR_CC\":\"禁用字幕和CC\",\"VID_PLR_INFO\":\"启用稍后观看按钮\",\"VID_PLR_FIT\":\"适应页面为剧场模式\",\"VID_PLR_FIT_WDTH\":\"适应页面为最大宽度:\",\"VID_PLR_DYN_SIZE\":\"在默认视图禁用播放器动态尺寸调节\",\"VID_DESC_SHRT\":\"短视频描述按钮\",\"VID_TTL_CMPT\":\"在视频描述页折叠标题\",\"VID_LAYT_AUTO_PNL\":\"自动展开视频描述\",\"GEN_CHN_DFLT_PAGE\":\"默认的频道页面:\",\"GEN_CHN_DFLT_PAGE_DFLT\":\"默认\",\"GEN_CHN_DFLT_PAGE_VID\":\"视频\",\"GEN_CHN_DFLT_PAGE_PL\":\"播放列表\",\"GEN_CHN_DFLT_PAGE_CHN\":\"频道\",\"GEN_CHN_DFLT_PAGE_DISC\":\"讨论\",\"GEN_CHN_DFLT_PAGE_ABT\":\"关于\",\"BLK_TTL\":\"黑名单设置\",\"BLK_BLK\":\"黑名单\",\"BLK_ON\":\"启用黑名单\",\"ABT_TTL\":\"信息和有用的链接\",\"ABT_THKS\":\"鸣谢:\",\"ABT_THKS_YEPPHA\":\"，他们的工作给此项目带来了灵感，没有他们今天这些都不会存在。\",\"ABT_THKS_USERSCRIPT\":\" 使开发和发行第三方软件的任务无比简单。\",\"ABT_THKS_STACKOV\":\" 无价的信息对软件开发做出了巨大贡献。\",\"ABT_INFO\":\"官方页面\",\"ABT_LNK_GHB\":\"GitHub\",\"ABT_LNK_GRFK\":\"Greasy Fork\",\"ABT_LNK_OPNU\":\"OpenUserJS\",\"WLCM\":\"感谢您安装YouTube+\",\"WLCMSTRT\":\"您可以通过点击上面的按钮来自定义您的设置\",\"LOCALE\":\"中文 (简体)\",\"lastMod\":1475001746000},\"nextCheck\":1475832777552},\"GEN_HDE_CHN_SDBR\":false,\"GEN_HDE_SRCH_SDBR\":false,\"GEN_HDE_RECM_SDBR\":false,\"GEN_HIDE_FTR\":false,\"GEN_CMPT_TTLS\":false,\"GEN_DSB_HVRC\":false,\"GEN_GRID_SRCH\":false,\"GEN_GRID_SUBS\":false,\"GEN_CHN_DFLT_PAGE\":\"default\",\"GEN_SPF_OFF\":false,\"GEN_REM_APUN\":false,\"GEN_YT_LOGO_LINK\":false,\"GEN_DSBL_ADS\":false,\"GEN_LOCL_LANG\":false,\"VID_LAYT_AUTO_PNL\":false,\"VID_HIDE_DETLS\":false,\"VID_TTL_CMPT\":false,\"VID_HIDE_COMS\":\"0\",\"VID_PLR_FIT_WDTH\":false,\"VID_PLR_FIT\":false,\"VID_PLR_DYN_SIZE\":false,\"VID_PLR_INFO\":false,\"VID_PLR_HFR\":false,\"VID_VOL_WHEEL\":true,\"VID_PLR_ALACT\":false,\"VID_PLR_VOL_MEM\":false,\"VID_PLR_ANTS\":false,\"VID_PLR_CC\":false,\"VID_PLR_ALVIS_WDTH\":false,\"VID_SUB_ADS\":false,\"VID_PLR_ADS\":true,\"lightsOut\":false,\"theaterMode\":false}"},"ts":1475235445659},"enabled":true,"position":7,"file_url":"https://greasyfork.org/scripts/9932-youtube/code/YouTube%20+.user.js","uuid":"f036c817-e556-4bb9-9941-5081c51a16da","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQHZlcnNpb24gICAgICAgICAxLjUuNgovLyBAbmFtZSAgICAgICAgICAgIFlvdVR1YmUgKwovLyBAbmFtZXNwYWNlICAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9QYXJ0aWNsZUNvcmUKLy8gQGRlc2NyaXB0aW9uICAgICBZb3VUdWJlIHdpdGggbW9yZSBmcmVlZG9tCi8vIEBpY29uICAgICAgICAgICAgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL1BhcnRpY2xlQ29yZS9QYXJ0aWNsZS9naC1wYWdlcy9pbWFnZXMvWVQlMkJpY29uLnBuZwovLyBAbWF0Y2ggICAgICAgICAgICo6Ly93d3cueW91dHViZS5jb20vKgovLyBAZXhjbHVkZSAgICAgICAgICo6Ly93d3cueW91dHViZS5jb20vdHYqCi8vIEBleGNsdWRlICAgICAgICAgKjovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC8qCi8vIEBleGNsdWRlICAgICAgICAgKjovL3d3dy55b3V0dWJlLmNvbS9saXZlX2NoYXQqCi8vIEBydW4tYXQgICAgICAgICAgZG9jdW1lbnQtc3RhcnQKLy8gQGhvbWVwYWdlVVJMICAgICBodHRwczovL2dpdGh1Yi5jb20vUGFydGljbGVDb3JlL1BhcnRpY2xlCi8vIEBzdXBwb3J0VVJMICAgICAgaHR0cHM6Ly9naXRodWIuY29tL1BhcnRpY2xlQ29yZS9QYXJ0aWNsZS93aWtpCi8vIEBjb250cmlidXRpb25VUkwgaHR0cHM6Ly93d3cucGF5cGFsLmNvbS9jZ2ktYmluL3dlYnNjcj9jbWQ9X3MteGNsaWNrJmhvc3RlZF9idXR0b25faWQ9VU1WUUpKRkc0QkZIVwovLyBAZ3JhbnQgICAgICAgICAgIEdNX2dldFZhbHVlCi8vIEBncmFudCAgICAgICAgICAgR01fc2V0VmFsdWUKLy8gQG5vZnJhbWVzCi8vID09L1VzZXJTY3JpcHQ9PQooZnVuY3Rpb24gKCkgewogICAgInVzZSBzdHJpY3QiOwogICAgdmFyIHBhcnRpY2xlID0gewogICAgICAgIGluamVjdDogZnVuY3Rpb24oaXNfdXNlcnNjcmlwdCkgewogICAgICAgICAgICBmdW5jdGlvbiBzZXRMb2NhbGUoY29udGVudCkgewogICAgICAgICAgICAgICAgdmFyIGksIGosIGxpc3QsIHRlbXAsIHl0cGxhYmVsOwogICAgICAgICAgICAgICAgeXRwbGFiZWwgPSBjb250ZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIltkYXRhLXBdIik7CiAgICAgICAgICAgICAgICBpID0geXRwbGFiZWwubGVuZ3RoOwogICAgICAgICAgICAgICAgd2hpbGUgKGktLSkgewogICAgICAgICAgICAgICAgICAgIGxpc3QgPSB5dHBsYWJlbFtpXS5kYXRhc2V0LnAuc3BsaXQoIiYiKTsKICAgICAgICAgICAgICAgICAgICBqID0gbGlzdC5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGotLSkgewogICAgICAgICAgICAgICAgICAgICAgICB0ZW1wID0gbGlzdFtqXS5zcGxpdCgifCIpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVtcFswXSA9PT0gInRuZCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHl0cGxhYmVsW2ldLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGxhbmcodGVtcFsxXSkpKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0ZW1wWzBdID09PSAidHRsIikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgeXRwbGFiZWxbaV0uc2V0QXR0cmlidXRlKCJ0aXRsZSIsIGxhbmcodGVtcFsxXSkpOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgeXRwbGFiZWxbaV0uZGF0YXNldC50b29sdGlwVGV4dCA9IGxhbmcodGVtcFsxXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gY29udGVudDsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBnZXRMb2NhbGUoZGF0YSkgewogICAgICAgICAgICAgICAgbGFuZy5mZXRjaGluZyA9IGZhbHNlOwogICAgICAgICAgICAgICAgZGF0YSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kYXRhc2V0LnNldGxvY2FsZTsKICAgICAgICAgICAgICAgIGRhdGEgPSBkYXRhICYmIEpTT04ucGFyc2UoZGF0YSk7CiAgICAgICAgICAgICAgICBpZiAoZGF0YSkgewogICAgICAgICAgICAgICAgICAgIHVzZXJfc2V0dGluZ3MuZXh0TGFuZ1tsYW5nLnl0bGFuZ10gPSBKU09OLnBhcnNlKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kYXRhc2V0LnNldGxvY2FsZSk7CiAgICAgICAgICAgICAgICAgICAgdXNlcl9zZXR0aW5ncy5leHRMYW5nW2xhbmcueXRsYW5nXS5sYXN0TW9kID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7CiAgICAgICAgICAgICAgICAgICAgdXNlcl9zZXR0aW5ncy5leHRMYW5nLm5leHRDaGVjayA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpICsgNjA0OEU1OwogICAgICAgICAgICAgICAgICAgIHNldCgiZXh0TGFuZyIsIHVzZXJfc2V0dGluZ3MuZXh0TGFuZyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBsYW5nLm9ic2VydmVyLmRpc2Nvbm5lY3QoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBnZXRMYW5ndWFnZShkYXRhKSB7CiAgICAgICAgICAgICAgICBsYW5nLmZldGNoaW5nID0gZmFsc2U7CiAgICAgICAgICAgICAgICBpZiAoZGF0YS50YXJnZXQucmVhZHlTdGF0ZSA9PT0gNCAmJiBkYXRhLnRhcmdldC5zdGF0dXMgPT09IDIwMCkgewogICAgICAgICAgICAgICAgICAgIHVzZXJfc2V0dGluZ3MuZXh0TGFuZ1tsYW5nLnl0bGFuZ10gPSBKU09OLnBhcnNlKGRhdGEudGFyZ2V0LnJlc3BvbnNlKTsKICAgICAgICAgICAgICAgICAgICB1c2VyX3NldHRpbmdzLmV4dExhbmdbbGFuZy55dGxhbmddLmxhc3RNb2QgPSBuZXcgRGF0ZShkYXRhLnRhcmdldC5nZXRSZXNwb25zZUhlYWRlcigiTGFzdC1Nb2RpZmllZCIpKS5nZXRUaW1lKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB1c2VyX3NldHRpbmdzLmV4dExhbmcubmV4dENoZWNrID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgKyA2MDQ4RTU7CiAgICAgICAgICAgICAgICBzZXQoImV4dExhbmciLCB1c2VyX3NldHRpbmdzLmV4dExhbmcpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIGNoZWNrTW9kaWZpZWQoZGF0YSkgewogICAgICAgICAgICAgICAgbGFuZy5mZXRjaGluZyA9IGZhbHNlOwogICAgICAgICAgICAgICAgaWYgKGRhdGEudGFyZ2V0LnJlYWR5U3RhdGUgPT09IDQgJiYgZGF0YS50YXJnZXQuc3RhdHVzID09PSAyMDApIHsKICAgICAgICAgICAgICAgICAgICBsYW5nLmZldGNoaW5nID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICBsb2NhbFhIUigiR0VUIiwgZ2V0TGFuZ3VhZ2UsIGxhbmcudXJsQmFzZSArIGxhbmcueXRsYW5nICsgIi5qc29uIiwgWyJBY2NlcHQiLCAiYXBwbGljYXRpb24vdm5kLmdpdGh1Yi5yYXciXSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gbGFuZyhsYWJlbCkgewogICAgICAgICAgICAgICAgbGFuZy55dGxhbmcgPSB3aW5kb3cueXQgJiYgd2luZG93Lnl0LmNvbmZpZ18gJiYgd2luZG93Lnl0LmNvbmZpZ18uR0FQSV9MT0NBTEU7CiAgICAgICAgICAgICAgICBsYW5nLnVybEJhc2UgPSAiaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9yZXBvcy9QYXJ0aWNsZUNvcmUvUGFydGljbGUvY29udGVudHMvTG9jYWxlLyI7CiAgICAgICAgICAgICAgICBpZiAoIXVzZXJfc2V0dGluZ3MuZXh0TGFuZykgewogICAgICAgICAgICAgICAgICAgIHNldCgiZXh0TGFuZyIsIHt9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICh1c2VyX3NldHRpbmdzLkdFTl9MT0NMX0xBTkcgJiYgdXNlcl9zZXR0aW5ncy5sb2NhbExhbmcgJiYgdXNlcl9zZXR0aW5ncy5sb2NhbExhbmdbbGFiZWxdKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKEpTT04uc3RyaW5naWZ5KHVzZXJfc2V0dGluZ3MuZXh0TGFuZykgIT09ICJ7fSIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2V0KCJleHRMYW5nIiwge30pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXNlcl9zZXR0aW5ncy5sb2NhbExhbmdbbGFiZWxdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCF1c2VyX3NldHRpbmdzLkdFTl9MT0NMX0xBTkcgJiYgbGFuZy55dGxhbmcgJiYgbGFuZy55dGxhbmcgIT09ICJlbl9VUyIpIHsKICAgICAgICAgICAgICAgICAgICBpZiAodXNlcl9zZXR0aW5ncy5leHRMYW5nW2xhbmcueXRsYW5nXSAmJiB1c2VyX3NldHRpbmdzLmV4dExhbmdbbGFuZy55dGxhbmddW2xhYmVsXSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWxhbmcuZmV0Y2hpbmcgJiYgdXNlcl9zZXR0aW5ncy5leHRMYW5nLm5leHRDaGVjayAmJiB1c2VyX3NldHRpbmdzLmV4dExhbmcubmV4dENoZWNrIDw9IG5ldyBEYXRlKCkuZ2V0VGltZSgpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYW5nLmZldGNoaW5nID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNfdXNlcnNjcmlwdCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhbmcub2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihnZXRMb2NhbGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhbmcub2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlRmlsdGVyOiBbImRhdGEtc2V0bG9jYWxlIl0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZGF0YXNldC5nZXRsb2NhbGUgPSBsYW5nLnl0bGFuZzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxYSFIoIkhFQUQiLCBjaGVja01vZGlmaWVkLCBsYW5nLnVybEJhc2UgKyBsYW5nLnl0bGFuZyArICIuanNvbiIsIFsiSWYtTW9kaWZpZWQtU2luY2UiLCBuZXcgRGF0ZSh1c2VyX3NldHRpbmdzLmV4dExhbmdbbGFuZy55dGxhbmddLmxhc3RNb2QpLnRvVVRDU3RyaW5nKCldKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJfc2V0dGluZ3MuZXh0TGFuZy5uZXh0Q2hlY2sgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSArIDYwNDhFNTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldCgiZXh0TGFuZyIsIHVzZXJfc2V0dGluZ3MuZXh0TGFuZyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVzZXJfc2V0dGluZ3MuZXh0TGFuZ1tsYW5nLnl0bGFuZ11bbGFiZWxdOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoIXVzZXJfc2V0dGluZ3MuZXh0TGFuZ1tsYW5nLnl0bGFuZ10gJiYgIWxhbmcuZmV0Y2hpbmcgJiYgKCF1c2VyX3NldHRpbmdzLmV4dExhbmcubmV4dENoZWNrIHx8IHVzZXJfc2V0dGluZ3MuZXh0TGFuZy5uZXh0Q2hlY2sgPD0gbmV3IERhdGUoKS5nZXRUaW1lKCkpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGxhbmcuZmV0Y2hpbmcgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzX3VzZXJzY3JpcHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhbmcub2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihnZXRMb2NhbGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFuZy5vYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlRmlsdGVyOiBbImRhdGEtc2V0bG9jYWxlIl0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRhdGFzZXQuZ2V0bG9jYWxlID0gbGFuZy55dGxhbmc7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFhIUigiR0VUIiwgZ2V0TGFuZ3VhZ2UsIGxhbmcudXJsQmFzZSArIGxhbmcueXRsYW5nICsgIi5qc29uIiwgWyJBY2NlcHQiLCAiYXBwbGljYXRpb24vdm5kLmdpdGh1Yi5yYXciXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gbGFuZ3VhZ2VbbGFiZWxdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIHNldEJ1dHRvbihvYmopIHsKICAgICAgICAgICAgICAgIHZhciBsbmssIGtleXMsIHRlbXA7CiAgICAgICAgICAgICAgICBrZXlzID0gT2JqZWN0LmtleXMob2JqKTsKICAgICAgICAgICAgICAgIHRlbXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJ0ZW1wbGF0ZSIpOwogICAgICAgICAgICAgICAgdGVtcC5pbm5lckhUTUwgPSAiPGRpdiBjbGFzcz0nYmxhY2tsaXN0Jz48YnV0dG9uIGNsYXNzPSdjbG9zZSB5dHBsdXNfc3ByaXRlJz48L2J1dHRvbj48YSB0YXJnZXQ9J19ibGFuayc+PC9hPjwvZGl2PiI7CiAgICAgICAgICAgICAgICB0ZW1wID0gdGVtcC5jb250ZW50LmZpcnN0Q2hpbGQ7CiAgICAgICAgICAgICAgICBsbmsgPSB0ZW1wLnF1ZXJ5U2VsZWN0b3IoImEiKTsKICAgICAgICAgICAgICAgIGxuay5ocmVmID0gIi9jaGFubmVsLyIgKyBrZXlzWzBdOwogICAgICAgICAgICAgICAgbG5rLnNldEF0dHJpYnV0ZSgidGl0bGUiLCBvYmpba2V5c1swXV0pOwogICAgICAgICAgICAgICAgbG5rLnRleHRDb250ZW50ID0gb2JqW2tleXNbMF1dOwogICAgICAgICAgICAgICAgZ2V0QmxhY2tsaXN0LmJsaXN0LmFwcGVuZENoaWxkKHRlbXApOwogICAgICAgICAgICAgICAgZ2V0QmxhY2tsaXN0LmJsaXN0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCJcbiIpKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBzb3J0TGlzdChwcmV2aW91cywgbmV4dCl7CiAgICAgICAgICAgICAgICByZXR1cm4gcHJldmlvdXNbT2JqZWN0LmtleXMocHJldmlvdXMpWzBdXS5sb2NhbGVDb21wYXJlKG5leHRbT2JqZWN0LmtleXMobmV4dClbMF1dKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBidWlsZExpc3QoeXRpZCkgewogICAgICAgICAgICAgICAgdmFyIG9iaiA9IHt9OwogICAgICAgICAgICAgICAgb2JqW3l0aWRdID0gZ2V0QmxhY2tsaXN0Lmxpc3RbeXRpZF07CiAgICAgICAgICAgICAgICBnZXRCbGFja2xpc3Quc29ydEFscGhhLnB1c2gob2JqKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBnZXRCbGFja2xpc3QoYmxpc3QpIHsKICAgICAgICAgICAgICAgIGdldEJsYWNrbGlzdC5ibGlzdCA9IGJsaXN0OwogICAgICAgICAgICAgICAgZ2V0QmxhY2tsaXN0Lmxpc3QgPSB1c2VyX3NldHRpbmdzLmJsYWNrbGlzdDsKICAgICAgICAgICAgICAgIGdldEJsYWNrbGlzdC5zb3J0QWxwaGEgPSBbXTsKICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKGdldEJsYWNrbGlzdC5saXN0KS5mb3JFYWNoKGJ1aWxkTGlzdCk7CiAgICAgICAgICAgICAgICBnZXRCbGFja2xpc3Quc29ydEFscGhhLnNvcnQoc29ydExpc3QpLmZvckVhY2goc2V0QnV0dG9uKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBnZXRWYWx1ZXMobWVudSkgewogICAgICAgICAgICAgICAgdmFyIGksIHl0cCwgbGlzdDsKICAgICAgICAgICAgICAgIGlmICh1c2VyX3NldHRpbmdzKSB7CiAgICAgICAgICAgICAgICAgICAgbGlzdCA9IG1lbnUucXVlcnlTZWxlY3RvcigiI2JsYWNrbGlzdCIpOwogICAgICAgICAgICAgICAgICAgIGlmIChsaXN0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGdldEJsYWNrbGlzdChsaXN0KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgeXRwID0gbWVudS5xdWVyeVNlbGVjdG9yQWxsKCJpbnB1dFtpZF0iKTsKICAgICAgICAgICAgICAgICAgICBpID0geXRwLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaS0tKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh5dHBbaV0udHlwZSA9PT0gImNoZWNrYm94IiAmJiB1c2VyX3NldHRpbmdzW3l0cFtpXS5pZF0gPT09IHRydWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHl0cFtpXS5zZXRBdHRyaWJ1dGUoImNoZWNrZWQiLCAidHJ1ZSIpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh5dHBbaV0udHlwZSA9PT0gInRleHQiICYmIHR5cGVvZiB1c2VyX3NldHRpbmdzW3l0cFtpXS5pZF0gPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5dHBbaV0uc2V0QXR0cmlidXRlKCJ2YWx1ZSIsIHVzZXJfc2V0dGluZ3NbeXRwW2ldLmlkXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgeXRwID0gbWVudS5xdWVyeVNlbGVjdG9yQWxsKCJvcHRpb24iKTsKICAgICAgICAgICAgICAgICAgICBpID0geXRwLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaS0tKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1c2VyX3NldHRpbmdzW3l0cFtpXS5wYXJlbnROb2RlLmlkXSA9PT0geXRwW2ldLnZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5dHBbaV0uc2V0QXR0cmlidXRlKCJzZWxlY3RlZCIsICJ0cnVlIik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gbWVudTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBnZXRNZW51KHNlY3Rpb24pIHsKICAgICAgICAgICAgICAgIHZhciB0ZW1wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgidGVtcGxhdGUiKTsKICAgICAgICAgICAgICAgIGlmIChzZWN0aW9uID09PSAiTUVOIikgewogICAgICAgICAgICAgICAgICAgIHRlbXAuaW5uZXJIVE1MID0gLy8KICAgICAgICAgICAgICAgICAgICAgICAgYDxkaXYgaWQ9J1Atc2V0dGluZ3MnPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0nUC1jb250YWluZXInPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9J1Atc2lkZWJhcic+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBpZD0nUC1zaWRlYmFyLWxpc3QnPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGlkPSdHRU4nIGNsYXNzPSdzZWxlY3RlZCcgZGF0YS1wPSd0bmR8R0VOJz48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGlkPSdWSUQnIGRhdGEtcD0ndG5kfFZJRCc+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBpZD0nQkxLJyBkYXRhLXA9J3RuZHxCTEsnPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgaWQ9J0FCVCcgZGF0YS1wPSd0bmR8QUJUJz48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGlkPSdITFAnPjxhIHRhcmdldD0nX2JsYW5rJyBocmVmPSdodHRwczovL2dpdGh1Yi5jb20vUGFydGljbGVDb3JlL1BhcnRpY2xlL3dpa2knIGRhdGEtcD0ndG5kfEhMUCc+PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgaWQ9J0ROVCc+PGEgdGl0bGU9J1BheVBhbCcgdGFyZ2V0PSdfYmxhbmsnIGhyZWY9J2h0dHBzOi8vd3d3LnBheXBhbC5jb20vY2dpLWJpbi93ZWJzY3I/Y21kPV9zLXhjbGljayZob3N0ZWRfYnV0dG9uX2lkPVVNVlFKSkZHNEJGSFcnIGRhdGEtcD0ndG5kfEROVCc+PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+YDsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VjdGlvbiA9PT0gIkdFTiIpIHsKICAgICAgICAgICAgICAgICAgICB0ZW1wLmlubmVySFRNTCA9IC8vCiAgICAgICAgICAgICAgICAgICAgICAgIGA8ZGl2IGlkPSdQLWNvbnRlbnQnPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nUC1oZWFkZXInPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9J1Atc2F2ZScgZGF0YS1wPSd0bmR8R0xCX1NWRSc+PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0nUC1yZXNldCcgZGF0YS1wPSd0bmR8R0xCX1JTRVQnPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9J1AtaW1wZXhwIHl0cGx1c19zcHJpdGUnIGRhdGEtcD0ndHRsfEdMQl9JTVBSJz48L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSdQLWltcGxhbmcnIGRhdGEtcD0ndHRsfEdMQl9MT0NMX0xBTkcmdG5kfExPQ0FMRSc+PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGRhdGEtcD0ndG5kfEdFTl9UVEwnPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxociBjbGFzcz0nUC1ob3J6Jz48L2hyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGRhdGEtcD0ndG5kfEdFTl9HRU4nPjwvaDM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxpbnB1dCBpZD0nR0VOX0xPQ0xfTEFORycgdHlwZT0nY2hlY2tib3gnPjwvaW5wdXQ+PGxhYmVsIGZvcj0nR0VOX0xPQ0xfTEFORycgZGF0YS1wPSd0bmR8R0VOX0xPQ0xfTEFORyc+PC9sYWJlbD5cbjxhIGhyZWY9J2h0dHBzOi8vZ2l0aHViLmNvbS9QYXJ0aWNsZUNvcmUvUGFydGljbGUvd2lraS9GZWF0dXJlcyNjdXN0b21fbGFuZycgZGF0YS1wPSd0dGx8RlRSX0RFU0MnIHRhcmdldD0nZmVhdHVyZXMnPj88L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxpbnB1dCBpZD0nR0VOX0RTQkxfQURTJyB0eXBlPSdjaGVja2JveCc+PC9pbnB1dD48bGFiZWwgZm9yPSdHRU5fRFNCTF9BRFMnIGRhdGEtcD0ndG5kfEdFTl9EU0JMX0FEUyc+PC9sYWJlbD5cbjxhIGhyZWY9J2h0dHBzOi8vZ2l0aHViLmNvbS9QYXJ0aWNsZUNvcmUvUGFydGljbGUvd2lraS9GZWF0dXJlcyNvdXRzaWRlX2FkcycgZGF0YS1wPSd0dGx8RlRSX0RFU0MnIHRhcmdldD0nZmVhdHVyZXMnPj88L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxpbnB1dCBpZD0nR0VOX1lUX0xPR09fTElOSycgdHlwZT0nY2hlY2tib3gnPjwvaW5wdXQ+PGxhYmVsIGZvcj0nR0VOX1lUX0xPR09fTElOSycgZGF0YS1wPSd0bmR8R0VOX1lUX0xPR09fTElOSyc+PC9sYWJlbD5cbjxhIGhyZWY9J2h0dHBzOi8vZ2l0aHViLmNvbS9QYXJ0aWNsZUNvcmUvUGFydGljbGUvd2lraS9GZWF0dXJlcyNsb2dvX3JlZGlyZWN0JyBkYXRhLXA9J3R0bHxGVFJfREVTQycgdGFyZ2V0PSdmZWF0dXJlcyc+PzwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+PGlucHV0IGlkPSdHRU5fU1VCX0xJU1QnIHR5cGU9J2NoZWNrYm94Jz48L2lucHV0PjxsYWJlbCBmb3I9J0dFTl9TVUJfTElTVCcgZGF0YS1wPSd0bmR8R0VOX1NVQl9MSVNUJz48L2xhYmVsPlxuPGEgaHJlZj0naHR0cHM6Ly9naXRodWIuY29tL1BhcnRpY2xlQ29yZS9QYXJ0aWNsZS93aWtpL0ZlYXR1cmVzI3N1Yl9wbGF5bGlzdCcgZGF0YS1wPSd0dGx8RlRSX0RFU0MnIHRhcmdldD0nZmVhdHVyZXMnPj88L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxpbnB1dCBpZD0nR0VOX0lORl9TQ1JMJyB0eXBlPSdjaGVja2JveCc+PC9pbnB1dD48bGFiZWwgZm9yPSdHRU5fSU5GX1NDUkwnIGRhdGEtcD0ndG5kfEdFTl9JTkZfU0NSTCc+PC9sYWJlbD5cbjxhIGhyZWY9J2h0dHBzOi8vZ2l0aHViLmNvbS9QYXJ0aWNsZUNvcmUvUGFydGljbGUvd2lraS9GZWF0dXJlcyNpbmZpbml0ZV9zY3JvbGwnIGRhdGEtcD0ndHRsfEZUUl9ERVNDJyB0YXJnZXQ9J2ZlYXR1cmVzJz4/PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj48aW5wdXQgaWQ9J0dFTl9QUE9UX09OJyB0eXBlPSdjaGVja2JveCc+PC9pbnB1dD48bGFiZWwgZm9yPSdHRU5fUFBPVF9PTicgZGF0YS1wPSd0bmR8R0VOX1BQT1RfT04nPjwvbGFiZWw+XG48YSBocmVmPSdodHRwczovL2dpdGh1Yi5jb20vUGFydGljbGVDb3JlL1BhcnRpY2xlL3dpa2kvRmVhdHVyZXMjcG9wb3V0X29uJyBkYXRhLXA9J3R0bHxGVFJfREVTQycgdGFyZ2V0PSdmZWF0dXJlcyc+PzwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+PGlucHV0IGlkPSdHRU5fUkVNX0FQVU4nIHR5cGU9J2NoZWNrYm94Jz48L2lucHV0PjxsYWJlbCBmb3I9J0dFTl9SRU1fQVBVTicgZGF0YS1wPSd0bmR8R0VOX1JFTV9BUFVOJz48L2xhYmVsPlxuPGEgaHJlZj0naHR0cHM6Ly9naXRodWIuY29tL1BhcnRpY2xlQ29yZS9QYXJ0aWNsZS93aWtpL0ZlYXR1cmVzI3JlbW92ZV9hdXRvcGxheScgZGF0YS1wPSd0dGx8RlRSX0RFU0MnIHRhcmdldD0nZmVhdHVyZXMnPj88L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxpbnB1dCBpZD0nR0VOX1NQRl9PRkYnIHR5cGU9J2NoZWNrYm94Jz48L2lucHV0PjxsYWJlbCBmb3I9J0dFTl9TUEZfT0ZGJyBkYXRhLXA9J3RuZHxHRU5fU1BGX09GRic+PC9sYWJlbD5cbjxhIGhyZWY9J2h0dHBzOi8vZ2l0aHViLmNvbS9QYXJ0aWNsZUNvcmUvUGFydGljbGUvd2lraS9GZWF0dXJlcyNzcGZfb2ZmJyBkYXRhLXA9J3R0bHxGVFJfREVTQycgdGFyZ2V0PSdmZWF0dXJlcyc+PzwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0nR0VOX0NITl9ERkxUX1BBR0UnIGRhdGEtcD0ndG5kfEdFTl9DSE5fREZMVF9QQUdFJz48L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J1Atc2VsZWN0Jz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBpZD0nR0VOX0NITl9ERkxUX1BBR0UnPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0nZGVmYXVsdCcgZGF0YS1wPSd0bmR8R0VOX0NITl9ERkxUX1BBR0VfREZMVCc+PC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSd2aWRlb3MnIGRhdGEtcD0ndG5kfEdFTl9DSE5fREZMVF9QQUdFX1ZJRCc+PC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSdwbGF5bGlzdHMnIGRhdGEtcD0ndG5kfEdFTl9DSE5fREZMVF9QQUdFX1BMJz48L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9J2NoYW5uZWxzJyBkYXRhLXA9J3RuZHxHRU5fQ0hOX0RGTFRfUEFHRV9DSE4nPjwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0nZGlzY3Vzc2lvbicgZGF0YS1wPSd0bmR8R0VOX0NITl9ERkxUX1BBR0VfRElTQyc+PC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSdhYm91dCcgZGF0YS1wPSd0bmR8R0VOX0NITl9ERkxUX1BBR0VfQUJUJz48L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSdodHRwczovL2dpdGh1Yi5jb20vUGFydGljbGVDb3JlL1BhcnRpY2xlL3dpa2kvRmVhdHVyZXMjY2hhbm5lbF9wYWdlJyBkYXRhLXA9J3R0bHxGVFJfREVTQycgdGFyZ2V0PSdmZWF0dXJlcyc+PzwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGRhdGEtcD0ndG5kfEdFTl9MWVQnPjwvaDM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxpbnB1dCBpZD0nR0VOX0dSSURfU1VCUycgdHlwZT0nY2hlY2tib3gnPjwvaW5wdXQ+PGxhYmVsIGZvcj0nR0VOX0dSSURfU1VCUycgZGF0YS1wPSd0bmR8R0VOX0dSSURfU1VCUyc+PC9sYWJlbD5cbjxhIGhyZWY9J2h0dHBzOi8vZ2l0aHViLmNvbS9QYXJ0aWNsZUNvcmUvUGFydGljbGUvd2lraS9GZWF0dXJlcyNzdWJfZ3JpZCcgZGF0YS1wPSd0dGx8RlRSX0RFU0MnIHRhcmdldD0nZmVhdHVyZXMnPj88L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxpbnB1dCBpZD0nR0VOX0dSSURfU1JDSCcgdHlwZT0nY2hlY2tib3gnPjwvaW5wdXQ+PGxhYmVsIGZvcj0nR0VOX0dSSURfU1JDSCcgZGF0YS1wPSd0bmR8R0VOX0dSSURfU1JDSCc+PC9sYWJlbD5cbjxhIGhyZWY9J2h0dHBzOi8vZ2l0aHViLmNvbS9QYXJ0aWNsZUNvcmUvUGFydGljbGUvd2lraS9GZWF0dXJlcyNzZWFyY2hfZ3JpZCcgZGF0YS1wPSd0dGx8RlRSX0RFU0MnIHRhcmdldD0nZmVhdHVyZXMnPj88L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxpbnB1dCBpZD0nR0VOX0JUVFJfTlRGJyB0eXBlPSdjaGVja2JveCc+PC9pbnB1dD48bGFiZWwgZm9yPSdHRU5fQlRUUl9OVEYnIGRhdGEtcD0ndG5kfEdFTl9CVFRSX05URic+PC9sYWJlbD5cbjxhIGhyZWY9J2h0dHBzOi8vZ2l0aHViLmNvbS9QYXJ0aWNsZUNvcmUvUGFydGljbGUvd2lraS9GZWF0dXJlcyNibHVlX2JveCcgZGF0YS1wPSd0dGx8RlRSX0RFU0MnIHRhcmdldD0nZmVhdHVyZXMnPj88L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxpbnB1dCBpZD0nR0VOX0RTQl9IVlJDJyB0eXBlPSdjaGVja2JveCc+PC9pbnB1dD48bGFiZWwgZm9yPSdHRU5fRFNCX0hWUkMnIGRhdGEtcD0ndG5kfEdFTl9EU0JfSFZSQyc+PC9sYWJlbD5cbjxhIGhyZWY9J2h0dHBzOi8vZ2l0aHViLmNvbS9QYXJ0aWNsZUNvcmUvUGFydGljbGUvd2lraS9GZWF0dXJlcyNob3ZlcmNhcmRzX29mZicgZGF0YS1wPSd0dGx8RlRSX0RFU0MnIHRhcmdldD0nZmVhdHVyZXMnPj88L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxpbnB1dCBpZD0nR0VOX0NNUFRfVFRMUycgdHlwZT0nY2hlY2tib3gnPjwvaW5wdXQ+PGxhYmVsIGZvcj0nR0VOX0NNUFRfVFRMUycgZGF0YS1wPSd0bmR8R0VOX0NNUFRfVFRMUyc+PC9sYWJlbD5cbjxhIGhyZWY9J2h0dHBzOi8vZ2l0aHViLmNvbS9QYXJ0aWNsZUNvcmUvUGFydGljbGUvd2lraS9GZWF0dXJlcyNmZWVkX3RpdGxlcycgZGF0YS1wPSd0dGx8RlRSX0RFU0MnIHRhcmdldD0nZmVhdHVyZXMnPj88L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxpbnB1dCBpZD0nR0VOX0JMVUVfR0xPVycgdHlwZT0nY2hlY2tib3gnPjwvaW5wdXQ+PGxhYmVsIGZvcj0nR0VOX0JMVUVfR0xPVycgZGF0YS1wPSd0bmR8R0VOX0JMVUVfR0xPVyc+PC9sYWJlbD5cbjxhIGhyZWY9J2h0dHBzOi8vZ2l0aHViLmNvbS9QYXJ0aWNsZUNvcmUvUGFydGljbGUvd2lraS9GZWF0dXJlcyNibHVlX2dsb3cnIGRhdGEtcD0ndHRsfEZUUl9ERVNDJyB0YXJnZXQ9J2ZlYXR1cmVzJz4/PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj48aW5wdXQgaWQ9J0dFTl9ISURFX0ZUUicgdHlwZT0nY2hlY2tib3gnPjwvaW5wdXQ+PGxhYmVsIGZvcj0nR0VOX0hJREVfRlRSJyBkYXRhLXA9J3RuZHxHRU5fSElERV9GVFInPjwvbGFiZWw+XG48YSBocmVmPSdodHRwczovL2dpdGh1Yi5jb20vUGFydGljbGVDb3JlL1BhcnRpY2xlL3dpa2kvRmVhdHVyZXMjaGlkZV9mb290ZXInIGRhdGEtcD0ndHRsfEZUUl9ERVNDJyB0YXJnZXQ9J2ZlYXR1cmVzJz4/PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj48aW5wdXQgaWQ9J0dFTl9IREVfUkVDTV9TREJSJyB0eXBlPSdjaGVja2JveCc+PC9pbnB1dD48bGFiZWwgZm9yPSdHRU5fSERFX1JFQ01fU0RCUicgZGF0YS1wPSd0bmR8R0VOX0hERV9SRUNNX1NEQlInPjwvbGFiZWw+XG48YSBocmVmPSdodHRwczovL2dpdGh1Yi5jb20vUGFydGljbGVDb3JlL1BhcnRpY2xlL3dpa2kvRmVhdHVyZXMjaGlkZV9yZWNvbV9zaWRlYmFyJyBkYXRhLXA9J3R0bHxGVFJfREVTQycgdGFyZ2V0PSdmZWF0dXJlcyc+PzwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+PGlucHV0IGlkPSdHRU5fSERFX1NSQ0hfU0RCUicgdHlwZT0nY2hlY2tib3gnPjwvaW5wdXQ+PGxhYmVsIGZvcj0nR0VOX0hERV9TUkNIX1NEQlInIGRhdGEtcD0ndG5kfEdFTl9IREVfU1JDSF9TREJSJz48L2xhYmVsPlxuPGEgaHJlZj0naHR0cHM6Ly9naXRodWIuY29tL1BhcnRpY2xlQ29yZS9QYXJ0aWNsZS93aWtpL0ZlYXR1cmVzI2hpZGVfc2VhcmNoX3NpZGViYXInIGRhdGEtcD0ndHRsfEZUUl9ERVNDJyB0YXJnZXQ9J2ZlYXR1cmVzJz4/PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj48aW5wdXQgaWQ9J0dFTl9IREVfQ0hOX1NEQlInIHR5cGU9J2NoZWNrYm94Jz48L2lucHV0PjxsYWJlbCBmb3I9J0dFTl9IREVfQ0hOX1NEQlInIGRhdGEtcD0ndG5kfEdFTl9IREVfQ0hOX1NEQlInPjwvbGFiZWw+XG48YSBocmVmPSdodHRwczovL2dpdGh1Yi5jb20vUGFydGljbGVDb3JlL1BhcnRpY2xlL3dpa2kvRmVhdHVyZXMjaGlkZV9jaGFubmVsX3NpZGViYXInIGRhdGEtcD0ndHRsfEZUUl9ERVNDJyB0YXJnZXQ9J2ZlYXR1cmVzJz4/PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5gOwogICAgICAgICAgICAgICAgICAgIGlmICh1c2VyX3NldHRpbmdzLkdFTl9MT0NMX0xBTkcgJiYgdXNlcl9zZXR0aW5ncy5sb2NhbExhbmcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGVtcC5jb250ZW50LnF1ZXJ5U2VsZWN0b3IoIi5QLWltcGxhbmciKS5kYXRhc2V0LnAgPSAiR0xCX0xPQ0xfTEFOR19DU1RNIjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNlY3Rpb24gPT09ICJWSUQiKSB7CiAgICAgICAgICAgICAgICAgICAgdGVtcC5pbm5lckhUTUwgPSAvLwogICAgICAgICAgICAgICAgICAgICAgICBgPGRpdiBpZD0nUC1jb250ZW50Jz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J1AtaGVhZGVyJz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSdQLXNhdmUnIGRhdGEtcD0ndG5kfEdMQl9TVkUnPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9J1AtcmVzZXQnIGRhdGEtcD0ndG5kfEdMQl9SU0VUJz48L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSdQLWltcGV4cCB5dHBsdXNfc3ByaXRlJyBkYXRhLXA9J3R0bHxHTEJfSU1QUic+PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0nUC1pbXBsYW5nJyBkYXRhLXA9J3R0bHxHTEJfTE9DTF9MQU5HJnRuZHxMT0NBTEUnPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBkYXRhLXA9J3RuZHxWSURfVFRMJz48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHIgY2xhc3M9J1AtaG9yeic+PC9ocj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBkYXRhLXA9J3RuZHxWSURfUExSJz48L2gzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj48aW5wdXQgaWQ9J1ZJRF9QTFJfQURTJyB0eXBlPSdjaGVja2JveCc+PC9pbnB1dD48bGFiZWwgZm9yPSdWSURfUExSX0FEUycgZGF0YS1wPSd0bmR8VklEX1BMUl9BRFMnPjwvbGFiZWw+XG48YSBocmVmPSdodHRwczovL2dpdGh1Yi5jb20vUGFydGljbGVDb3JlL1BhcnRpY2xlL3dpa2kvRmVhdHVyZXMjdmlkZW9fYWRzJyBkYXRhLXA9J3R0bHxGVFJfREVTQycgdGFyZ2V0PSdmZWF0dXJlcyc+PzwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+PGlucHV0IGlkPSdWSURfU1VCX0FEUycgdHlwZT0nY2hlY2tib3gnPjwvaW5wdXQ+PGxhYmVsIGZvcj0nVklEX1NVQl9BRFMnIGRhdGEtcD0ndG5kfFZJRF9TVUJfQURTJz48L2xhYmVsPlxuPGEgaHJlZj0naHR0cHM6Ly9naXRodWIuY29tL1BhcnRpY2xlQ29yZS9QYXJ0aWNsZS93aWtpL0ZlYXR1cmVzI3N1YnNfYWRzX29uJyBkYXRhLXA9J3R0bHxGVFJfREVTQycgdGFyZ2V0PSdmZWF0dXJlcyc+PzwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+PGlucHV0IGlkPSdWSURfUExSX0FMVklTJyB0eXBlPSdjaGVja2JveCc+PC9pbnB1dD48bGFiZWwgZm9yPSdWSURfUExSX0FMVklTJyBkYXRhLXA9J3RuZHxWSURfUExSX0FMVklTJz48L2xhYmVsPlxuPGEgaHJlZj0naHR0cHM6Ly9naXRodWIuY29tL1BhcnRpY2xlQ29yZS9QYXJ0aWNsZS93aWtpL0ZlYXR1cmVzI2Zsb2F0aW5nX3BsYXllcicgZGF0YS1wPSd0dGx8RlRSX0RFU0MnIHRhcmdldD0nZmVhdHVyZXMnPj88L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxpbnB1dCBpZD0nVklEX1BMUl9BTFZJU19XRFRIJyB0eXBlPSd0ZXh0JyBwbGFjZWhvbGRlcj0nMzUwJyBzaXplPSc2Jz48L2lucHV0PjxsYWJlbCBmb3I9J1ZJRF9QTFJfQUxWSVNfV0RUSCcgZGF0YS1wPSd0bmR8VklEX1BMUl9BTFZJU19XRFRIJz48L2xhYmVsPlxuPGEgaHJlZj0naHR0cHM6Ly9naXRodWIuY29tL1BhcnRpY2xlQ29yZS9QYXJ0aWNsZS93aWtpL0ZlYXR1cmVzI2Zsb2F0aW5nX3BsYXllcl93aWR0aCcgZGF0YS1wPSd0dGx8RlRSX0RFU0MnIHRhcmdldD0nZmVhdHVyZXMnPj88L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxpbnB1dCBpZD0nVklEX1BMUl9BVFBMJyB0eXBlPSdjaGVja2JveCc+PC9pbnB1dD48bGFiZWwgZm9yPSdWSURfUExSX0FUUEwnIGRhdGEtcD0ndG5kfFZJRF9QTFJfQVRQTCc+PC9sYWJlbD5cbjxhIGhyZWY9J2h0dHBzOi8vZ2l0aHViLmNvbS9QYXJ0aWNsZUNvcmUvUGFydGljbGUvd2lraS9GZWF0dXJlcyN2aWRlb19hdXRvcGxheScgZGF0YS1wPSd0dGx8RlRSX0RFU0MnIHRhcmdldD0nZmVhdHVyZXMnPj88L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxpbnB1dCBpZD0nVklEX1BMUl9DQycgdHlwZT0nY2hlY2tib3gnPjwvaW5wdXQ+PGxhYmVsIGZvcj0nVklEX1BMUl9DQycgZGF0YS1wPSd0bmR8VklEX1BMUl9DQyc+PC9sYWJlbD5cbjxhIGhyZWY9J2h0dHBzOi8vZ2l0aHViLmNvbS9QYXJ0aWNsZUNvcmUvUGFydGljbGUvd2lraS9GZWF0dXJlcyNzdWJ0aXRsZXNfb2ZmJyBkYXRhLXA9J3R0bHxGVFJfREVTQycgdGFyZ2V0PSdmZWF0dXJlcyc+PzwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+PGlucHV0IGlkPSdWSURfUExSX0FOVFMnIHR5cGU9J2NoZWNrYm94Jz48L2lucHV0PjxsYWJlbCBmb3I9J1ZJRF9QTFJfQU5UUycgZGF0YS1wPSd0bmR8VklEX1BMUl9BTlRTJz48L2xhYmVsPlxuPGEgaHJlZj0naHR0cHM6Ly9naXRodWIuY29tL1BhcnRpY2xlQ29yZS9QYXJ0aWNsZS93aWtpL0ZlYXR1cmVzI2Fubm90YXRpb25zX29mZicgZGF0YS1wPSd0dGx8RlRSX0RFU0MnIHRhcmdldD0nZmVhdHVyZXMnPj88L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxpbnB1dCBpZD0nVklEX0VORF9TSFJFJyB0eXBlPSdjaGVja2JveCc+PC9pbnB1dD48bGFiZWwgZm9yPSdWSURfRU5EX1NIUkUnIGRhdGEtcD0ndG5kfFZJRF9FTkRfU0hSRSc+PC9sYWJlbD5cbjxhIGhyZWY9J2h0dHBzOi8vZ2l0aHViLmNvbS9QYXJ0aWNsZUNvcmUvUGFydGljbGUvd2lraS9GZWF0dXJlcyNzaGFyZV9wYW5lbF9vZmYnIGRhdGEtcD0ndHRsfEZUUl9ERVNDJyB0YXJnZXQ9J2ZlYXR1cmVzJz4/PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj48aW5wdXQgaWQ9J1ZJRF9QTFJfVk9MX01FTScgdHlwZT0nY2hlY2tib3gnPjwvaW5wdXQ+PGxhYmVsIGZvcj0nVklEX1BMUl9WT0xfTUVNJyBkYXRhLXA9J3RuZHxWSURfUExSX1ZPTF9NRU0nPjwvbGFiZWw+XG48YSBocmVmPSdodHRwczovL2dpdGh1Yi5jb20vUGFydGljbGVDb3JlL1BhcnRpY2xlL3dpa2kvRmVhdHVyZXMjcmVtZW1iZXJfdm9sdW1lJyBkYXRhLXA9J3R0bHxGVFJfREVTQycgdGFyZ2V0PSdmZWF0dXJlcyc+PzwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+PGlucHV0IGlkPSdWSURfUExSX1ZPTF9MRE4nIHR5cGU9J2NoZWNrYm94Jz48L2lucHV0PjxsYWJlbCBmb3I9J1ZJRF9QTFJfVk9MX0xETicgZGF0YS1wPSd0bmR8VklEX1BMUl9WT0xfTEROJz48L2xhYmVsPlxuPGEgaHJlZj0naHR0cHM6Ly9naXRodWIuY29tL1BhcnRpY2xlQ29yZS9QYXJ0aWNsZS93aWtpL0ZlYXR1cmVzI2Rpc2FibGVfbm9ybWFsaXNhdGlvbicgZGF0YS1wPSd0dGx8RlRSX0RFU0MnIHRhcmdldD0nZmVhdHVyZXMnPj88L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxpbnB1dCBpZD0nVklEX1BMUl9BTEFDVCcgdHlwZT0nY2hlY2tib3gnPjwvaW5wdXQ+PGxhYmVsIGZvcj0nVklEX1BMUl9BTEFDVCcgZGF0YS1wPSd0bmR8VklEX1BMUl9BTEFDVCc+PC9sYWJlbD5cbjxhIGhyZWY9J2h0dHBzOi8vZ2l0aHViLmNvbS9QYXJ0aWNsZUNvcmUvUGFydGljbGUvd2lraS9GZWF0dXJlcyNzaG9ydGN1dHNfb24nIGRhdGEtcD0ndHRsfEZUUl9ERVNDJyB0YXJnZXQ9J2ZlYXR1cmVzJz4/PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj48aW5wdXQgaWQ9J1ZJRF9QTFJfU0laRV9NRU0nIHR5cGU9J2NoZWNrYm94Jz48L2lucHV0PjxsYWJlbCBmb3I9J1ZJRF9QTFJfU0laRV9NRU0nIGRhdGEtcD0ndG5kfFZJRF9QTFJfU0laRV9NRU0nPjwvbGFiZWw+XG48YSBocmVmPSdodHRwczovL2dpdGh1Yi5jb20vUGFydGljbGVDb3JlL1BhcnRpY2xlL3dpa2kvRmVhdHVyZXMjcmVtZW1iZXJfbW9kZScgZGF0YS1wPSd0dGx8RlRSX0RFU0MnIHRhcmdldD0nZmVhdHVyZXMnPj88L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxpbnB1dCBpZD0nVklEX1ZPTF9XSEVFTCcgdHlwZT0nY2hlY2tib3gnPjwvaW5wdXQ+PGxhYmVsIGZvcj0nVklEX1ZPTF9XSEVFTCcgZGF0YS1wPSd0bmR8VklEX1ZPTF9XSEVFTCc+PC9sYWJlbD5cbjxhIGhyZWY9J2h0dHBzOi8vZ2l0aHViLmNvbS9QYXJ0aWNsZUNvcmUvUGFydGljbGUvd2lraS9GZWF0dXJlcyN3aGVlbF92b2x1bWUnIGRhdGEtcD0ndHRsfEZUUl9ERVNDJyB0YXJnZXQ9J2ZlYXR1cmVzJz4/PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj48aW5wdXQgaWQ9J1ZJRF9QTFJfSEZSJyB0eXBlPSdjaGVja2JveCc+PC9pbnB1dD48bGFiZWwgZm9yPSdWSURfUExSX0hGUicgZGF0YS1wPSd0bmR8VklEX1BMUl9IRlInPjwvbGFiZWw+XG48YSBocmVmPSdodHRwczovL2dpdGh1Yi5jb20vUGFydGljbGVDb3JlL1BhcnRpY2xlL3dpa2kvRmVhdHVyZXMjaGZyX29mZicgZGF0YS1wPSd0dGx8RlRSX0RFU0MnIHRhcmdldD0nZmVhdHVyZXMnPj88L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxpbnB1dCBpZD0nVklEX1BMUl9IVE1MNScgdHlwZT0nY2hlY2tib3gnPjwvaW5wdXQ+PGxhYmVsIGZvcj0nVklEX1BMUl9IVE1MNScgZGF0YS1wPSd0bmR8VklEX1BMUl9IVE1MNSc+PC9sYWJlbD5cbjxhIGhyZWY9J2h0dHBzOi8vZ2l0aHViLmNvbS9QYXJ0aWNsZUNvcmUvUGFydGljbGUvd2lraS9GZWF0dXJlcyNmb3JjZV9odG1sNScgZGF0YS1wPSd0dGx8RlRSX0RFU0MnIHRhcmdldD0nZmVhdHVyZXMnPj88L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9J1ZJRF9ERkxUX1FMVFknIGRhdGEtcD0ndG5kfFZJRF9ERkxUX1FMVFknPjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nUC1zZWxlY3QnPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPSdWSURfREZMVF9RTFRZJz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9J2F1dG8nIGRhdGEtcD0ndG5kfFZJRF9ERkxUX1FMVFlfQVVUTyc+PC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSdoaWdocmVzJyBkYXRhLXA9J3RuZHxWSURfREZMVF9RTFRZX09SSUcnPjwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0naGQyODgwJyBkYXRhLXA9J3RuZHxWSURfREZMVF9RTFRZXzI4ODAnPjwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0naGQyMTYwJyBkYXRhLXA9J3RuZHxWSURfREZMVF9RTFRZXzIxNjAnPjwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0naGQxNDQwJyBkYXRhLXA9J3RuZHxWSURfREZMVF9RTFRZXzE0NDAnPjwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0naGQxMDgwJyBkYXRhLXA9J3RuZHxWSURfREZMVF9RTFRZXzEwODAnPjwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0naGQ3MjAnIGRhdGEtcD0ndG5kfFZJRF9ERkxUX1FMVFlfNzIwJz48L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9J2xhcmdlJyBkYXRhLXA9J3RuZHxWSURfREZMVF9RTFRZX0xSRyc+PC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSdtZWRpdW0nIGRhdGEtcD0ndG5kfFZJRF9ERkxUX1FMVFlfTURNJz48L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9J3NtYWxsJyBkYXRhLXA9J3RuZHxWSURfREZMVF9RTFRZX1NNTCc+PC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSd0aW55JyBkYXRhLXA9J3RuZHxWSURfREZMVF9RTFRZX1ROWSc+PC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0naHR0cHM6Ly9naXRodWIuY29tL1BhcnRpY2xlQ29yZS9QYXJ0aWNsZS93aWtpL0ZlYXR1cmVzI2RlZmF1bHRfcXVhbGl0eScgZGF0YS1wPSd0dGx8RlRSX0RFU0MnIHRhcmdldD0nZmVhdHVyZXMnPj88L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBkYXRhLXA9J3RuZHxWSURfUExSX0xZVCc+PC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+PGlucHV0IGlkPSdWSURfUExSX0lORk8nIHR5cGU9J2NoZWNrYm94Jz48L2lucHV0PjxsYWJlbCBmb3I9J1ZJRF9QTFJfSU5GTycgZGF0YS1wPSd0bmR8VklEX1BMUl9JTkZPJz48L2xhYmVsPlxuPGEgaHJlZj0naHR0cHM6Ly9naXRodWIuY29tL1BhcnRpY2xlQ29yZS9QYXJ0aWNsZS93aWtpL0ZlYXR1cmVzI2luZm9fYmFyJyBkYXRhLXA9J3R0bHxGVFJfREVTQycgdGFyZ2V0PSdmZWF0dXJlcyc+PzwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+PGlucHV0IGlkPSdWSURfUExSX0RZTl9TSVpFJyB0eXBlPSdjaGVja2JveCc+PC9pbnB1dD48bGFiZWwgZm9yPSdWSURfUExSX0RZTl9TSVpFJyBkYXRhLXA9J3RuZHxWSURfUExSX0RZTl9TSVpFJz48L2xhYmVsPlxuPGEgaHJlZj0naHR0cHM6Ly9naXRodWIuY29tL1BhcnRpY2xlQ29yZS9QYXJ0aWNsZS93aWtpL0ZlYXR1cmVzI2R5bmFtaWNfc2l6ZV9vZmYnIGRhdGEtcD0ndHRsfEZUUl9ERVNDJyB0YXJnZXQ9J2ZlYXR1cmVzJz4/PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj48aW5wdXQgaWQ9J1ZJRF9QTFJfRklUJyB0eXBlPSdjaGVja2JveCc+PC9pbnB1dD48bGFiZWwgZm9yPSdWSURfUExSX0ZJVCcgZGF0YS1wPSd0bmR8VklEX1BMUl9GSVQnPjwvbGFiZWw+XG48YSBocmVmPSdodHRwczovL2dpdGh1Yi5jb20vUGFydGljbGVDb3JlL1BhcnRpY2xlL3dpa2kvRmVhdHVyZXMjZml0X3RvX3BhZ2UnIGRhdGEtcD0ndHRsfEZUUl9ERVNDJyB0YXJnZXQ9J2ZlYXR1cmVzJz4/PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj48aW5wdXQgaWQ9J1ZJRF9QTFJfRklUX1dEVEgnIHR5cGU9J3RleHQnIHBsYWNlaG9sZGVyPScxMjgwcHgnIHNpemU9JzYnPjwvaW5wdXQ+PGxhYmVsIGZvcj0nVklEX1BMUl9GSVRfV0RUSCcgZGF0YS1wPSd0bmR8VklEX1BMUl9GSVRfV0RUSCc+PC9sYWJlbD5cbjxhIGhyZWY9J2h0dHBzOi8vZ2l0aHViLmNvbS9QYXJ0aWNsZUNvcmUvUGFydGljbGUvd2lraS9GZWF0dXJlcyNmaXRfbWF4X3dpZHRoJyBkYXRhLXA9J3R0bHxGVFJfREVTQycgdGFyZ2V0PSdmZWF0dXJlcyc+PzwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBkYXRhLXA9J3RuZHxWSURfUExTVCc+PC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+PGlucHV0IGlkPSdWSURfUExTVF9BVFBMJyB0eXBlPSdjaGVja2JveCc+PC9pbnB1dD48bGFiZWwgZm9yPSdWSURfUExTVF9BVFBMJyBkYXRhLXA9J3RuZHxWSURfUExTVF9BVFBMJz48L2xhYmVsPlxuPGEgaHJlZj0naHR0cHM6Ly9naXRodWIuY29tL1BhcnRpY2xlQ29yZS9QYXJ0aWNsZS93aWtpL0ZlYXR1cmVzI3BsYXlsaXN0X2F1dG9wbGF5JyBkYXRhLXA9J3R0bHxGVFJfREVTQycgdGFyZ2V0PSdmZWF0dXJlcyc+PzwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+PGlucHV0IGlkPSdWSURfUExTVF9SVlJTJyB0eXBlPSdjaGVja2JveCc+PC9pbnB1dD48bGFiZWwgZm9yPSdWSURfUExTVF9SVlJTJyBkYXRhLXA9J3RuZHxWSURfUExTVF9SVlJTJz48L2xhYmVsPlxuPGEgaHJlZj0naHR0cHM6Ly9naXRodWIuY29tL1BhcnRpY2xlQ29yZS9QYXJ0aWNsZS93aWtpL0ZlYXR1cmVzI3BsYXlsaXN0X3JldmVyc2UnIGRhdGEtcD0ndHRsfEZUUl9ERVNDJyB0YXJnZXQ9J2ZlYXR1cmVzJz4/PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGRhdGEtcD0ndG5kfFZJRF9MQVlUJz48L2gzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj48aW5wdXQgaWQ9J1ZJRF9QUE9UX1NaJyB0eXBlPSd0ZXh0JyBwbGFjZWhvbGRlcj0nNTMzJyBzaXplPSc2Jz48L2lucHV0PjxsYWJlbCBmb3I9J1ZJRF9QUE9UX1NaJyBkYXRhLXA9J3RuZHxWSURfUFBPVF9TWic+PC9sYWJlbD5cbjxhIGhyZWY9J2h0dHBzOi8vZ2l0aHViLmNvbS9QYXJ0aWNsZUNvcmUvUGFydGljbGUvd2lraS9GZWF0dXJlcyNwb3BvdXRfc2l6ZScgZGF0YS1wPSd0dGx8RlRSX0RFU0MnIHRhcmdldD0nZmVhdHVyZXMnPj88L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9J1ZJRF9ISURFX0NPTVMnIGRhdGEtcD0ndG5kfFZJRF9ISURFX0NPTVMnPjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nUC1zZWxlY3QnPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPSdWSURfSElERV9DT01TJz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9JzAnIGRhdGEtcD0ndG5kfFZJRF9ISURFX0NPTVNfU0hPVyc+PC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPScxJyBkYXRhLXA9J3RuZHxWSURfSElERV9DT01TX0hJREUnPjwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0nMicgZGF0YS1wPSd0bmR8VklEX0hJREVfQ09NU19SRU0nPjwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9J2h0dHBzOi8vZ2l0aHViLmNvbS9QYXJ0aWNsZUNvcmUvUGFydGljbGUvd2lraS9GZWF0dXJlcyNjb21tZW50cycgZGF0YS1wPSd0dGx8RlRSX0RFU0MnIHRhcmdldD0nZmVhdHVyZXMnPj88L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+PGlucHV0IGlkPSdWSURfVFRMX0NNUFQnIHR5cGU9J2NoZWNrYm94Jz48L2lucHV0PjxsYWJlbCBmb3I9J1ZJRF9UVExfQ01QVCcgZGF0YS1wPSd0bmR8VklEX1RUTF9DTVBUJz48L2xhYmVsPlxuPGEgaHJlZj0naHR0cHM6Ly9naXRodWIuY29tL1BhcnRpY2xlQ29yZS9QYXJ0aWNsZS93aWtpL0ZlYXR1cmVzI3ZpZGVvX3RpdGxlJyBkYXRhLXA9J3R0bHxGVFJfREVTQycgdGFyZ2V0PSdmZWF0dXJlcyc+PzwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+PGlucHV0IGlkPSdWSURfREVTQ19TSFJUJyB0eXBlPSdjaGVja2JveCc+PC9pbnB1dD48bGFiZWwgZm9yPSdWSURfREVTQ19TSFJUJyBkYXRhLXA9J3RuZHxWSURfREVTQ19TSFJUJz48L2xhYmVsPlxuPGEgaHJlZj0naHR0cHM6Ly9naXRodWIuY29tL1BhcnRpY2xlQ29yZS9QYXJ0aWNsZS93aWtpL0ZlYXR1cmVzI2xhYmVsbGVzc19idXR0b25zJyBkYXRhLXA9J3R0bHxGVFJfREVTQycgdGFyZ2V0PSdmZWF0dXJlcyc+PzwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+PGlucHV0IGlkPSdWSURfVklEX0NOVCcgdHlwZT0nY2hlY2tib3gnPjwvaW5wdXQ+PGxhYmVsIGZvcj0nVklEX1ZJRF9DTlQnIGRhdGEtcD0ndG5kfFZJRF9WSURfQ05UJz48L2xhYmVsPlxuPGEgaHJlZj0naHR0cHM6Ly9naXRodWIuY29tL1BhcnRpY2xlQ29yZS9QYXJ0aWNsZS93aWtpL0ZlYXR1cmVzI3VwbG9hZF9jb3VudGVyJyBkYXRhLXA9J3R0bHxGVFJfREVTQycgdGFyZ2V0PSdmZWF0dXJlcyc+PzwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+PGlucHV0IGlkPSdWSURfUE9TVF9USU1FJyB0eXBlPSdjaGVja2JveCc+PC9pbnB1dD48bGFiZWwgZm9yPSdWSURfUE9TVF9USU1FJyBkYXRhLXA9J3RuZHxWSURfUE9TVF9USU1FJz48L2xhYmVsPlxuPGEgaHJlZj0naHR0cHM6Ly9naXRodWIuY29tL1BhcnRpY2xlQ29yZS9QYXJ0aWNsZS93aWtpL0ZlYXR1cmVzI3JlbGF0aXZlX3VwbG9hZF90aW1lJyBkYXRhLXA9J3R0bHxGVFJfREVTQycgdGFyZ2V0PSdmZWF0dXJlcyc+PzwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+PGlucHV0IGlkPSdWSURfSElERV9ERVRMUycgdHlwZT0nY2hlY2tib3gnPjwvaW5wdXQ+PGxhYmVsIGZvcj0nVklEX0hJREVfREVUTFMnIGRhdGEtcD0ndG5kfFZJRF9ISURFX0RFVExTJz48L2xhYmVsPlxuPGEgaHJlZj0naHR0cHM6Ly9naXRodWIuY29tL1BhcnRpY2xlQ29yZS9QYXJ0aWNsZS93aWtpL0ZlYXR1cmVzI2hpZGVfdmlkZW9fZGV0YWlscycgZGF0YS1wPSd0dGx8RlRSX0RFU0MnIHRhcmdldD0nZmVhdHVyZXMnPj88L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxpbnB1dCBpZD0nVklEX0xBWVRfQVVUT19QTkwnIHR5cGU9J2NoZWNrYm94Jz48L2lucHV0PjxsYWJlbCBmb3I9J1ZJRF9MQVlUX0FVVE9fUE5MJyBkYXRhLXA9J3RuZHxWSURfTEFZVF9BVVRPX1BOTCc+PC9sYWJlbD5cbjxhIGhyZWY9J2h0dHBzOi8vZ2l0aHViLmNvbS9QYXJ0aWNsZUNvcmUvUGFydGljbGUvd2lraS9GZWF0dXJlcyNleHBhbmRfZGVzY3JpcHRpb24nIGRhdGEtcD0ndHRsfEZUUl9ERVNDJyB0YXJnZXQ9J2ZlYXR1cmVzJz4/PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5gOwogICAgICAgICAgICAgICAgICAgIGlmICh1c2VyX3NldHRpbmdzLkdFTl9MT0NMX0xBTkcgJiYgdXNlcl9zZXR0aW5ncy5sb2NhbExhbmcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGVtcC5jb250ZW50LnF1ZXJ5U2VsZWN0b3IoIi5QLWltcGxhbmciKS5kYXRhc2V0LnAgPSAiR0xCX0xPQ0xfTEFOR19DU1RNIjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNlY3Rpb24gPT09ICJCTEsiKSB7CiAgICAgICAgICAgICAgICAgICAgdGVtcC5pbm5lckhUTUwgPSAvLwogICAgICAgICAgICAgICAgICAgICAgICBgPGRpdiBpZD0nUC1jb250ZW50Jz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J1AtaGVhZGVyJz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSdQLXNhdmUnIGRhdGEtcD0ndG5kfEdMQl9TVkUnPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9J1AtcmVzZXQnIGRhdGEtcD0ndG5kfEdMQl9SU0VUJz48L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSdQLWltcGV4cCB5dHBsdXNfc3ByaXRlJyBkYXRhLXA9J3R0bHxHTEJfSU1QUic+PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0nUC1pbXBsYW5nJyBkYXRhLXA9J3R0bHxHTEJfTE9DTF9MQU5HJnRuZHxMT0NBTEUnPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBkYXRhLXA9J3RuZHxCTEtfVFRMJz48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHIgY2xhc3M9J1AtaG9yeic+PC9ocj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBkYXRhLXA9J3RuZHxCTEtfQkxLJz48L2gzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj48aW5wdXQgaWQ9J0JMS19PTicgdHlwZT0nY2hlY2tib3gnPjwvaW5wdXQ+PGxhYmVsIGZvcj0nQkxLX09OJyBkYXRhLXA9J3RuZHxCTEtfT04nPjwvbGFiZWw+XG48YSBocmVmPSdodHRwczovL2dpdGh1Yi5jb20vUGFydGljbGVDb3JlL1BhcnRpY2xlL3dpa2kvRmVhdHVyZXMjYmxhY2tsaXN0X29uJyBkYXRhLXA9J3R0bHxGVFJfREVTQycgdGFyZ2V0PSdmZWF0dXJlcyc+PzwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9J2JsYWNrbGlzdCc+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0nYmxhY2tsaXN0LWNvbnRyb2xzJz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0nYmxhY2tsaXN0LWVkaXQnIGNsYXNzPSd5dC11aXgtYnV0dG9uIHl0LXVpeC1zZXNzaW9ubGluayB5dC11aXgtYnV0dG9uLWRlZmF1bHQgeXQtdWl4LWJ1dHRvbi1zaXplLWRlZmF1bHQnPjxzcGFuIGNsYXNzPSd5dC11aXgtYnV0dG9uLWNvbnRlbnQnIGRhdGEtcD0ndG5kfEJMQ0tfRURJVCc+PC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPSdibGFja2xpc3Qtc2F2ZScgY2xhc3M9J3l0LXVpeC1idXR0b24geXQtdWl4LXNlc3Npb25saW5rIHl0LXVpeC1idXR0b24tZGVmYXVsdCB5dC11aXgtYnV0dG9uLXNpemUtZGVmYXVsdCc+PHNwYW4gY2xhc3M9J3l0LXVpeC1idXR0b24tY29udGVudCcgZGF0YS1wPSd0bmR8QkxDS19TQVZFJz48L3NwYW4+PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gaWQ9J2JsYWNrbGlzdC1jbG9zZScgY2xhc3M9J3l0LXVpeC1idXR0b24geXQtdWl4LXNlc3Npb25saW5rIHl0LXVpeC1idXR0b24tZGVmYXVsdCB5dC11aXgtYnV0dG9uLXNpemUtZGVmYXVsdCc+PHNwYW4gY2xhc3M9J3l0LXVpeC1idXR0b24tY29udGVudCcgZGF0YS1wPSd0bmR8QkxDS19DTFNFJz48L3NwYW4+PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIGlkPSdibGFja2xpc3QtZWRpdC1saXN0Jz48L3RleHRhcmVhPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnI+PC9icj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+YDsKICAgICAgICAgICAgICAgICAgICBpZiAodXNlcl9zZXR0aW5ncy5HRU5fTE9DTF9MQU5HICYmIHVzZXJfc2V0dGluZ3MubG9jYWxMYW5nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXAuY29udGVudC5xdWVyeVNlbGVjdG9yKCIuUC1pbXBsYW5nIikuZGF0YXNldC5wID0gInR0bHxHTEJfTE9DTF9MQU5HJnRuZHxHTEJfTE9DTF9MQU5HX0NTVE0iOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VjdGlvbiA9PT0gIkFCVCIpIHsKICAgICAgICAgICAgICAgICAgICB0ZW1wLmlubmVySFRNTCA9IC8vCiAgICAgICAgICAgICAgICAgICAgICAgIGA8ZGl2IGlkPSdQLWNvbnRlbnQnPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nUC1oZWFkZXInPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBkYXRhLXA9J3RuZHxBQlRfVFRMJz48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHIgY2xhc3M9J1AtaG9yeic+PC9ocj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBkYXRhLXA9J3RuZHxBQlRfVEhLUyc+PC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+PGEgdGFyZ2V0PSdfYmxhbmsnIGhyZWY9J2h0dHBzOi8vZ2l0aHViLmNvbS9ZZVBwSGEnPkplcHBlIFJ1bmUgTW9ydGVuc2VuPC9hPjxzcGFuIGRhdGEtcD0ndG5kfEFCVF9USEtTX1lFUFBIQSc+PC9zcGFuPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj48YSB0YXJnZXQ9J19ibGFuaycgaHJlZj0naHR0cDovL3d3dy5ncmVhc2VzcG90Lm5ldC8nPkdyZWFzZW1vbmtleTwvYT4gKyA8YSBocmVmPSdodHRwOi8vdGFtcGVybW9ua2V5Lm5ldC8nPlRhbXBlcm1vbmtleTwvYT48c3BhbiBkYXRhLXA9J3RuZHxBQlRfVEhLU19VU0VSU0NSSVBUJz48L3NwYW4+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxhIHRhcmdldD0nX2JsYW5rJyBocmVmPSdodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vJz5TdGFjayBPdmVyZmxvdzwvYT48c3BhbiBkYXRhLXA9J3RuZHxBQlRfVEhLU19TVEFDS09WJz48L3NwYW4+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgZGF0YS1wPSd0bmR8QUJUX0lORk8nPjwvaDM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxhIHRhcmdldD0nX2JsYW5rJyBocmVmPSdodHRwczovL2dpdGh1Yi5jb20vUGFydGljbGVDb3JlL1BhcnRpY2xlLyc+R2l0SHViPC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj48YSB0YXJnZXQ9J19ibGFuaycgaHJlZj0naHR0cHM6Ly9ncmVhc3lmb3JrLm9yZy9lbi91c2Vycy84MjIzLXBhcnRpY2xlY29yZSc+R3JlYXN5IEZvcms8L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxhIHRhcmdldD0nX2JsYW5rJyBocmVmPSdodHRwOi8vb3BlbnVzZXJqcy5vcmcvc2NyaXB0cy9QYXJ0aWNsZUNvcmUvJz5PcGVuVXNlckpTPC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5gOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHNldExvY2FsZShnZXRWYWx1ZXModGVtcC5jb250ZW50KSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gZXhwb3J0U2V0dGluZ3ModGFyZ2V0KSB7CiAgICAgICAgICAgICAgICB2YXIgZXhwQ29udDsKICAgICAgICAgICAgICAgIGlmICh0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCJQLWltcGV4cCIpIHx8IHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoIlAtaW1wbGFuZyIpKSB7CiAgICAgICAgICAgICAgICAgICAgZXhwQ29udCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJleHAtY29udCIpOwogICAgICAgICAgICAgICAgICAgIGlmIChleHBDb250KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGV4cENvbnQub3V0ZXJIVE1MID0gIiI7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZXhwQ29udCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInRlbXBsYXRlIik7CiAgICAgICAgICAgICAgICAgICAgZXhwQ29udC5pbm5lckhUTUwgPSAvLwogICAgICAgICAgICAgICAgICAgICAgICBgPGRpdiBpZD0nZXhwLWNvbnQnPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPSdpbXBsYW5nLXNhdmUnIGNsYXNzPSd5dC11aXgtYnV0dG9uIHl0LXVpeC1zZXNzaW9ubGluayB5dC11aXgtYnV0dG9uLWRlZmF1bHQgeXQtdWl4LWJ1dHRvbi1zaXplLWRlZmF1bHQnPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSd5dC11aXgtYnV0dG9uLWNvbnRlbnQnIGRhdGEtcD0ndG5kfEdMQl9JTVBSX1NBVkUnPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgaWQ9J2ltcGV4cC1saXN0Jz48L3RleHRhcmVhPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5gOwogICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCJQLWltcGV4cCIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGV4cENvbnQuY29udGVudC5xdWVyeVNlbGVjdG9yKCIjaW1wbGFuZy1zYXZlIikuaWQgPSAiaW1wZXhwLXNhdmUiOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBleHBDb250ID0gc2V0TG9jYWxlKGV4cENvbnQuY29udGVudCkuZmlyc3RDaGlsZDsKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiUC1jb250ZW50IikuYXBwZW5kQ2hpbGQoZXhwQ29udCk7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImltcGV4cC1saXN0IikudmFsdWUgPSBKU09OLnN0cmluZ2lmeSgodGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygiUC1pbXBleHAiKSAmJiB1c2VyX3NldHRpbmdzKSB8fCB1c2VyX3NldHRpbmdzLmxvY2FsTGFuZyB8fCBsYW5ndWFnZSwgdW5kZWZpbmVkLCAyKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0LmlkID09PSAiaW1wZXhwLXNhdmUiIHx8IHRhcmdldC5pZCA9PT0gImltcGxhbmctc2F2ZSIpIHsKICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0LmlkID09PSAiaW1wbGFuZy1zYXZlIikgewogICAgICAgICAgICAgICAgICAgICAgICBzZXQoImxvY2FsTGFuZyIsIEpTT04ucGFyc2UoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImltcGV4cC1saXN0IikudmFsdWUpKTsKICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNldCgidXNlcl9zZXR0aW5ncyIsIEpTT04ucGFyc2UoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImltcGV4cC1saXN0IikudmFsdWUpKTsKICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3NNZW51LnNldHRpbmdzQnV0dG9uLmNsaWNrKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzTWVudS5zZXR0aW5nc0J1dHRvbi5jbGljaygpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBzZXRCbGFja0xpc3QodGFyZ2V0KSB7CiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0LmlkID09PSAiYmxhY2tsaXN0LWVkaXQiKSB7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImJsYWNrbGlzdCIpLmNsYXNzTGlzdC5hZGQoImVkaXQiKTsKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYmxhY2tsaXN0LWVkaXQtbGlzdCIpLnZhbHVlID0gSlNPTi5zdHJpbmdpZnkodXNlcl9zZXR0aW5ncy5ibGFja2xpc3QsIHVuZGVmaW5lZCwgMik7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRhcmdldC5pZCA9PT0gImJsYWNrbGlzdC1zYXZlIikgewogICAgICAgICAgICAgICAgICAgIHNldCgiYmxhY2tsaXN0IiwgSlNPTi5wYXJzZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYmxhY2tsaXN0LWVkaXQtbGlzdCIpLnZhbHVlKSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRhcmdldC5pZCA9PT0gImJsYWNrbGlzdC1jbG9zZSIpIHsKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiQkxLIikuY2xpY2soKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBkZWxCbGFja0xpc3QoZXZlbnQpIHsKICAgICAgICAgICAgICAgIHZhciBuZXdLZXkgPSB1c2VyX3NldHRpbmdzLmJsYWNrbGlzdDsKICAgICAgICAgICAgICAgIGRlbGV0ZSBuZXdLZXlbZXZlbnQudGFyZ2V0Lm5leHRTaWJsaW5nLmhyZWYuc3BsaXQoIi9jaGFubmVsLyIpWzFdXTsKICAgICAgICAgICAgICAgIGV2ZW50LnRhcmdldC5wYXJlbnROb2RlLm91dGVySFRNTCA9ICIiOwogICAgICAgICAgICAgICAgc2V0KCJibGFja2xpc3QiLCBuZXdLZXkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIGRlbE5vdGlmaWNhdGlvbigpIHsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgic2hvdy1ndWlkZS1idXR0b24tbm90aWZpY2F0aW9uIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gc2F2ZVNldHRpbmdzKHNhbHQpIHsKICAgICAgICAgICAgICAgIHZhciBpLCB2YWx1ZSwgbm90aWZpY2F0aW9uLCBuYXZJZCwgdXNlclNldHMsIHNhdmVkU2V0czsKICAgICAgICAgICAgICAgIG5hdklkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiLnNlbGVjdGVkIikuaWQ7CiAgICAgICAgICAgICAgICB1c2VyU2V0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJQLWNvbnRlbnQiKS5xdWVyeVNlbGVjdG9yQWxsKCJbaWRePSciICsgbmF2SWQgKyAiJ10iKTsKICAgICAgICAgICAgICAgIHNhdmVkU2V0cyA9IHVzZXJfc2V0dGluZ3M7CiAgICAgICAgICAgICAgICBpID0gdXNlclNldHMubGVuZ3RoOwogICAgICAgICAgICAgICAgd2hpbGUgKGktLSkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlID0gKHVzZXJTZXRzW2ldLmNoZWNrZWQgJiYgKHVzZXJTZXRzW2ldLnZhbHVlID09PSAib24iIHx8IHVzZXJTZXRzW2ldLnZhbHVlKSkgfHwgKHVzZXJTZXRzW2ldLmxlbmd0aCAmJiB1c2VyU2V0c1tpXS52YWx1ZSkgfHwgKHVzZXJTZXRzW2ldLmdldEF0dHJpYnV0ZSgidHlwZSIpID09PSAidGV4dCIgJiYgdXNlclNldHNbaV0udmFsdWUpOwogICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkgewogICAgICAgICAgICAgICAgICAgICAgICBzYXZlZFNldHNbdXNlclNldHNbaV0ubmFtZSB8fCB1c2VyU2V0c1tpXS5pZF0gPSB2YWx1ZTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF2YWx1ZSAmJiB1c2VyU2V0c1tpXS50eXBlICE9PSAicmFkaW8iKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVkU2V0c1t1c2VyU2V0c1tpXS5pZF0gPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzZXQoInVzZXJfc2V0dGluZ3MiLCBzYXZlZFNldHMpOwogICAgICAgICAgICAgICAgY3VzdG9tU3R5bGVzKCk7CiAgICAgICAgICAgICAgICBpZiAoIXNhbHQpIHsKICAgICAgICAgICAgICAgICAgICBub3RpZmljYXRpb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYXBwYmFyLW1haW4tZ3VpZGUtbm90aWZpY2F0aW9uLWNvbnRhaW5lciIpOwogICAgICAgICAgICAgICAgICAgIGlmIChub3RpZmljYXRpb24uY2hpbGROb2Rlcy5sZW5ndGggPCAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvbi5vdXRlckhUTUwgPSAiIjsKICAgICAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgidGVtcGxhdGUiKTsKICAgICAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uLmlubmVySFRNTCA9IC8vCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgPGRpdiBpZD0nYXBwYmFyLW1haW4tZ3VpZGUtbm90aWZpY2F0aW9uLWNvbnRhaW5lcic+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nYXBwYmFyLWd1aWRlLW5vdGlmaWNhdGlvbicgcm9sZT0nYWxlcnQnPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nYXBwYmFyLWd1aWRlLW5vdGlmaWNhdGlvbi1jb250ZW50LXdyYXBwZXIgeXQtdmFsaWduJz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdhcHBiYXItZ3VpZGUtbm90aWZpY2F0aW9uLWljb24geXQtc3ByaXRlJz48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nYXBwYmFyLWd1aWRlLW5vdGlmaWNhdGlvbi10ZXh0LWNvbnRlbnQnPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+YDsKICAgICAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uID0gc2V0TG9jYWxlKG5vdGlmaWNhdGlvbi5jb250ZW50KS5maXJzdENoaWxkOwogICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIueXQtbWFzdGhlYWQtbG9nby1jb250YWluZXIiKS5hcHBlbmRDaGlsZChub3RpZmljYXRpb24pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIuYXBwYmFyLWd1aWRlLW5vdGlmaWNhdGlvbi10ZXh0LWNvbnRlbnQiKS50ZXh0Q29udGVudCA9IGxhbmcoIkdMQl9TVkVfU0VUUyIpOwogICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCgic2hvdy1ndWlkZS1idXR0b24tbm90aWZpY2F0aW9uIik7CiAgICAgICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoZGVsTm90aWZpY2F0aW9uLCAyMDAwKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBuYXZpZ2F0ZVNldHRpbmdzKGV2ZW50KSB7CiAgICAgICAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygiUC1zYXZlIikpIHsKICAgICAgICAgICAgICAgICAgICBzYXZlU2V0dGluZ3MoKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygiUC1yZXNldCIpKSB7CiAgICAgICAgICAgICAgICAgICAgc2V0KCJ1c2VyX3NldHRpbmdzIiwgZGVmYXVsdF9zZXR0aW5ncyk7CiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3NNZW51LnNldHRpbmdzQnV0dG9uLmNsaWNrKCk7CiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3NNZW51LnNldHRpbmdzQnV0dG9uLmNsaWNrKCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoImNsb3NlIikpIHsKICAgICAgICAgICAgICAgICAgICBkZWxCbGFja0xpc3QoZXZlbnQpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCJQLWltcGV4cCIpIHx8IGV2ZW50LnRhcmdldC5pZCA9PT0gImltcGV4cC1zYXZlIiB8fCBldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCJQLWltcGxhbmciKSB8fCBldmVudC50YXJnZXQuaWQgPT09ICJpbXBsYW5nLXNhdmUiKSB7CiAgICAgICAgICAgICAgICAgICAgZXhwb3J0U2V0dGluZ3MoZXZlbnQudGFyZ2V0KTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQudGFyZ2V0LmlkID09PSAiYmxhY2tsaXN0LWVkaXQiIHx8IGV2ZW50LnRhcmdldC5pZCA9PT0gImJsYWNrbGlzdC1zYXZlIiB8fCBldmVudC50YXJnZXQuaWQgPT09ICJibGFja2xpc3QtY2xvc2UiKSB7CiAgICAgICAgICAgICAgICAgICAgc2V0QmxhY2tMaXN0KGV2ZW50LnRhcmdldCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LnRhcmdldC5pZCA9PT0gIlAtY29udGFpbmVyIiB8fCBldmVudC50YXJnZXQuaWQgPT09ICJQLXNldHRpbmdzIikgewogICAgICAgICAgICAgICAgICAgIGV2ZW50ID0gKGV2ZW50LnRhcmdldC5pZCA9PT0gIlAtc2V0dGluZ3MiKSA/IGV2ZW50LnRhcmdldCA6IGV2ZW50LnRhcmdldC5wYXJlbnROb2RlOwogICAgICAgICAgICAgICAgICAgIGV2ZW50Lm91dGVySFRNTCA9ICIiOwogICAgICAgICAgICAgICAgICAgIGRvY3VtZW50Wyh3aW5kb3cuY2hyb21lICYmICJib2R5IikgfHwgImRvY3VtZW50RWxlbWVudCJdLnNjcm9sbFRvcCA9IDA7CiAgICAgICAgICAgICAgICAgICAgd2luZG93LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCJyZXNpemUiKSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LnRhcmdldC5pZCAhPT0gIkROVCIgJiYgZXZlbnQudGFyZ2V0LnRhZ05hbWUgIT09ICJBIiAmJiBldmVudC50YXJnZXQucGFyZW50Tm9kZS5pZCA9PT0gIlAtc2lkZWJhci1saXN0IikgewogICAgICAgICAgICAgICAgICAgIHNhdmVTZXR0aW5ncygibm8tbm90aWZpY2F0aW9uIik7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIlAtY29udGVudCIpLm91dGVySFRNTCA9ICIiOwogICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJQLWNvbnRhaW5lciIpLmFwcGVuZENoaWxkKGdldE1lbnUoZXZlbnQudGFyZ2V0LmlkKSk7CiAgICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcigiLnNlbGVjdGVkIikucmVtb3ZlQXR0cmlidXRlKCJjbGFzcyIpOwogICAgICAgICAgICAgICAgICAgIGV2ZW50LnRhcmdldC5jbGFzc05hbWUgPSAic2VsZWN0ZWQiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIHNldHRpbmdzVGVtcGxhdGUoZXZlbnQpIHsKICAgICAgICAgICAgICAgIHZhciBwV3JhcHBlcjsKICAgICAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQuaWQgPT09ICJQIiAmJiBldmVudC50YXJnZXQudGFnTmFtZSAhPT0gIklOUFVUIikgewogICAgICAgICAgICAgICAgICAgIHBXcmFwcGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIlAtc2V0dGluZ3MiKTsKICAgICAgICAgICAgICAgICAgICBpZiAocFdyYXBwZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcFdyYXBwZXIub3V0ZXJIVE1MID0gIiI7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoImZsb2F0ZXIiKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoImZsb2F0ZXIiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtb3ZpZV9wbGF5ZXIiKS5yZW1vdmVBdHRyaWJ1dGUoInN0eWxlIik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcFdyYXBwZXIgPSBnZXRNZW51KCJNRU4iKTsKICAgICAgICAgICAgICAgICAgICAgICAgcFdyYXBwZXIucXVlcnlTZWxlY3RvcigiI1AtY29udGFpbmVyIikuYXBwZW5kQ2hpbGQoZ2V0TWVudSgiR0VOIikpOwogICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYm9keS1jb250YWluZXIiKS5pbnNlcnRCZWZvcmUocFdyYXBwZXIsIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJwYWdlLWNvbnRhaW5lciIpKTsKICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLCBuYXZpZ2F0ZVNldHRpbmdzKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnRbKHdpbmRvdy5jaHJvbWUgJiYgImJvZHkiKSB8fCAiZG9jdW1lbnRFbGVtZW50Il0uc2Nyb2xsVG9wID0gMDsKICAgICAgICAgICAgICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoInJlc2l6ZSIpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBmaXJzdFRpbWUoZXZlbnQpIHsKICAgICAgICAgICAgICAgIGlmIChldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LnBhcmVudE5vZGUgJiYgZXZlbnQudGFyZ2V0LnBhcmVudE5vZGUuY2xhc3NOYW1lID09PSAicGFyX2Nsb3Nld2xjbSIpIHsKICAgICAgICAgICAgICAgICAgICBzZXQoImZpcnN0VGltZSIsIGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCJjbGljayIsIGZpcnN0VGltZSk7CiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3NNZW51LndlbGNvbWUuc3R5bGUuZGlzcGxheSA9ICJub25lIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBzZXR0aW5nc01lbnUoKSB7CiAgICAgICAgICAgICAgICB2YXIgbm90aWZfYnV0dG9uLCBzZXR0aW5nc19idXR0b24sIHdlbGNvbWVfbWVzc2FnZTsKICAgICAgICAgICAgICAgIGlmIChzZXR0aW5nc01lbnUuc2V0dGluZ3NCdXR0b24pIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBub3RpZl9idXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIubm90aWZpY2F0aW9ucy1jb250YWluZXIiKTsKICAgICAgICAgICAgICAgIHNldHRpbmdzX2J1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiN5dC1tYXN0aGVhZC11c2VyLCAjeXQtbWFzdGhlYWQtc2lnbmluIik7CiAgICAgICAgICAgICAgICBpZiAoc2V0dGluZ3NfYnV0dG9uKSB7CiAgICAgICAgICAgICAgICAgICAgd2VsY29tZV9tZXNzYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgidGVtcGxhdGUiKTsKICAgICAgICAgICAgICAgICAgICB3ZWxjb21lX21lc3NhZ2UuaW5uZXJIVE1MID0gLy8KICAgICAgICAgICAgICAgICAgICAgICAgYDxkaXYgaWQ9J1BzZXR0aW5ncycgc3R5bGU9J2Rpc3BsYXk6aW5saW5lLWJsb2NrO3Bvc2l0aW9uOnJlbGF0aXZlJz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0nUCcgY2xhc3M9J3l0cGx1c19zcHJpdGUnIGRhdGEtcD0ndHRsfFlUU0VUUyc+PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9J3BhcnRfd2VsY29tZScgc3R5bGU9J2Rpc3BsYXk6bm9uZTttYXJnaW4tbGVmdDotMjIwcHg7dG9wOjM4cHg7cmlnaHQ6MCc+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLXA9J3RuZHxXTENNJz48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnI+PC9icj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtcD0ndG5kfFdMQ01TVFJUJz48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnI+PC9icj48YnI+PC9icj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtcD0ndG5kfFdMQ01GVFJTJyBzdHlsZT0nY29sb3I6I0ZGRjsnIGhyZWY9J2h0dHBzOi8vZ2l0aHViLmNvbS9QYXJ0aWNsZUNvcmUvUGFydGljbGUvd2lraS9GZWF0dXJlcycgdGFyZ2V0PSdfYmxhbmsnPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3Bhcl9jbG9zZXdsY20nPjxzcGFuPsOXPC9zcGFuPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+YDsKICAgICAgICAgICAgICAgICAgICB3ZWxjb21lX21lc3NhZ2UgPSBzZXRMb2NhbGUod2VsY29tZV9tZXNzYWdlLmNvbnRlbnQpOwogICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIiwgc2V0dGluZ3NUZW1wbGF0ZSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKG5vdGlmX2J1dHRvbikgewogICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nc19idXR0b24uaW5zZXJ0QmVmb3JlKHdlbGNvbWVfbWVzc2FnZSwgbm90aWZfYnV0dG9uKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nc19idXR0b24uYXBwZW5kQ2hpbGQod2VsY29tZV9tZXNzYWdlKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3NNZW51LnNldHRpbmdzQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIlAiKTsKICAgICAgICAgICAgICAgICAgICBzZXR0aW5nc01lbnUud2VsY29tZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJwYXJ0X3dlbGNvbWUiKTsKICAgICAgICAgICAgICAgICAgICBpZiAodXNlcl9zZXR0aW5ncy5maXJzdFRpbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3NNZW51LndlbGNvbWUuc3R5bGUuZGlzcGxheSA9ICJibG9jayI7CiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIiwgZmlyc3RUaW1lKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gbW9kQ29tbWVudChvcmlnaW5hbCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbW1lbnRzLCBpc19saXZlOwogICAgICAgICAgICAgICAgICAgIGNvbW1lbnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIndhdGNoLWRpc2N1c3Npb24iKTsKICAgICAgICAgICAgICAgICAgICBpc19saXZlID0gd2luZG93Lnl0cGxheWVyICYmIHdpbmRvdy55dHBsYXllci5jb25maWcgJiYgd2luZG93Lnl0cGxheWVyLmNvbmZpZy5hcmdzICYmIHdpbmRvdy55dHBsYXllci5jb25maWcuYXJncy5saXZlc3RyZWFtOwogICAgICAgICAgICAgICAgICAgIGlmIChhLnNwbGl0KCJjb21tZW50cyIpLmxlbmd0aCA+IDEgJiYgIWlzX2xpdmUgJiYgY29tbWVudHMgJiYgIWNvbW1lbnRzLmxhenlsb2FkICYmIHVzZXJfc2V0dGluZ3MuVklEX0hJREVfQ09NUyA9PT0gIjEiICYmICFjb21tZW50cy5jbGFzc0xpc3QuY29udGFpbnMoInNob3ciKSkgewogICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50cy5sYXp5bG9hZCA9IGFyZ3VtZW50czsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIG1vZFNldENvbmZpZyhvcmlnaW5hbCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIlNIQVJFX09OX1ZJREVPX0VORCIgaW4gYSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5TSEFSRV9PTl9WSURFT19FTkQgPSAhdXNlcl9zZXR0aW5ncy5WSURfRU5EX1NIUkU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCJVTklWRVJTQUxfSE9WRVJDQVJEUyIgaW4gYSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5VTklWRVJTQUxfSE9WRVJDQVJEUyA9ICF1c2VyX3NldHRpbmdzLkdFTl9EU0JfSFZSQzsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBtb2RFbWJlZChvcmlnaW5hbCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXAsIHBsYXllcjsKICAgICAgICAgICAgICAgICAgICBiID0gbW9kQXJncyhiKTsKICAgICAgICAgICAgICAgICAgICB0ZW1wID0gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgICAgICBwbGF5ZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibW92aWVfcGxheWVyIik7CiAgICAgICAgICAgICAgICAgICAgaWYgKHBsYXllcikgewogICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIuc2V0UGxheWJhY2tRdWFsaXR5KHVzZXJfc2V0dGluZ3MuVklEX0RGTFRfUUxUWSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZW1wOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBtb2RBdXRvcGxheShvcmlnaW5hbCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFiIHx8IHVzZXJfc2V0dGluZ3MucGxBcGwgfHwgKCF1c2VyX3NldHRpbmdzLnBsQXBsICYmIGIuZmVhdHVyZSAmJiBiLmZlYXR1cmUgIT09ICJhdXRvcGxheSIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBtb2RBdXRvcGxheUZ1bGxzY3JlZW4ob3JpZ2luYWwpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGhhc19lbmRlZCwgbmV4dF9idXR0b24sIG5leHRfY2xpY2tlZDsKICAgICAgICAgICAgICAgICAgICBoYXNfZW5kZWQgPSBhcGkgJiYgYXBpLmdldEN1cnJlbnRUaW1lICYmIE1hdGgucm91bmQoYXBpLmdldEN1cnJlbnRUaW1lKCkpID49IE1hdGguZmxvb3IoYXBpLmdldER1cmF0aW9uKCkpOwogICAgICAgICAgICAgICAgICAgIG5leHRfY2xpY2tlZCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCJ5dHAtYnV0dG9uLW5leHQiKSB8fCBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygieXRwLW5leHQtYnV0dG9uIik7CiAgICAgICAgICAgICAgICAgICAgaWYgKCF1c2VyX3NldHRpbmdzLnBsQXBsICYmICFuZXh0X2NsaWNrZWQgJiYgaGFzX2VuZGVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRfYnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiLnl0cC1uZXh0LWJ1dHRvbiIpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV4dF9idXR0b24gJiYgbmV4dF9idXR0b24uZ2V0QXR0cmlidXRlKCJhcmlhLWRpc2FibGVkIikgPT09ICJ0cnVlIikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dF9idXR0b24ub25jbGljayA9IGFwaS5uZXh0VmlkZW87CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsIGFwaS5uZXh0VmlkZW8pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dF9idXR0b24uc2V0QXR0cmlidXRlKCJhcmlhLWRpc2FibGVkIiwgImZhbHNlIik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAodXNlcl9zZXR0aW5ncy5wbEFwbCB8fCBuZXh0X2NsaWNrZWQgfHwgIWhhc19lbmRlZCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV4dF9jbGlja2VkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibW92aWVfcGxheWVyIikuZm9jdXMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIGl0ZXJhdGVLZXlzKGtleXMpIHsKICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcGxheWVyX2luc3RhbmNlW2tleXNdID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgIGlmIChwbGF5ZXJfaW5zdGFuY2Vba2V5c10gJiYgcGxheWVyX2luc3RhbmNlW2tleXNdLmhhc05leHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyX2luc3RhbmNlW2tleXNdLmhhc05leHQgPSBtb2RBdXRvcGxheUZ1bGxzY3JlZW4ocGxheWVyX2luc3RhbmNlW2tleXNdLmhhc05leHQpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gbW9kUGxheWVyQ3JlYXRlKG9yaWdpbmFsKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgcGxheWVyOwogICAgICAgICAgICAgICAgICAgIGIgPSBtb2RBcmdzKGIpOwogICAgICAgICAgICAgICAgICAgIGlmIChhLmlkID09PSAidXBzZWxsLXZpZGVvIikgewogICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGEgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllcl9pbnN0YW5jZSA9IG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHBsYXllcl9pbnN0YW5jZSkuc29tZShpdGVyYXRlS2V5cyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtb3ZpZV9wbGF5ZXIiKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF1c2VyX3NldHRpbmdzLlZJRF9QTFJfQVRQTCAmJiBwbGF5ZXIgJiYgKCF3aW5kb3cub3BlbmVyIHx8IHdpbmRvdy5sb2NhdGlvbi5oYXNoID09PSAiIikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cueXRwbGF5ZXIuY29uZmlnLmFyZ3MuZHZtYXAgJiYgIXVzZXJfc2V0dGluZ3MuVklEX1BMUl9BRFMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cueXRwbGF5ZXIuY29uZmlnLmFyZ3Mudm1hcCA9IHdpbmRvdy55dHBsYXllci5jb25maWcuYXJncy5kdm1hcDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci5zdG9wVmlkZW8oKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gbW9kU2Vla1RvKG9yaWdpbmFsKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odGltZSkgewogICAgICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCJmbG9hdGVyIikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWwuY2FsbCh0aGlzLCB0aW1lLCBmYWxzZSk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWwuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIHNldE1vZHMoa2V5cykgewogICAgICAgICAgICAgICAgdmFyIHN0cjsKICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93Ll95dF93d3dba2V5c10gPT09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgICAgICAgICAgICBzdHIgPSBTdHJpbmcod2luZG93Ll95dF93d3dba2V5c10pOwogICAgICAgICAgICAgICAgICAgIGlmIChzdHIuc3BsaXQoInBsYXllci1hZGRlZCIpLmxlbmd0aCA+IDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Ll95dF93d3dba2V5c10gPSBtb2RFbWJlZCh3aW5kb3cuX3l0X3d3d1trZXlzXSk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdHIuc3BsaXQoIndpbmRvdy5zcGYubmF2aWdhdGUiKS5sZW5ndGggPiAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5feXRfd3d3W2tleXNdID0gbW9kQXV0b3BsYXkod2luZG93Ll95dF93d3dba2V5c10pOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RyLnNwbGl0KCIuc2V0KFwiXCIrYSxiLGMsXCIvXCIsZCIpLmxlbmd0aCA+IDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Lnl0cHNldHdpZGUgPSB3aW5kb3cuX3l0X3d3d1trZXlzXTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gc2NyaXB0RXhpdChldmVudCkgewogICAgICAgICAgICAgICAgaWYgKGV2ZW50ICYmIGV2ZW50LnRhcmdldCkgewogICAgICAgICAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKCJuYW1lIikgPT09ICJ3d3cvYmFzZSIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Lnl0LnNldENvbmZpZyA9IG1vZFNldENvbmZpZyh3aW5kb3cueXQuc2V0Q29uZmlnKTsKICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXMod2luZG93Ll95dF93d3cpLmZvckVhY2goc2V0TW9kcyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKCJuYW1lIikgPT09ICJ3d3cvd2F0Y2giKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy55dC53d3cud2F0Y2gucGxheWVyLnNlZWtUbyA9IG1vZFNlZWtUbyh3aW5kb3cueXQud3d3LndhdGNoLnBsYXllci5zZWVrVG8pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZSgibmFtZSIpID09PSAic3BmL3NwZiIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnNwZi5sb2FkID0gbW9kQ29tbWVudCh3aW5kb3cuc3BmLmxvYWQpOwogICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc3BmLnByZWZldGNoID0gZnVuY3Rpb24oKXtyZXR1cm47fTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5uYW1lID09PSAicG9wT3V0IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnNwZi5uYXZpZ2F0ZSA9IGZ1bmN0aW9uKCl7cmV0dXJuO307CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoKGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKCJuYW1lIikgPT09ICJwbGF5ZXIvYmFzZSIpIHx8ICghd2luZG93Lmh0bWw1UGF0Y2hlZCAmJiB3aW5kb3cueXQgJiYgd2luZG93Lnl0LnBsYXllciAmJiB3aW5kb3cueXQucGxheWVyLkFwcGxpY2F0aW9uICYmIHdpbmRvdy55dC5wbGF5ZXIuQXBwbGljYXRpb24uY3JlYXRlKSkgewogICAgICAgICAgICAgICAgICAgIHdpbmRvdy5odG1sNVBhdGNoZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIHdpbmRvdy55dC5wbGF5ZXIuQXBwbGljYXRpb24uY3JlYXRlID0gbW9kUGxheWVyQ3JlYXRlKHdpbmRvdy55dC5wbGF5ZXIuQXBwbGljYXRpb24uY3JlYXRlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBjaGVja0JvdW5kcyhlbG0sIFgsIFkpIHsKICAgICAgICAgICAgICAgIHZhciBzbmFwWCwgc25hcFk7CiAgICAgICAgICAgICAgICBpZiAoWCA+IC0xICYmIFggKyBlbG0ub2Zmc2V0V2lkdGggPCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQub2Zmc2V0V2lkdGgpIHsKICAgICAgICAgICAgICAgICAgICBzbmFwWCA9IGZhbHNlOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChYIDwgMSkgewogICAgICAgICAgICAgICAgICAgIFggPSAwOwogICAgICAgICAgICAgICAgICAgIHNuYXBYID0gLTE7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIFggPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQub2Zmc2V0V2lkdGggLSBlbG0ub2Zmc2V0V2lkdGg7CiAgICAgICAgICAgICAgICAgICAgc25hcFggPSAxOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKFkgPiA1MCAmJiBZICsgZWxtLm9mZnNldEhlaWdodCA8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5vZmZzZXRIZWlnaHQpIHsKICAgICAgICAgICAgICAgICAgICBzbmFwWSA9IGZhbHNlOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChZIDwgNTEpIHsKICAgICAgICAgICAgICAgICAgICBZID0gNTA7CiAgICAgICAgICAgICAgICAgICAgc25hcFkgPSAtMTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgWSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5vZmZzZXRIZWlnaHQgLSBlbG0ub2Zmc2V0SGVpZ2h0OwogICAgICAgICAgICAgICAgICAgIHNuYXBZID0gMTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB7WDogWCArICJweCIsIFk6IFkgKyAicHgiLCBzbmFwWDogc25hcFgsIHNuYXBZOiBzbmFwWX07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gdXBkYXRlUG9zKCkgewogICAgICAgICAgICAgICAgdmFyIHgsIHksIGhlaWdodCwgcGxheWVyLCBib3VuZHM7CiAgICAgICAgICAgICAgICBpZiAoIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoImZsb2F0ZXIiKSkgewogICAgICAgICAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCJyZXNpemUiLCB1cGRhdGVQb3MpOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGhlaWdodCA9IHBhcnNlSW50KHVzZXJfc2V0dGluZ3MuVklEX1BMUl9BTFZJU19XRFRIKSB8fCAzNTA7CiAgICAgICAgICAgICAgICBwbGF5ZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibW92aWVfcGxheWVyIik7CiAgICAgICAgICAgICAgICBib3VuZHMgPSBjaGVja0JvdW5kcyhwbGF5ZXIsIHVzZXJfc2V0dGluZ3MuZmxvYXRlclgsIHVzZXJfc2V0dGluZ3MuZmxvYXRlclkpOwogICAgICAgICAgICAgICAgaGVpZ2h0ID0gKGhlaWdodCA8IDM1MCA/IDM1MCA6IGhlaWdodCkgLyAoMTYgLyA5KTsKICAgICAgICAgICAgICAgIGlmICh1c2VyX3NldHRpbmdzLmZsb2F0ZXJTbmFwWCA9PT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICB4ID0gIjBweCI7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHVzZXJfc2V0dGluZ3MuZmxvYXRlclNuYXBYID09PSAxKSB7CiAgICAgICAgICAgICAgICAgICAgeCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5vZmZzZXRXaWR0aCAtIHBsYXllci5vZmZzZXRXaWR0aCArICJweCI7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHggPSBib3VuZHMuWDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICh1c2VyX3NldHRpbmdzLmZsb2F0ZXJTbmFwWSA9PT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICB5ID0gIjUwcHgiOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICh1c2VyX3NldHRpbmdzLmZsb2F0ZXJTbmFwWSA9PT0gMSkgewogICAgICAgICAgICAgICAgICAgIHkgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQub2Zmc2V0SGVpZ2h0IC0gcGxheWVyLm9mZnNldEhlaWdodCArICJweCI7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHkgPSBib3VuZHMuWTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBsYXllci5zZXRBdHRyaWJ1dGUoInN0eWxlIiwgIndpZHRoOiIgKyAoaGVpZ2h0ICogKDE2IC8gOSkpICsgInB4O2hlaWdodDoiICsgaGVpZ2h0ICsgInB4O2xlZnQ6IiArIHggKyAiO3RvcDoiICsgeSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gZHJhZ0Zsb2F0ZXIoZXZlbnQpIHsKICAgICAgICAgICAgICAgIHZhciBleGNsdWRlZCwgaXNGU2NyZWVuLCBpc0Zsb2F0ZXIsIGJvdW5kcywgcGxheWVyOwogICAgICAgICAgICAgICAgaXNGU2NyZWVuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiLnl0cC1mdWxsc2NyZWVuIik7CiAgICAgICAgICAgICAgICBpc0Zsb2F0ZXIgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCJmbG9hdGVyIik7CiAgICAgICAgICAgICAgICBpZiAoZXZlbnQgJiYgIWlzRlNjcmVlbiAmJiBpc0Zsb2F0ZXIpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gImNsaWNrIiAmJiBldmVudC50YXJnZXQuaWQgPT09ICJwYXJ0X2Zsb2F0ZXJ1aV9zY3JvbGx0b3AiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudFsod2luZG93LmNocm9tZSAmJiAiYm9keSIpIHx8ICJkb2N1bWVudEVsZW1lbnQiXS5zY3JvbGxUb3AgPSAwOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtb3ZpZV9wbGF5ZXIiKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LmJ1dHRvbnMgPT09IDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2x1ZGVkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiLnl0cC1jaHJvbWUtYm90dG9tIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gIm1vdXNlZG93biIgJiYgcGxheWVyLmNvbnRhaW5zKGV2ZW50LnRhcmdldCkgJiYgKCFleGNsdWRlZCB8fCAhZXhjbHVkZWQuY29udGFpbnMoZXZlbnQudGFyZ2V0KSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNlbW92ZSIsIGRyYWdGbG9hdGVyKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsIGRyYWdGbG9hdGVyLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcmFnRmxvYXRlci5vbGRQb3MgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFg6IHBhcnNlSW50KHBsYXllci5zdHlsZS5sZWZ0KSAtIGV2ZW50LmNsaWVudFgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFk6IHBhcnNlSW50KHBsYXllci5zdHlsZS50b3ApIC0gZXZlbnQuY2xpZW50WSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JnWDogZXZlbnQuY2xpZW50WCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JnWTogZXZlbnQuY2xpZW50WQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LnR5cGUgPT09ICJtb3VzZW1vdmUiICYmIChkcmFnRmxvYXRlci5oYXNNb3ZlZCB8fCBNYXRoLmFicyhldmVudC5jbGllbnRYIC0gZHJhZ0Zsb2F0ZXIub2xkUG9zLm9yZ1gpID4gMTAgfHwgTWF0aC5hYnMoZXZlbnQuY2xpZW50WSAtIGRyYWdGbG9hdGVyLm9sZFBvcy5vcmdZKSA+IDEwKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdW5kcyA9IGNoZWNrQm91bmRzKHBsYXllciwgZXZlbnQuY2xpZW50WCArIGRyYWdGbG9hdGVyLm9sZFBvcy5YLCBldmVudC5jbGllbnRZICsgZHJhZ0Zsb2F0ZXIub2xkUG9zLlkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci5zdHlsZS5sZWZ0ID0gYm91bmRzLlg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLnN0eWxlLnRvcCA9IGJvdW5kcy5ZOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdGbG9hdGVyLmhhc01vdmVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcmFnRmxvYXRlci5zbmFwWCA9IGJvdW5kcy5zbmFwWDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcmFnRmxvYXRlci5zbmFwWSA9IGJvdW5kcy5zbmFwWTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuYnV0dG9ucyAhPT0gMSB8fCBldmVudC50eXBlID09PSAiY2xpY2siKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZHJhZ0Zsb2F0ZXIuaGFzTW92ZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdGbG9hdGVyLm9sZFBvcyA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdGbG9hdGVyLmhhc01vdmVkID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcl9zZXR0aW5ncy5mbG9hdGVyWCA9IHBhcnNlSW50KHBsYXllci5zdHlsZS5sZWZ0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyX3NldHRpbmdzLmZsb2F0ZXJZID0gcGFyc2VJbnQocGxheWVyLnN0eWxlLnRvcCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcl9zZXR0aW5ncy5mbG9hdGVyU25hcFggPSBkcmFnRmxvYXRlci5zbmFwWDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyX3NldHRpbmdzLmZsb2F0ZXJTbmFwWSA9IGRyYWdGbG9hdGVyLnNuYXBZOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldCgidXNlcl9zZXR0aW5ncyIsIHVzZXJfc2V0dGluZ3MpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigibW91c2Vtb3ZlIiwgZHJhZ0Zsb2F0ZXIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigiY2xpY2siLCBkcmFnRmxvYXRlciwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gaW5pRmxvYXRlcigpIHsKICAgICAgICAgICAgICAgIHZhciBwbGF5ZXIsIHBsckFwaSwgb3V0X29mX3NpZ2h0LCBpc0Zsb2F0ZXIsIGlzRlNjcmVlbiwgZmxvYXRlclVJLCBzZXR0aW5nc19vcGVuOwogICAgICAgICAgICAgICAgcGxheWVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1vdmllX3BsYXllciIpOwogICAgICAgICAgICAgICAgcGxyQXBpID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInBsYXllci1hcGkiKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsKICAgICAgICAgICAgICAgIHNldHRpbmdzX29wZW4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiUC1zZXR0aW5ncyIpOwogICAgICAgICAgICAgICAgaWYgKHBsYXllcikgewogICAgICAgICAgICAgICAgICAgIG91dF9vZl9zaWdodCA9IHBsckFwaS5ib3R0b20gPCAoKHBsckFwaS5oZWlnaHQgLyAyKSArIDUwKTsKICAgICAgICAgICAgICAgICAgICBpc0Zsb2F0ZXIgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCJmbG9hdGVyIik7CiAgICAgICAgICAgICAgICAgICAgaXNGU2NyZWVuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiLnl0cC1mdWxsc2NyZWVuIik7CiAgICAgICAgICAgICAgICAgICAgZmxvYXRlclVJID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInBhcnRfZmxvYXRlcnVpIik7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFmbG9hdGVyVUkgJiYgIWlzRlNjcmVlbikgewogICAgICAgICAgICAgICAgICAgICAgICBmbG9hdGVyVUkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJ0ZW1wbGF0ZSIpOwogICAgICAgICAgICAgICAgICAgICAgICBmbG9hdGVyVUkuaW5uZXJIVE1MID0gLy8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGA8ZGl2IGlkPSdwYXJ0X2Zsb2F0ZXJ1aSc+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0ncGFydF9mbG9hdGVydWlfc2Nyb2xsdG9wJyBjbGFzcz0neXRwbHVzX3Nwcml0ZScgZGF0YS1wPSd0dGx8VklEX1BMUl9BTFZJU19TQ1JMX1RPUCc+PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5gOwogICAgICAgICAgICAgICAgICAgICAgICBmbG9hdGVyVUkgPSBzZXRMb2NhbGUoZmxvYXRlclVJLmNvbnRlbnQpLmZpcnN0Q2hpbGQ7CiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNlZG93biIsIGRyYWdGbG9hdGVyKTsKICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLmFwcGVuZENoaWxkKGZsb2F0ZXJVSSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmIChvdXRfb2Zfc2lnaHQgJiYgIWlzRmxvYXRlciAmJiAhc2V0dGluZ3Nfb3BlbikgewogICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgiZmxvYXRlciIpOwogICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigicmVzaXplIiwgdXBkYXRlUG9zKTsKICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlUG9zKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgicmVzaXplIikpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKCFvdXRfb2Zfc2lnaHQgfHwgc2V0dGluZ3Nfb3BlbikgJiYgaXNGbG9hdGVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCJmbG9hdGVyIik7CiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCJyZXNpemUiLCB1cGRhdGVQb3MpOwogICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIucmVtb3ZlQXR0cmlidXRlKCJzdHlsZSIpOwogICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoInJlc2l6ZSIpKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gYWx3YXlzVmlzaWJsZSgpIHsKICAgICAgICAgICAgICAgIGlmICh1c2VyX3NldHRpbmdzLlZJRF9QTFJfQUxWSVMpIHsKICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93LmxvY2F0aW9uLnBhdGhuYW1lID09PSAiL3dhdGNoIikgewogICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigic2Nyb2xsIiwgaW5pRmxvYXRlcik7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgIT09ICIvd2F0Y2giKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCJzY3JvbGwiLCBpbmlGbG9hdGVyKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gYWx3YXlzQWN0aXZlKGV2ZW50KSB7CiAgICAgICAgICAgICAgICB2YXIgaSwgbGlzdCwgY2xlYXIsIGxlbmd0aCwgZXZlbnRDbG9uZTsKICAgICAgICAgICAgICAgIGNsZWFyID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lID09ICIvd2F0Y2giICYmIGFwaSAmJiBhcGkgIT09IGV2ZW50LnRhcmdldCAmJiAhYXBpLmNvbnRhaW5zKGV2ZW50LnRhcmdldCkgJiYgIWV2ZW50LmN0cmxLZXkgJiYgIWV2ZW50LnNoaWZ0S2V5ICYmICFldmVudC5hbHRLZXkgJiYgIWV2ZW50Lm1ldGFLZXkgJiYgIWV2ZW50LnRhcmdldC5pc0NvbnRlbnRFZGl0YWJsZTsKICAgICAgICAgICAgICAgIGlmIChjbGVhciAmJiAoKGV2ZW50LndoaWNoID4gNDcgJiYgZXZlbnQud2hpY2ggPCA1OCkgfHwgKGV2ZW50LndoaWNoID4gOTUgJiYgZXZlbnQud2hpY2ggPCAxMDYpIHx8IFsyNywgMzIsIDM1LCAzNiwgMzcsIDM4LCAzOSwgNDAsIDY2LCA2NywgNzksIDg3LCAxODcsIDE4OV0uaW5kZXhPZihldmVudC53aGljaCkgPiAtMSkgJiYgWyJFTUJFRCIsICJJTlBVVCIsICJPQkpFQ1QiLCAiVEVYVEFSRUEiLCAiSUZSQU1FIl0uaW5kZXhPZihkb2N1bWVudC5hY3RpdmVFbGVtZW50LnRhZ05hbWUpIDwgMCkgewogICAgICAgICAgICAgICAgICAgIGV2ZW50Q2xvbmUgPSBuZXcgRXZlbnQoImtleWRvd24iKTsKICAgICAgICAgICAgICAgICAgICBsaXN0ID0gT2JqZWN0LmtleXMoT2JqZWN0LmdldFByb3RvdHlwZU9mKGV2ZW50KSk7CiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoID0gbGlzdC5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50Q2xvbmVbbGlzdFtpXV0gPSBldmVudFtsaXN0W2ldXTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgICAgICBhcGkuZGlzcGF0Y2hFdmVudChldmVudENsb25lKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBwbGF5ZXJTdGF0ZShldmVudCkgewogICAgICAgICAgICAgICAgaWYgKHVzZXJfc2V0dGluZ3MuZnVsbEJycyB8fCB1c2VyX3NldHRpbmdzLmxpZ2h0c091dCkgewogICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3RbKGV2ZW50IDwgNSAmJiBldmVudCA+IDAgJiYgImFkZCIpIHx8ICJyZW1vdmUiXSgodXNlcl9zZXR0aW5ncy5mdWxsQnJzICYmICJwYXJ0X2Z1bGxicm93c2VyIikgfHwgIjAiLCAodXNlcl9zZXR0aW5ncy5saWdodHNPdXQgJiYgInBhcnRfY2luZW1hX21vZGUiKSB8fCAiMCIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgd2luZG93LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCJyZXNpemUiKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gaGFuZGxlQ3VzdG9tcyhldmVudCkgewogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBldmVudCA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICBzZXQoInZvbExldiIsIGV2ZW50LnZvbHVtZSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHNldCgidGhlYXRlck1vZGUiLCBldmVudCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gcGxheWVyUmVhZHkoKSB7CiAgICAgICAgICAgICAgICBhcGkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibW92aWVfcGxheWVyIik7CiAgICAgICAgICAgICAgICBpZiAoYXBpICYmICFkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYzQtcGxheWVyIikpIHsKICAgICAgICAgICAgICAgICAgICBhcGkuYWRkRXZlbnRMaXN0ZW5lcigib25TdGF0ZUNoYW5nZSIsIHBsYXllclN0YXRlKTsKICAgICAgICAgICAgICAgICAgICBpZiAodXNlcl9zZXR0aW5ncy5WSURfUExSX1ZPTF9NRU0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXBpLmFkZEV2ZW50TGlzdGVuZXIoIm9uVm9sdW1lQ2hhbmdlIiwgaGFuZGxlQ3VzdG9tcyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmICh1c2VyX3NldHRpbmdzLlZJRF9QTFJfU0laRV9NRU0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXBpLmFkZEV2ZW50TGlzdGVuZXIoIlNJWkVfQ0xJQ0tFRCIsIGhhbmRsZUN1c3RvbXMpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAodXNlcl9zZXR0aW5ncy5WSURfUExSX1ZPTF9NRU0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXBpLnNldFZvbHVtZSh1c2VyX3NldHRpbmdzLnZvbExldik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmICh1c2VyX3NldHRpbmdzLmxvb3BWaWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcigidmlkZW8iKS5sb29wID0gdXNlcl9zZXR0aW5ncy5sb29wVmlkOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAodXNlcl9zZXR0aW5ncy5WSURfUExSX0FMQUNUKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoImtleWRvd24iLCBhbHdheXNBY3RpdmUpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBnZXRUaHVtYigpIHsKICAgICAgICAgICAgICAgIHZhciBhcmdzLCBiYXNlLCB0aHVtYl91cmw7CiAgICAgICAgICAgICAgICBhcmdzID0gd2luZG93Lnl0cGxheWVyLmNvbmZpZy5hcmdzOwogICAgICAgICAgICAgICAgYmFzZSA9IChhcmdzLml1cmxfd2VicCAmJiAiX3dlYnAiKSB8fCAiIjsKICAgICAgICAgICAgICAgIHRodW1iX3VybCA9IGFyZ3NbIml1cmxtYXhyZXMiICsgYmFzZV0gfHwgYXJnc1siaXVybHNkIiArIGJhc2VdIHx8IGFyZ3NbIml1cmwiICsgYmFzZV07CiAgICAgICAgICAgICAgICB3aW5kb3cub3Blbih0aHVtYl91cmwpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIGhpZGVTY3JlZW5zaG90KGV2ZW50KSB7CiAgICAgICAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LmlkID09PSAiY2xvc2Utc2NyZWVuc2hvdCIpIHsKICAgICAgICAgICAgICAgICAgICBldmVudC50YXJnZXQucGFyZW50Tm9kZS5vdXRlckhUTUwgPSAiIjsKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCJjbGljayIsIGhpZGVTY3JlZW5zaG90KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBnZXRTY3JlZW5zaG90KCkgewogICAgICAgICAgICAgICAgdmFyIHdpZHRoLCBoZWlnaHQsIGFzcGVjdFJhdGlvLCB2aWRlbywgY29udGFpbmVyLCBjYW52YXMsIGNsb3NlLCBjb250ZXh0OwogICAgICAgICAgICAgICAgdmlkZW8gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCJ2aWRlbyIpOwogICAgICAgICAgICAgICAgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInNjcmVlbnNob3QtcmVzdWx0IikgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CiAgICAgICAgICAgICAgICBjYW52YXMgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcigiY2FudmFzIikgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiY2FudmFzIik7CiAgICAgICAgICAgICAgICBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoIjJkIik7CiAgICAgICAgICAgICAgICBhc3BlY3RSYXRpbyA9IHZpZGVvLnZpZGVvV2lkdGggLyB2aWRlby52aWRlb0hlaWdodDsKICAgICAgICAgICAgICAgIHdpZHRoID0gdmlkZW8udmlkZW9XaWR0aDsKICAgICAgICAgICAgICAgIGhlaWdodCA9IHBhcnNlSW50KHdpZHRoIC8gYXNwZWN0UmF0aW8sIDEwKTsKICAgICAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IHdpZHRoOwogICAgICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IGhlaWdodDsKICAgICAgICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKHZpZGVvLCAwLCAwLCB3aWR0aCwgaGVpZ2h0KTsKICAgICAgICAgICAgICAgIGlmICghY29udGFpbmVyLmlkKSB7CiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmlkID0gInNjcmVlbnNob3QtcmVzdWx0IjsKICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY2FudmFzKTsKICAgICAgICAgICAgICAgICAgICBjbG9zZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgICAgICAgICAgICAgICAgIGNsb3NlLmlkID0gImNsb3NlLXNjcmVlbnNob3QiOwogICAgICAgICAgICAgICAgICAgIGNsb3NlLnRleHRDb250ZW50ID0gbGFuZygiQ05TTF9TU19DTFMiKTsKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsIGhpZGVTY3JlZW5zaG90KTsKICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY2xvc2UpOwogICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBleGl0RnVsbEJyb3dzZXIoa2V5KSB7CiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygicGFydF9mdWxsYnJvd3NlciIpICYmIChrZXkua2V5Q29kZSA9PT0gMjcgfHwga2V5LmtleSA9PT0gIkVzY2FwZSIgfHwgKGtleS50YXJnZXQuY2xhc3NOYW1lICYmIGtleS50YXJnZXQuY2xhc3NOYW1lLnNwbGl0KCJ5dHAtc2l6ZSIpLmxlbmd0aCA+IDEpKSkgewogICAgICAgICAgICAgICAgICAgIHRvZ2dsZUZ1bGxCcm93c2VyKGtleSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGtleS50eXBlID09PSAibW91c2Vkb3duIikgewogICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCJrZXlkb3duIiwgZXhpdEZ1bGxCcm93c2VyKTsKICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigibW91c2Vkb3duIiwgZXhpdEZ1bGxCcm93c2VyKTsKICAgICAgICAgICAgICAgICAgICAgICAga2V5LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIHRvZ2dsZUZ1bGxCcm93c2VyKGV2ZW50KSB7CiAgICAgICAgICAgICAgICB2YXIgcGxyU3RhdGUgPSBhcGkgJiYgYXBpLmdldFBsYXllclN0YXRlICYmIGFwaS5nZXRQbGF5ZXJTdGF0ZSgpOwogICAgICAgICAgICAgICAgcGxyU3RhdGUgPSBwbHJTdGF0ZSA8IDUgJiYgcGxyU3RhdGUgPiAwOwogICAgICAgICAgICAgICAgZG9jdW1lbnRbKHdpbmRvdy5jaHJvbWUgJiYgImJvZHkiKSB8fCAiZG9jdW1lbnRFbGVtZW50Il0uc2Nyb2xsVG9wID0gMDsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoImtleWRvd24iLCBleGl0RnVsbEJyb3dzZXIpOwogICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigibW91c2Vkb3duIiwgZXhpdEZ1bGxCcm93c2VyKTsKICAgICAgICAgICAgICAgIHNldCgiZnVsbEJycyIsIGV2ZW50ID8gIXVzZXJfc2V0dGluZ3MuZnVsbEJycyA6IHRydWUpOwogICAgICAgICAgICAgICAgYWR2YW5jZWRPcHRpb25zLmZ1bGxfYnJvd3Nlci5jbGFzc0xpc3RbKHVzZXJfc2V0dGluZ3MuZnVsbEJycyAmJiAiYWRkIikgfHwgInJlbW92ZSJdKCJhY3RpdmUiKTsKICAgICAgICAgICAgICAgIGlmIChldmVudCAmJiAocGxyU3RhdGUgfHwgZXZlbnQua2V5Q29kZSA9PT0gMjcgfHwgZXZlbnQua2V5ID09PSAiRXNjYXBlIikpIHsKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0Wyh1c2VyX3NldHRpbmdzLmZ1bGxCcnMgJiYgImFkZCIpIHx8ICJyZW1vdmUiXSgicGFydF9mdWxsYnJvd3NlciIpOwogICAgICAgICAgICAgICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgicmVzaXplIikpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIHRvZ2dsZUZyYW1lcyhldmVudCkgewogICAgICAgICAgICAgICAgdmFyIGksIHBpLCBmcHMsIHRlbXA7CiAgICAgICAgICAgICAgICBhZHZhbmNlZE9wdGlvbnMuZnJhbWVfc3RlcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJmcmFtZXN0ZXAtYnV0dG9uIik7CiAgICAgICAgICAgICAgICBpZiAoZXZlbnQgJiYgWyJFTUJFRCIsICJJTlBVVCIsICJPQkpFQ1QiLCAiVEVYVEFSRUEiXS5pbmRleE9mKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQudGFnTmFtZSkgPCAwICYmIGV2ZW50LnRhcmdldC50YWdOYW1lICE9PSAiSUZSQU1FIiAmJiAhZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZSgiY29udGVudGVkaXRhYmxlIikpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoKGV2ZW50LmtleUNvZGUgPT09IDM3IHx8IGV2ZW50LmtleUNvZGUgPT09IDM5KSAmJiBldmVudC5zaGlmdEtleSkgewogICAgICAgICAgICAgICAgICAgICAgICBwaSA9IGFwaS5nZXRWaWRlb1N0YXRzKCkuZm10OwogICAgICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93Lnl0cGxheWVyICYmIHdpbmRvdy55dHBsYXllci5jb25maWcgJiYgd2luZG93Lnl0cGxheWVyLmNvbmZpZy5hcmdzICYmIHdpbmRvdy55dHBsYXllci5jb25maWcuYXJncy5hZGFwdGl2ZV9mbXRzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wID0gd2luZG93Lnl0cGxheWVyLmNvbmZpZy5hcmdzLmFkYXB0aXZlX2ZtdHMuc3BsaXQoIiwiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSB0ZW1wLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChpLS0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVtcFtpXS5pbmRleE9mKCJpdGFnPSIgKyBwaSkgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkdmFuY2VkT3B0aW9ucy5mcHMgPSBwYXJzZUludCh0ZW1wW2ldLm1hdGNoKC9mcHM9KFtcZF0rKS8pWzFdKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYWR2YW5jZWRPcHRpb25zLmZwcyB8fCBhZHZhbmNlZE9wdGlvbnMuZnBzID09PSAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZHZhbmNlZE9wdGlvbnMuZnBzID0gMzA7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZnBzID0gKChldmVudC5rZXlDb2RlIDwgMzkgJiYgLTEpIHx8IDEpICogKChhZHZhbmNlZE9wdGlvbnMuZnBzIDwgMiAmJiAzMCkgfHwgYWR2YW5jZWRPcHRpb25zLmZwcyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmcHMgJiYgYXBpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoInZpZGVvIikucGF1c2VkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpLnBhdXNlVmlkZW8oKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwaS5zZWVrQnkoMSAvIGZwcyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC50eXBlID09PSAiY2xpY2siICYmIGV2ZW50LnRhcmdldC5pZCA9PT0gImZyYW1lc3RlcC1idXR0b24iKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNldCgiZnJhbWVfc3RlcCIsICF1c2VyX3NldHRpbmdzLmZyYW1lX3N0ZXApOwogICAgICAgICAgICAgICAgICAgICAgICBhZHZhbmNlZE9wdGlvbnMuZnJhbWVfc3RlcC5jbGFzc0xpc3RbKHVzZXJfc2V0dGluZ3MuZnJhbWVfc3RlcCAmJiAiYWRkIikgfHwgInJlbW92ZSJdKCJhY3RpdmUiKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoYWR2YW5jZWRPcHRpb25zLmZyYW1lX3N0ZXAgJiYgYWR2YW5jZWRPcHRpb25zLmZyYW1lX3N0ZXAuY2xhc3NMaXN0LmNvbnRhaW5zKCJhY3RpdmUiKSkgewogICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoImtleWRvd24iLCB0b2dnbGVGcmFtZXMsIHRydWUpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICghYWR2YW5jZWRPcHRpb25zLmZyYW1lX3N0ZXAgfHwgIWFkdmFuY2VkT3B0aW9ucy5mcmFtZV9zdGVwLmNsYXNzTGlzdC5jb250YWlucygiYWN0aXZlIikpIHsKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCJrZXlkb3duIiwgdG9nZ2xlRnJhbWVzLCB0cnVlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiB0b2dnbGVDb25zb2xlKGV2ZW50KSB7CiAgICAgICAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LmlkID09PSAiY29uc29sZS1idXR0b24iKSB7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoInBsYXllci1jb25zb2xlIik7CiAgICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LmNsYXNzTGlzdFtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCJwbGF5ZXItY29uc29sZSIpID8gImFkZCIgOiAicmVtb3ZlIl0oImNsb3NlIik7CiAgICAgICAgICAgICAgICAgICAgc2V0KCJhZHZPcHRzIiwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygicGxheWVyLWNvbnNvbGUiKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gdG9nZ2xlUGxheSgpIHsKICAgICAgICAgICAgICAgIHNldCgiVklEX1BMUl9BVFBMIiwgIXVzZXJfc2V0dGluZ3MuVklEX1BMUl9BVFBMKTsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3RbKHVzZXJfc2V0dGluZ3MuVklEX1BMUl9BVFBMICYmICJhZGQiKSB8fCAicmVtb3ZlIl0oInBhcnRfYXV0b3BsYXlvbiIpOwogICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImF1dG9wbGF5LWJ1dHRvbiIpLmNsYXNzTGlzdFsodXNlcl9zZXR0aW5ncy5WSURfUExSX0FUUEwgJiYgImFkZCIpIHx8ICJyZW1vdmUiXSgiYWN0aXZlIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gdG9nZ2xlTG9vcChldmVudCkgewogICAgICAgICAgICAgICAgdmFyIHZpZGVvUGxheWVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigidmlkZW8iKTsKICAgICAgICAgICAgICAgIGlmICh2aWRlb1BsYXllcikgewogICAgICAgICAgICAgICAgICAgIHZpZGVvUGxheWVyLmxvb3AgPSBldmVudCA/ICF1c2VyX3NldHRpbmdzLmxvb3BWaWQgOiB1c2VyX3NldHRpbmdzLmxvb3BWaWQ7CiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGFkdmFuY2VkT3B0aW9ucy5sb29wX2J1dHRvbi5jbGFzc0xpc3RbKCF1c2VyX3NldHRpbmdzLmxvb3BWaWQgJiYgImFkZCIpIHx8ICJyZW1vdmUiXSgiYWN0aXZlIik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc2V0KCJsb29wVmlkIiwgYWR2YW5jZWRPcHRpb25zLmxvb3BfYnV0dG9uLmNsYXNzTGlzdC5jb250YWlucygiYWN0aXZlIikpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIHRvZ2dsZUNpbmVtYU1vZGUoZXZlbnQpIHsKICAgICAgICAgICAgICAgIHZhciBwbHJTdGF0ZSA9IGFwaSAmJiBhcGkuZ2V0UGxheWVyU3RhdGUgJiYgYXBpLmdldFBsYXllclN0YXRlKCkgPCA1ICYmIGFwaS5nZXRQbGF5ZXJTdGF0ZSgpID4gMDsKICAgICAgICAgICAgICAgIHNldCgibGlnaHRzT3V0IiwgZXZlbnQgPyAhdXNlcl9zZXR0aW5ncy5saWdodHNPdXQgOiB0cnVlKTsKICAgICAgICAgICAgICAgIGFkdmFuY2VkT3B0aW9ucy5jaW5lbWFfbW9kZS5jbGFzc0xpc3RbKHVzZXJfc2V0dGluZ3MubGlnaHRzT3V0ICYmICJhZGQiKSB8fCAicmVtb3ZlIl0oImFjdGl2ZSIpOwogICAgICAgICAgICAgICAgaWYgKGV2ZW50ICYmIHBsclN0YXRlKSB7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdFsodXNlcl9zZXR0aW5ncy5saWdodHNPdXQgJiYgImFkZCIpIHx8ICJyZW1vdmUiXSgicGFydF9jaW5lbWFfbW9kZSIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIGhhbmRsZVRvZ2dsZXMoZXZlbnQpIHsKICAgICAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQuZGF0YXNldCAmJiBldmVudC50YXJnZXQuZGF0YXNldC5hY3Rpb24gJiYgYWR2YW5jZWRPcHRpb25zLmFjdGlvbnNbZXZlbnQudGFyZ2V0LmRhdGFzZXQuYWN0aW9uXSkgewogICAgICAgICAgICAgICAgICAgIGFkdmFuY2VkT3B0aW9ucy5hY3Rpb25zW2V2ZW50LnRhcmdldC5kYXRhc2V0LmFjdGlvbl0oZXZlbnQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIGhvb2tCdXR0b25zKCkgewogICAgICAgICAgICAgICAgYWR2YW5jZWRPcHRpb25zLnBvcFBsYXllciA9IHBvcFBsYXllcjsKICAgICAgICAgICAgICAgIGFkdmFuY2VkT3B0aW9ucy5mdWxsX2Jyb3dzZXIgPSBhZHZhbmNlZE9wdGlvbnMuY29udHJvbHMucXVlcnlTZWxlY3RvcigiI2Z1bGxicm93c2VyLWJ1dHRvbiIpOwogICAgICAgICAgICAgICAgYWR2YW5jZWRPcHRpb25zLmNpbmVtYV9tb2RlID0gYWR2YW5jZWRPcHRpb25zLmNvbnRyb2xzLnF1ZXJ5U2VsZWN0b3IoIiNjaW5lbWFtb2RlLWJ1dHRvbiIpOwogICAgICAgICAgICAgICAgYWR2YW5jZWRPcHRpb25zLmxvb3BfYnV0dG9uID0gYWR2YW5jZWRPcHRpb25zLmNvbnRyb2xzLnF1ZXJ5U2VsZWN0b3IoIiNsb29wLWJ1dHRvbiIpOwogICAgICAgICAgICAgICAgYWR2YW5jZWRPcHRpb25zLmZyYW1lX3N0ZXAgPSBhZHZhbmNlZE9wdGlvbnMuY29udHJvbHMucXVlcnlTZWxlY3RvcigiI2ZyYW1lc3RlcC1idXR0b24iKTsKICAgICAgICAgICAgICAgIGFkdmFuY2VkT3B0aW9ucy5hY3Rpb25zID0gewogICAgICAgICAgICAgICAgICAgIHRvZ2dsZVBsYXk6IHRvZ2dsZVBsYXksCiAgICAgICAgICAgICAgICAgICAgdG9nZ2xlTG9vcDogdG9nZ2xlTG9vcCwKICAgICAgICAgICAgICAgICAgICBnZXRUaHVtYjogZ2V0VGh1bWIsCiAgICAgICAgICAgICAgICAgICAgZ2V0U2NyZWVuc2hvdDogZ2V0U2NyZWVuc2hvdCwKICAgICAgICAgICAgICAgICAgICBwb3BQbGF5ZXI6IHBvcFBsYXllciwKICAgICAgICAgICAgICAgICAgICB0b2dnbGVGdWxsQnJvd3NlcjogdG9nZ2xlRnVsbEJyb3dzZXIsCiAgICAgICAgICAgICAgICAgICAgdG9nZ2xlQ2luZW1hTW9kZTogdG9nZ2xlQ2luZW1hTW9kZSwKICAgICAgICAgICAgICAgICAgICB0b2dnbGVGcmFtZXM6IHRvZ2dsZUZyYW1lcwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIiwgaGFuZGxlVG9nZ2xlcyk7CiAgICAgICAgICAgICAgICBpZiAodXNlcl9zZXR0aW5ncy5sb29wVmlkICYmICFhZHZhbmNlZE9wdGlvbnMubG9vcF9idXR0b24uY2xhc3NMaXN0LmNvbnRhaW5zKCJhY3RpdmUiKSkgewogICAgICAgICAgICAgICAgICAgIGFkdmFuY2VkT3B0aW9ucy5sb29wX2J1dHRvbi5jbGFzc0xpc3QuYWRkKCJhY3RpdmUiKTsKICAgICAgICAgICAgICAgICAgICB0b2dnbGVMb29wKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAodXNlcl9zZXR0aW5ncy5mdWxsQnJzICYmICFhZHZhbmNlZE9wdGlvbnMuZnVsbF9icm93c2VyLmNsYXNzTGlzdC5jb250YWlucygiYWN0aXZlIikpIHsKICAgICAgICAgICAgICAgICAgICBhZHZhbmNlZE9wdGlvbnMuZnVsbF9icm93c2VyLmNsYXNzTGlzdC5hZGQoImFjdGl2ZSIpOwogICAgICAgICAgICAgICAgICAgIHRvZ2dsZUZ1bGxCcm93c2VyKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAodXNlcl9zZXR0aW5ncy5saWdodHNPdXQgJiYgIWFkdmFuY2VkT3B0aW9ucy5jaW5lbWFfbW9kZS5jbGFzc0xpc3QuY29udGFpbnMoImFjdGl2ZSIpKSB7CiAgICAgICAgICAgICAgICAgICAgYWR2YW5jZWRPcHRpb25zLmNpbmVtYV9tb2RlLmNsYXNzTGlzdC5hZGQoImFjdGl2ZSIpOwogICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNpbmVtYU1vZGUoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICh1c2VyX3NldHRpbmdzLmZyYW1lX3N0ZXAgJiYgIWFkdmFuY2VkT3B0aW9ucy5mcmFtZV9zdGVwLmNsYXNzTGlzdC5jb250YWlucygiYWN0aXZlIikpIHsKICAgICAgICAgICAgICAgICAgICBhZHZhbmNlZE9wdGlvbnMuZnJhbWVfc3RlcC5jbGFzc0xpc3QuYWRkKCJhY3RpdmUiKTsKICAgICAgICAgICAgICAgICAgICB0b2dnbGVGcmFtZXMoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBhZHZhbmNlZE9wdGlvbnMoKSB7CiAgICAgICAgICAgICAgICB2YXIgaGVhZGVyLCBjbnNsQnRuLCBjbnNsQ29udDsKICAgICAgICAgICAgICAgIGhlYWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ3YXRjaC1oZWFkZXIiKTsKICAgICAgICAgICAgICAgIGNuc2xCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiY29uc29sZS1idXR0b24iKTsKICAgICAgICAgICAgICAgIGFkdmFuY2VkT3B0aW9ucy5jb250cm9scyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJwbGF5ZXItY29uc29sZSIpOwogICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSA9PT0gIi93YXRjaCIgJiYgaGVhZGVyICYmICFjbnNsQnRuKSB7CiAgICAgICAgICAgICAgICAgICAgY25zbEJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInRlbXBsYXRlIik7CiAgICAgICAgICAgICAgICAgICAgY25zbEJ0bi5pbm5lckhUTUwgPSAiPGJ1dHRvbiBpZD0nY29uc29sZS1idXR0b24nIGNsYXNzPSd5dHBsdXNfc3ByaXRlJyBkYXRhLXA9J3R0bHxBRFZfT1BUUyc+PC9idXR0b24+IjsKICAgICAgICAgICAgICAgICAgICBjbnNsQnRuID0gc2V0TG9jYWxlKGNuc2xCdG4uY29udGVudCkuZmlyc3RDaGlsZDsKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsIHRvZ2dsZUNvbnNvbGUpOwogICAgICAgICAgICAgICAgICAgIGNuc2xDb250ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgidGVtcGxhdGUiKTsKICAgICAgICAgICAgICAgICAgICBjbnNsQ29udC5pbm5lckhUTUwgPSAiPGRpdiBpZD0nYWR2YW5jZWQtb3B0aW9ucyc+PC9kaXY+IjsKICAgICAgICAgICAgICAgICAgICBjbnNsQ29udCA9IGNuc2xDb250LmNvbnRlbnQuZmlyc3RDaGlsZDsKICAgICAgICAgICAgICAgICAgICBjbnNsQ29udC5hcHBlbmRDaGlsZChjbnNsQnRuKTsKICAgICAgICAgICAgICAgICAgICBoZWFkZXIuYXBwZW5kQ2hpbGQoY25zbENvbnQpOwogICAgICAgICAgICAgICAgICAgIGlmIChhZHZhbmNlZE9wdGlvbnMuY29udHJvbHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgYWR2YW5jZWRPcHRpb25zLmNvbnRyb2xzLm91dGVySFRNTCA9ICIiOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBhZHZhbmNlZE9wdGlvbnMuY29udHJvbHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJ0ZW1wbGF0ZSIpOwogICAgICAgICAgICAgICAgICAgIGFkdmFuY2VkT3B0aW9ucy5jb250cm9scy5pbm5lckhUTUwgPSAvLwogICAgICAgICAgICAgICAgICAgICAgICBgPGRpdiBpZD0ncGxheWVyLWNvbnNvbGUnPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0nYXV0b3BsYXktYnV0dG9uJyBjbGFzcz0neXQtdWl4LXRvb2x0aXAnIGRhdGEtcD0ndHRwfENOU0xfQVAnIGRhdGEtYWN0aW9uPSd0b2dnbGVQbGF5Jz48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9J2xvb3AtYnV0dG9uJyBjbGFzcz0neXQtdWl4LXRvb2x0aXAnIGRhdGEtcD0ndHRwfENOU0xfUlBUJyBkYXRhLWFjdGlvbj0ndG9nZ2xlTG9vcCc+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSdzYXZlLXRodW1ibmFpbC1idXR0b24nIGNsYXNzPSd5dC11aXgtdG9vbHRpcCcgZGF0YS1wPSd0dHB8Q05TTF9TVlRIJyBkYXRhLWFjdGlvbj0nZ2V0VGh1bWInPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0nc2NyZWVuc2hvdC1idXR0b24nIGNsYXNzPSd5dC11aXgtdG9vbHRpcCcgZGF0YS1wPSd0dHB8Q05TTF9TUycgZGF0YS1hY3Rpb249J2dldFNjcmVlbnNob3QnPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0ncG9wb3V0LWJ1dHRvbicgY2xhc3M9J3l0LXVpeC10b29sdGlwJyBkYXRhLXA9J3R0cHxDTlNMX1BQT1QnIGRhdGEtYWN0aW9uPSdwb3BQbGF5ZXInPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0nZnVsbGJyb3dzZXItYnV0dG9uJyBjbGFzcz0neXQtdWl4LXRvb2x0aXAnIGRhdGEtcD0ndHRwfENOU0xfRkxCUicgZGF0YS1hY3Rpb249J3RvZ2dsZUZ1bGxCcm93c2VyJz48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9J2NpbmVtYW1vZGUtYnV0dG9uJyBjbGFzcz0neXQtdWl4LXRvb2x0aXAnIGRhdGEtcD0ndHRwfENOU0xfQ0lOTV9NRCcgZGF0YS1hY3Rpb249J3RvZ2dsZUNpbmVtYU1vZGUnPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0nZnJhbWVzdGVwLWJ1dHRvbicgY2xhc3M9J3l0LXVpeC10b29sdGlwJyBkYXRhLXA9J3R0cHxDTlNMX0ZSTUUnIGRhdGEtYWN0aW9uPSd0b2dnbGVGcmFtZXMnPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5gOwogICAgICAgICAgICAgICAgICAgIGlmICh1c2VyX3NldHRpbmdzLlZJRF9QTFJfQVRQTCkgewogICAgICAgICAgICAgICAgICAgICAgICBhZHZhbmNlZE9wdGlvbnMuY29udHJvbHMuY29udGVudC5xdWVyeVNlbGVjdG9yKCIjYXV0b3BsYXktYnV0dG9uIikuY2xhc3NMaXN0LmFkZCgiYWN0aXZlIik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGFkdmFuY2VkT3B0aW9ucy5jb250cm9scyA9IHNldExvY2FsZShhZHZhbmNlZE9wdGlvbnMuY29udHJvbHMuY29udGVudCkuZmlyc3RDaGlsZDsKICAgICAgICAgICAgICAgICAgICBjbnNsQ29udC5hcHBlbmRDaGlsZChhZHZhbmNlZE9wdGlvbnMuY29udHJvbHMpOwogICAgICAgICAgICAgICAgICAgIGhvb2tCdXR0b25zKCk7CiAgICAgICAgICAgICAgICAgICAgaWYgKHVzZXJfc2V0dGluZ3MuYWR2T3B0cykgewogICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgicGxheWVyLWNvbnNvbGUiKTsKICAgICAgICAgICAgICAgICAgICAgICAgY25zbEJ0bi5jbGFzc0xpc3QuYWRkKCJjbG9zZSIpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBpbmlBY3Rpb24oZXZlbnQpIHsKICAgICAgICAgICAgICAgIHZhciBvYnNlcnZlciwgbG9hZF9tb3JlLCBjbGlja190aXRsZTsKICAgICAgICAgICAgICAgIGxvYWRfbW9yZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiN3YXRjaC1tb3JlLXJlbGF0ZWQsIC5sb2FkLW1vcmUtYnV0dG9uIik7CiAgICAgICAgICAgICAgICBjbGlja190aXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi55dC11aXgtdGlsZSIpOwogICAgICAgICAgICAgICAgd2hpbGUgKGNsaWNrX3RpdGxlKSB7CiAgICAgICAgICAgICAgICAgICAgY2xpY2tfdGl0bGUuY2xhc3NMaXN0LnJlbW92ZSgieXQtdWl4LXRpbGUiKTsKICAgICAgICAgICAgICAgICAgICBjbGlja190aXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi55dC11aXgtdGlsZSIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGxvYWRfbW9yZSAmJiAhbG9hZF9tb3JlLmNsYXNzTGlzdC5jb250YWlucygibW9kVGh1bWJzIikpIHsKICAgICAgICAgICAgICAgICAgICBsb2FkX21vcmUuY2xhc3NMaXN0LmFkZCgibW9kVGh1bWJzIik7CiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihtb2RUaHVtYnMpOwogICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLm9ic2VydmUobG9hZF9tb3JlLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkTGlzdDogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlT2xkVmFsdWU6IHRydWUKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChldmVudCAmJiAvcG9wb3V0bW9kZXxibGFja2xpc3QvLnRlc3QoZXZlbnQudGFyZ2V0LmNsYXNzTmFtZSkpIHsKICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgICAgIGV2ZW50ID0gZXZlbnQudGFyZ2V0OwogICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5jbGFzc0xpc3QuY29udGFpbnMoInBvcG91dG1vZGUiKSkgewogICAgICAgICAgICAgICAgICAgICAgICBwb3BQbGF5ZXIoZXZlbnQuZGF0YXNldC5saW5rKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmRhdGFzZXQueXRpZCAhPT0gInVuZGVmaW5lZCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdXNlcl9zZXR0aW5ncy5ibGFja2xpc3RbZXZlbnQuZGF0YXNldC55dGlkXSA9IGV2ZW50LmRhdGFzZXQudXNlcjsKICAgICAgICAgICAgICAgICAgICAgICAgc2V0KCJibGFja2xpc3QiLCB1c2VyX3NldHRpbmdzLmJsYWNrbGlzdCk7CiAgICAgICAgICAgICAgICAgICAgICAgIG1vZFRodW1icygpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBzZXRCdXR0b25zKCkgewogICAgICAgICAgICAgICAgdmFyIGksIGosIGxpc3QsIHRlbXAsIHRodW1iLCBidXR0b247CiAgICAgICAgICAgICAgICBsaXN0ID0gT2JqZWN0LmtleXMobW9kVGh1bWJzLnRodW1icyk7CiAgICAgICAgICAgICAgICBpID0gbGlzdC5sZW5ndGg7CiAgICAgICAgICAgICAgICB3aGlsZSAoaS0tKSB7CiAgICAgICAgICAgICAgICAgICAgdGVtcCA9IG1vZFRodW1icy50aHVtYnNbbGlzdFtpXV07CiAgICAgICAgICAgICAgICAgICAgaiA9IHRlbXAubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgIHdoaWxlIChqLS0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGh1bWIgPSB0ZW1wW2pdLnF1ZXJ5U2VsZWN0b3IoIi55dC1sb2NrdXAtdGh1bWJuYWlsLCAudGh1bWItd3JhcHBlciIpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAodGh1bWIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1c2VyX3NldHRpbmdzLkdFTl9QUE9UX09OICYmICF0aHVtYi5xdWVyeVNlbGVjdG9yKCIucG9wb3V0bW9kZSIpICYmICEvY2hhbm5lbC8udGVzdCh0ZW1wW2pdLmZpcnN0Q2hpbGQuY2xhc3NOYW1lKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInRlbXBsYXRlIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmlubmVySFRNTCA9ICI8ZGl2IGRhdGEtcD0ndHRsfFBQT1RfT1BFTiZ0dHB8UFBPVF9PUEVOJyBjbGFzcz0neXQtdWl4LXRvb2x0aXAgcG9wb3V0bW9kZSB5dHBsdXNfc3ByaXRlJz48L2Rpdj4iOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5jb250ZW50LmZpcnN0Q2hpbGQuZGF0YXNldC5saW5rID0gdGVtcFtqXS5xdWVyeVNlbGVjdG9yKCJhW2hyZWYqPScvd2F0Y2g/diddIikuaHJlZjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHVtYi5hcHBlbmRDaGlsZChzZXRMb2NhbGUoYnV0dG9uLmNvbnRlbnQpLmZpcnN0Q2hpbGQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVzZXJfc2V0dGluZ3MuQkxLX09OICYmICF0aHVtYi5xdWVyeVNlbGVjdG9yKCIuYmxhY2tsaXN0IikgJiYgd2luZG93Lnl0LmNvbmZpZ18uUEFHRV9OQU1FICE9PSAiY2hhbm5lbCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJ0ZW1wbGF0ZSIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5pbm5lckhUTUwgPSAiPGRpdiBkYXRhLXA9J3R0bHxCTENLX0FERCZ0dHB8QkxDS19BREQnIGNsYXNzPSd5dC11aXgtdG9vbHRpcCBibGFja2xpc3QgeXRwbHVzX3Nwcml0ZSc+PC9kaXY+IjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b24uY29udGVudC5maXJzdENoaWxkLmRhdGFzZXQudXNlciA9IHRlbXBbal0udXNlcm5hbWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmNvbnRlbnQuZmlyc3RDaGlsZC5kYXRhc2V0Lnl0aWQgPSBsaXN0W2ldOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRodW1iLmFwcGVuZENoaWxkKHNldExvY2FsZShidXR0b24uY29udGVudCkuZmlyc3RDaGlsZCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gZGVsVmlkZW9zKCkgewogICAgICAgICAgICAgICAgdmFyIGksIGosIHRlbXAsIHBhcmVudCwgYmxhY2tsaXN0LCBoYXNfdXBuZXh0OwogICAgICAgICAgICAgICAgaGFzX3VwbmV4dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi5hdXRvcGxheS1iYXIiKTsKICAgICAgICAgICAgICAgIGJsYWNrbGlzdCA9IE9iamVjdC5rZXlzKHVzZXJfc2V0dGluZ3MuYmxhY2tsaXN0KTsKICAgICAgICAgICAgICAgIGkgPSBibGFja2xpc3QubGVuZ3RoOwogICAgICAgICAgICAgICAgd2hpbGUgKGktLSkgewogICAgICAgICAgICAgICAgICAgIHRlbXAgPSBtb2RUaHVtYnMudGh1bWJzW2JsYWNrbGlzdFtpXV07CiAgICAgICAgICAgICAgICAgICAgaWYgKHRlbXApIHsKICAgICAgICAgICAgICAgICAgICAgICAgaiA9IHRlbXAubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoai0tKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzX3VwbmV4dCAmJiBoYXNfdXBuZXh0LmNvbnRhaW5zKHRlbXBbal0pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzX3VwbmV4dC5wYXJlbnROb2RlLm91dGVySFRNTCA9ICIiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc191cG5leHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIud2F0Y2gtc2lkZWJhci1zZXBhcmF0aW9uLWxpbmUiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzX3VwbmV4dCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNfdXBuZXh0Lm91dGVySFRNTCA9ICIiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNfdXBuZXh0ID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50ID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudCA9IHRlbXBbal0ucGFyZW50Tm9kZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wW2pdLm91dGVySFRNTCA9ICIiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcC5zcGxpY2UoaiwgMSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAocGFyZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudC5jaGlsZEVsZW1lbnRDb3VudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50LmZpcnN0Q2hpbGQub3V0ZXJIVE1MID0gIiI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0ZW1wLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG1vZFRodW1icy50aHVtYnNbYmxhY2tsaXN0W2ldXTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB0ZW1wID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGVtcCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoImZlZWQtaXRlbS1jb250YWluZXIiKTsKICAgICAgICAgICAgICAgIGkgPSB0ZW1wLmxlbmd0aDsKICAgICAgICAgICAgICAgIHdoaWxlIChpLS0pIHsKICAgICAgICAgICAgICAgICAgICBpZiAodGVtcFtpXS5xdWVyeVNlbGVjdG9yQWxsKCJ1bCIpLmxlbmd0aCA8IDIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50ID0gdGVtcFtpXS5wYXJlbnROb2RlOwogICAgICAgICAgICAgICAgICAgICAgICB0ZW1wW2ldLm91dGVySFRNTCA9ICIiOwogICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAocGFyZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyZW50LmNoaWxkRWxlbWVudENvdW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5maXJzdENoaWxkLm91dGVySFRNTCA9ICIiOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFZpZGVvcygpIHsKICAgICAgICAgICAgICAgIHZhciBpLCBsaXN0LCB0ZW1wLCBjaGFubmVsX2lkOwogICAgICAgICAgICAgICAgbW9kVGh1bWJzLnRodW1icyA9IHt9OwogICAgICAgICAgICAgICAgbGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYAogICAgICAgICAgICAgICAgICAgIC55dC1sb2NrdXAtYnlsaW5lID4gYSwKICAgICAgICAgICAgICAgICAgICAueXQtbG9ja3VwLWNvbnRlbnQgLmctaG92ZXJjYXJkLAogICAgICAgICAgICAgICAgICAgIC52aWRlby1saXN0LWl0ZW0gLmctaG92ZXJjYXJkLAogICAgICAgICAgICAgICAgICAgIC5jaGFubmVscy1jb250ZW50LWl0ZW0gLnl0LWxvY2t1cC10aXRsZSA+IGEKICAgICAgICAgICAgICAgIGApOwogICAgICAgICAgICAgICAgaSA9IGxpc3QubGVuZ3RoOwogICAgICAgICAgICAgICAgd2hpbGUgKGktLSkgewogICAgICAgICAgICAgICAgICAgIHRlbXAgPSBsaXN0W2ldOwogICAgICAgICAgICAgICAgICAgIGNoYW5uZWxfaWQgPSB0ZW1wLmRhdGFzZXQueXRpZDsKICAgICAgICAgICAgICAgICAgICB3aGlsZSAodGVtcCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVtcC50YWdOYW1lICYmIHRlbXAudGFnTmFtZSA9PT0gIkxJIikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcC51c2VybmFtZSA9IGxpc3RbaV0udGV4dENvbnRlbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW1vZFRodW1icy50aHVtYnNbY2hhbm5lbF9pZF0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RUaHVtYnMudGh1bWJzW2NoYW5uZWxfaWRdID0gW3RlbXBdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtb2RUaHVtYnMudGh1bWJzW2NoYW5uZWxfaWRdLmluZGV4T2YodGVtcCkgPCAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kVGh1bWJzLnRodW1ic1tjaGFubmVsX2lkXS5wdXNoKHRlbXApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgdGVtcCA9IHRlbXAucGFyZW50Tm9kZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gbW9kVGh1bWJzKCkgewogICAgICAgICAgICAgICAgaWYgKCh1c2VyX3NldHRpbmdzLkJMS19PTiB8fCB1c2VyX3NldHRpbmdzLkdFTl9QUE9UX09OKSAmJiAhd2luZG93Lm9wZW5lciAmJiB3aW5kb3cueXQgJiYgd2luZG93Lnl0LmNvbmZpZ18gJiYgL3dhdGNofGluZGV4fGZlZWR8Y2hhbm5lbHxyZXN1bHRzLy50ZXN0KHdpbmRvdy55dC5jb25maWdfLlBBR0VfTkFNRSkpIHsKICAgICAgICAgICAgICAgICAgICBnZXRWaWRlb3MoKTsKICAgICAgICAgICAgICAgICAgICBpZiAodXNlcl9zZXR0aW5ncy5CTEtfT04gJiYgd2luZG93Lnl0LmNvbmZpZ18uUEFHRV9OQU1FICE9PSAiY2hhbm5lbCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGVsVmlkZW9zKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHNldEJ1dHRvbnMoKTsKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsIGluaUFjdGlvbik7CiAgICAgICAgICAgICAgICAgICAgaW5pQWN0aW9uKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gc2V0VmlkZW9Db3VudCgpIHsKICAgICAgICAgICAgICAgIHZhciBzcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic3BhbiIpOwogICAgICAgICAgICAgICAgc3Bhbi50ZXh0Q29udGVudCA9ICIgwrcgIjsKICAgICAgICAgICAgICAgIGVuaGFuY2VkRGV0YWlscy51c2VybmFtZS5hcHBlbmRDaGlsZChzcGFuKTsKICAgICAgICAgICAgICAgIGVuaGFuY2VkRGV0YWlscy5saW5rLmhyZWYgPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luICsgIi9jaGFubmVsLyIgKyBlbmhhbmNlZERldGFpbHMudXNlci5kYXRhc2V0Lnl0aWQgKyAiL3ZpZGVvcyI7CiAgICAgICAgICAgICAgICBlbmhhbmNlZERldGFpbHMudXNlcm5hbWUuYXBwZW5kQ2hpbGQoZW5oYW5jZWREZXRhaWxzLmxpbmspOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVZpZGVvQ291bnQoZGV0YWlscykgewogICAgICAgICAgICAgICAgZGV0YWlscyA9IGRldGFpbHMudGFyZ2V0LnJlc3BvbnNlLnF1ZXJ5U2VsZWN0b3IoIi5wbC1oZWFkZXItZGV0YWlscyBsaTpudGgtY2hpbGQoMikiKTsKICAgICAgICAgICAgICAgIGlmIChkZXRhaWxzKSB7CiAgICAgICAgICAgICAgICAgICAgZW5oYW5jZWREZXRhaWxzLmxpbmsuY2xhc3NOYW1lID0gInNwZi1saW5rIjsKICAgICAgICAgICAgICAgICAgICBlbmhhbmNlZERldGFpbHMubGluay50ZXh0Q29udGVudCA9IGNpZFtlbmhhbmNlZERldGFpbHMudXNlci5kYXRhc2V0Lnl0aWRdID0gZGV0YWlscy50ZXh0Q29udGVudDsKICAgICAgICAgICAgICAgICAgICBzZXRWaWRlb0NvdW50KCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gZ2V0VmlkZW9Db3VudCgpIHsKICAgICAgICAgICAgICAgIGVuaGFuY2VkRGV0YWlscy51c2VybmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi55dC11c2VyLWluZm8iKTsKICAgICAgICAgICAgICAgIGlmICghZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInVwbG9hZGVkLXZpZGVvcyIpICYmIGVuaGFuY2VkRGV0YWlscy51c2VybmFtZSkgewogICAgICAgICAgICAgICAgICAgIGVuaGFuY2VkRGV0YWlscy5saW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYSIpOwogICAgICAgICAgICAgICAgICAgIGVuaGFuY2VkRGV0YWlscy5saW5rLmlkID0gInVwbG9hZGVkLXZpZGVvcyI7CiAgICAgICAgICAgICAgICAgICAgZW5oYW5jZWREZXRhaWxzLnVzZXJuYW1lLmFwcGVuZENoaWxkKGVuaGFuY2VkRGV0YWlscy5saW5rKTsKICAgICAgICAgICAgICAgICAgICBlbmhhbmNlZERldGFpbHMudXNlciA9IGVuaGFuY2VkRGV0YWlscy51c2VybmFtZS5xdWVyeVNlbGVjdG9yKCJhIik7CiAgICAgICAgICAgICAgICAgICAgaWYgKGNpZFtlbmhhbmNlZERldGFpbHMudXNlci5kYXRhc2V0Lnl0aWRdKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGVuaGFuY2VkRGV0YWlscy5saW5rLnRleHRDb250ZW50ID0gY2lkW2VuaGFuY2VkRGV0YWlscy51c2VyLmRhdGFzZXQueXRpZF07CiAgICAgICAgICAgICAgICAgICAgICAgIHNldFZpZGVvQ291bnQoKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFhIUigiR0VUIiwgdXBkYXRlVmlkZW9Db3VudCwgIi9wbGF5bGlzdD9saXN0PSIgKyBlbmhhbmNlZERldGFpbHMudXNlci5kYXRhc2V0Lnl0aWQucmVwbGFjZSgiVUMiLCAiVVUiKSwgImRvYyIpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBnZXRDaGFubmVsSW5mbyhkZXRhaWxzKSB7CiAgICAgICAgICAgICAgICB2YXIgcmV0cnksIGlzTGl2ZTsKICAgICAgICAgICAgICAgIGlzTGl2ZSA9IGRldGFpbHMudGFyZ2V0LnJlc3BvbnNlLnF1ZXJ5U2VsZWN0b3IoIi55dC1iYWRnZS1saXZlIik7CiAgICAgICAgICAgICAgICBpZiAoIWlzTGl2ZSkgewogICAgICAgICAgICAgICAgICAgIHJldHJ5ID0gZGV0YWlscy50YXJnZXQucmVzcG9uc2VVUkwuc3BsaXQoIi92aWRlb3MiKS5sZW5ndGggPCAyOwogICAgICAgICAgICAgICAgICAgIGRldGFpbHMgPSBkZXRhaWxzLnRhcmdldC5yZXNwb25zZS5xdWVyeVNlbGVjdG9yQWxsKCJbZGF0YS1jb250ZXh0LWl0ZW0taWQ9JyIgKyB3aW5kb3cueXRwbGF5ZXIuY29uZmlnLmFyZ3MudmlkZW9faWQgKyAiJ10gLnl0LWxvY2t1cC1tZXRhLWluZm8gbGkiKTsKICAgICAgICAgICAgICAgICAgICBpZiAoZGV0YWlscyAmJiBkZXRhaWxzLmxlbmd0aCA+IDAgJiYgZW5oYW5jZWREZXRhaWxzLndhdGNoVGltZS50ZXh0Q29udGVudC5zcGxpdCgiwrciKS5sZW5ndGggPCAyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGVuaGFuY2VkRGV0YWlscy53YXRjaFRpbWUudGV4dENvbnRlbnQgKz0gIiDCtyAiICsgZGV0YWlsc1tyZXRyeSA/IDAgOiAxXS50ZXh0Q29udGVudDsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJldHJ5KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsWEhSKCJHRVQiLCBnZXRDaGFubmVsSW5mbywgIi9jaGFubmVsLyIgKyB3aW5kb3cueXRwbGF5ZXIuY29uZmlnLmFyZ3MudWNpZCArICIvdmlkZW9zIiwgImRvYyIpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBnZXRQdWJsaXNoZWRUaW1lKCkgewogICAgICAgICAgICAgICAgZW5oYW5jZWREZXRhaWxzLndhdGNoVGltZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi53YXRjaC10aW1lLXRleHQiKTsKICAgICAgICAgICAgICAgIGlmIChlbmhhbmNlZERldGFpbHMud2F0Y2hUaW1lICYmICFlbmhhbmNlZERldGFpbHMud2F0Y2hUaW1lLmZldGNoaW5nICYmIHdpbmRvdy55dHBsYXllciAmJiB3aW5kb3cueXRwbGF5ZXIuY29uZmlnKSB7CiAgICAgICAgICAgICAgICAgICAgZW5oYW5jZWREZXRhaWxzLndhdGNoVGltZS5mZXRjaGluZyA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgbG9jYWxYSFIoIkdFVCIsIGdldENoYW5uZWxJbmZvLCAiL2NoYW5uZWwvIiArIHdpbmRvdy55dHBsYXllci5jb25maWcuYXJncy51Y2lkICsgIi9zZWFyY2g/cXVlcnk9JTIyIiArIHdpbmRvdy55dHBsYXllci5jb25maWcuYXJncy52aWRlb19pZCArICIlMjIiLCAiZG9jIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gZW5oYW5jZWREZXRhaWxzKCkgewogICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSA9PT0gIi93YXRjaCIpIHsKICAgICAgICAgICAgICAgICAgICBpZiAodXNlcl9zZXR0aW5ncy5WSURfVklEX0NOVCkgewogICAgICAgICAgICAgICAgICAgICAgICBnZXRWaWRlb0NvdW50KCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmICh1c2VyX3NldHRpbmdzLlZJRF9QT1NUX1RJTUUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZ2V0UHVibGlzaGVkVGltZSgpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiByZXZlcnNlQ29udHJvbCgpIHsKICAgICAgICAgICAgICAgIHZhciBpLCB0ZW1wLCBwcmV2LCBuZXh0LCBsaXN0LCB2aWRlb3M7CiAgICAgICAgICAgICAgICBwcmV2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiLnByZXYtcGxheWxpc3QtbGlzdC1pdGVtIik7CiAgICAgICAgICAgICAgICBuZXh0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiLm5leHQtcGxheWxpc3QtbGlzdC1pdGVtIik7CiAgICAgICAgICAgICAgICBsaXN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInBsYXlsaXN0LWF1dG9zY3JvbGwtbGlzdCIpOwogICAgICAgICAgICAgICAgdmlkZW9zID0gbGlzdC5nZXRFbGVtZW50c0J5VGFnTmFtZSgibGkiKTsKICAgICAgICAgICAgICAgIGkgPSB2aWRlb3MubGVuZ3RoOwogICAgICAgICAgICAgICAgd2hpbGUgKGktLSkgewogICAgICAgICAgICAgICAgICAgIGxpc3QuYXBwZW5kQ2hpbGQodmlkZW9zW2ldKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHRlbXAgPSBwcmV2LmhyZWY7CiAgICAgICAgICAgICAgICBwcmV2LmhyZWYgPSBuZXh0LmhyZWY7CiAgICAgICAgICAgICAgICBuZXh0LmhyZWYgPSB0ZW1wOwogICAgICAgICAgICAgICAgbGlzdC5zY3JvbGxUb3AgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIuY3VycmVudGx5LXBsYXlpbmciKS5vZmZzZXRUb3A7CiAgICAgICAgICAgICAgICBpZiAoYXBpKSB7CiAgICAgICAgICAgICAgICAgICAgYXBpLnVwZGF0ZVBsYXlsaXN0KCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gcmV2ZXJzZUJ1dHRvbihldmVudCkgewogICAgICAgICAgICAgICAgaWYgKGV2ZW50LnRhcmdldC5pZCA9PT0gInJldmVyc2UiKSB7CiAgICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC50b2dnbGUoInl0LXVpeC1idXR0b24tdG9nZ2xlZCIpOwogICAgICAgICAgICAgICAgICAgIHNldCgicGxSZXYiLCAoZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygieXQtdWl4LWJ1dHRvbi10b2dnbGVkIikpID8gd2luZG93Lnl0LmNvbmZpZ18uTElTVF9JRCA6IGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICByZXZlcnNlQ29udHJvbCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIGF1dG9wbGF5QnV0dG9uKGV2ZW50KSB7CiAgICAgICAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LmlkID09PSAiYXV0b3BsYXkiKSB7CiAgICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC50b2dnbGUoInl0LXVpeC1idXR0b24tdG9nZ2xlZCIpOwogICAgICAgICAgICAgICAgICAgIHNldCgicGxBcGwiLCBldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCJ5dC11aXgtYnV0dG9uLXRvZ2dsZWQiKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlQnV0dG9uKHR5cGUsIGxhYmVsLCBib29sLCBjYWxsKSB7CiAgICAgICAgICAgICAgICB2YXIgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgidGVtcGxhdGUiKTsKICAgICAgICAgICAgICAgIGJ1dHRvbi5pbm5lckhUTUwgPSAvLwogICAgICAgICAgICAgICAgICAgIGA8YnV0dG9uIGNsYXNzPSd5dC11aXgtYnV0dG9uIHl0LXVpeC1idXR0b24tcGxheWVyLWNvbnRyb2xzIHl0LXVpeC1idXR0b24tb3BhY2l0eSB5dC11aXgtdG9vbHRpcCcgdHlwZT0nYnV0dG9uJz4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J3l0LXVpeC1idXR0b24taWNvbic+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPmA7CiAgICAgICAgICAgICAgICBpZiAoYm9vbCA9PT0gdHJ1ZSB8fCB3aW5kb3cubG9jYXRpb24uaHJlZi5zcGxpdChib29sKS5sZW5ndGggPiAxKSB7CiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmNvbnRlbnQucXVlcnlTZWxlY3RvcigiYnV0dG9uIikuY2xhc3NMaXN0LmFkZCgieXQtdWl4LWJ1dHRvbi10b2dnbGVkIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBidXR0b24uY29udGVudC5maXJzdENoaWxkLmlkID0gdHlwZTsKICAgICAgICAgICAgICAgIGJ1dHRvbi5jb250ZW50LmZpcnN0Q2hpbGQuZGF0YXNldC5wID0gInR0cHwiICsgbGFiZWwgKyAiJnR0bHwiICsgbGFiZWw7CiAgICAgICAgICAgICAgICBidXR0b24uY29udGVudC5maXJzdENoaWxkLmNsYXNzTGlzdC5hZGQoInl0LXVpeC1idXR0b24taWNvbi13YXRjaC1hcHBiYXItIiArIHR5cGUgKyAiLXZpZGVvLWxpc3QiLCAieXRwbHVzX3Nwcml0ZSIpOwogICAgICAgICAgICAgICAgYnV0dG9uID0gc2V0TG9jYWxlKGJ1dHRvbi5jb250ZW50KS5maXJzdENoaWxkOwogICAgICAgICAgICAgICAgcGxheWxpc3RDb250cm9scy5wbEJhci5jbGFzc05hbWUgPSBwbGF5bGlzdENvbnRyb2xzLnBsQmFyLmNsYXNzTmFtZS5yZXBsYWNlKCJyYWRpby1wbGF5bGlzdCIsICIiKTsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIiwgY2FsbCk7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIucGxheWxpc3QtbmF2LWNvbnRyb2xzIikuYXBwZW5kQ2hpbGQoYnV0dG9uKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBwbGF5bGlzdENvbnRyb2xzKCkgewogICAgICAgICAgICAgICAgcGxheWxpc3RDb250cm9scy5wbEJhciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ3YXRjaC1hcHBiYXItcGxheWxpc3QiKTsKICAgICAgICAgICAgICAgIGlmIChwbGF5bGlzdENvbnRyb2xzLnBsQmFyKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICJjb21wbGV0ZSIgJiYgdXNlcl9zZXR0aW5ncy5wbFJldiAmJiB3aW5kb3cubG9jYXRpb24uaHJlZi5zcGxpdCh1c2VyX3NldHRpbmdzLnBsUmV2KS5sZW5ndGggPiAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldmVyc2VDb250cm9sKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmICh1c2VyX3NldHRpbmdzLlZJRF9QTFNUX1JWUlMgJiYgIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJyZXZlcnNlIikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlQnV0dG9uKCJyZXZlcnNlIiwgIlBMU1RfUlZSUyIsIHVzZXJfc2V0dGluZ3MucGxSZXYsIHJldmVyc2VCdXR0b24pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAodXNlcl9zZXR0aW5ncy5WSURfUExTVF9BVFBMICYmICFkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYXV0b3BsYXkiKSkgewogICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVCdXR0b24oImF1dG9wbGF5IiwgIlBMU1RfQVAiLCB1c2VyX3NldHRpbmdzLnBsQXBsLCBhdXRvcGxheUJ1dHRvbik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIHhoclBhdGNoKGV2ZW50KSB7CiAgICAgICAgICAgICAgICB2YXIgdGVtcCwgcGxheWVyOwogICAgICAgICAgICAgICAgaWYgKHRoaXMucmVhZHlTdGF0ZSA9PT0gNCkgewogICAgICAgICAgICAgICAgICAgIHRlbXAgPSB7YXJnczogSlNPTi5wYXJzZSgKICAgICAgICAgICAgICAgICAgICAgICAgIntcIiIgKwogICAgICAgICAgICAgICAgICAgICAgICBkZWNvZGVVUklDb21wb25lbnQodGhpcy5yZXNwb25zZVRleHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8lNUMvZywgIiU1QyU1QyIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJTIyL2csICIlNUMlMjIiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyYvZywgIlwiLFwiIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cPS9nLCAiXCI6XCIiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1wrL2csICIlMjAiKQogICAgICAgICAgICAgICAgICAgICAgICApICsKICAgICAgICAgICAgICAgICAgICAgICAgIlwifSIKICAgICAgICAgICAgICAgICAgICApfTsKICAgICAgICAgICAgICAgICAgICB0ZW1wID0gbW9kQXJncyh0ZW1wKTsKICAgICAgICAgICAgICAgICAgICB0ZW1wID0gZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHRlbXAuYXJncykuc3BsaXQoL1x7IihbXHdcV10qPykiXH0vKVsxXSkKICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyU1QyU1Qy9nLCAiJTVDIikKICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyU1QyUyMi9nLCAiJTIyIikKICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyUyMiUyQyUyMi9nLCAiJiIpCiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8lMjIlM0ElMjIvZywgIj0iKQogICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJTIwL2csICIrIik7CiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICJyZXNwb25zZVRleHQiLCB7d3JpdGFibGU6IHRydWV9KTsKICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3BvbnNlVGV4dCA9IHRlbXA7CiAgICAgICAgICAgICAgICAgICAgcGxheWVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1vdmllX3BsYXllciIpOwogICAgICAgICAgICAgICAgICAgIGlmIChwbGF5ZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLnNldFBsYXliYWNrUXVhbGl0eSh1c2VyX3NldHRpbmdzLlZJRF9ERkxUX1FMVFkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBjaGVja1hIUihvcmlnaW5hbCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG1ldGhvZCwgdXJsKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHVybC5tYXRjaCgiZ2V0X3ZpZGVvX2luZm8iKSkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoInJlYWR5c3RhdGVjaGFuZ2UiLCB4aHJQYXRjaCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBoaWRlVm9sdW1lKCkgewogICAgICAgICAgICAgICAgaWYgKHZvbHVtZVdoZWVsLmNCb3R0b20gJiYgdm9sdW1lV2hlZWwuY0JvdHRvbS5jbGFzc0xpc3QuY29udGFpbnMoInl0cC12b2x1bWUtc2xpZGVyLWFjdGl2ZSIpKSB7CiAgICAgICAgICAgICAgICAgICAgdm9sdW1lV2hlZWwuY0JvdHRvbS5jbGFzc0xpc3QucmVtb3ZlKCJ5dHAtdm9sdW1lLXNsaWRlci1hY3RpdmUiKTsKICAgICAgICAgICAgICAgICAgICBkZWxldGUgdm9sdW1lV2hlZWwuY0JvdHRvbS50aW1lcjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiB2b2x1bWVXaGVlbChldmVudCkgewogICAgICAgICAgICAgICAgdmFyIGZzUGwsIHBTZXRzLCBpdkNhcmQsIHBsYXllciwgY2FuU2Nyb2xsLCBkaXJlY3Rpb247CiAgICAgICAgICAgICAgICBwbGF5ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCJ2aWRlbyIpOwogICAgICAgICAgICAgICAgZnNQbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi55dHAtcGxheWxpc3QtbWVudSIpOwogICAgICAgICAgICAgICAgcFNldHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIueXRwLXNldHRpbmdzLW1lbnUiKTsKICAgICAgICAgICAgICAgIGl2Q2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi5pdi1kcmF3ZXIiKTsKICAgICAgICAgICAgICAgIGNhblNjcm9sbCA9IGV2ZW50ICYmICghZnNQbCB8fCAoZnNQbCAmJiAhZnNQbC5jb250YWlucyhldmVudC50YXJnZXQpKSkgJiYgKCFpdkNhcmQgfHwgKGl2Q2FyZCAmJiAhaXZDYXJkLmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpKSAmJiAoIXBTZXRzIHx8IChwU2V0cyAmJiAhcFNldHMuY29udGFpbnMoZXZlbnQudGFyZ2V0KSkpOwogICAgICAgICAgICAgICAgaWYgKGV2ZW50ICYmIGFwaSAmJiBwbGF5ZXIgJiYgY2FuU2Nyb2xsICYmIChldmVudC50YXJnZXQuaWQgPT09IGFwaSB8fCBhcGkuY29udGFpbnMoZXZlbnQudGFyZ2V0KSkpIHsKICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgICAgIHZvbHVtZVdoZWVsLmNCb3R0b20gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIueXRwLWNocm9tZS1ib3R0b20iKTsKICAgICAgICAgICAgICAgICAgICBpZiAodm9sdW1lV2hlZWwuY0JvdHRvbSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXZvbHVtZVdoZWVsLmNCb3R0b20uY2xhc3NMaXN0LmNvbnRhaW5zKCJ5dHAtdm9sdW1lLXNsaWRlci1hY3RpdmUiKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdm9sdW1lV2hlZWwuY0JvdHRvbS5jbGFzc0xpc3QuYWRkKCJ5dHAtdm9sdW1lLXNsaWRlci1hY3RpdmUiKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBpZiAodm9sdW1lV2hlZWwuY0JvdHRvbS50aW1lcikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh2b2x1bWVXaGVlbC5jQm90dG9tLnRpbWVyKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXBpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcGkuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoIm1vdXNlbW92ZSIpKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB2b2x1bWVXaGVlbC5jQm90dG9tLnRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoaGlkZVZvbHVtZSwgNDAwMCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbiA9IGV2ZW50ICYmIChldmVudC5kZWx0YVkgfHwgZXZlbnQud2hlZWxEZWx0YVkpOwogICAgICAgICAgICAgICAgICAgIGFwaS5zZXRWb2x1bWUocGxheWVyLnZvbHVtZSAqIDEwMCAtIChNYXRoLnNpZ24oZGlyZWN0aW9uKSAqIDUpKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWV2ZW50ICYmIHVzZXJfc2V0dGluZ3MuVklEX1ZPTF9XSEVFTCkgewogICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIndoZWVsIiwgdm9sdW1lV2hlZWwpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgIT09ICIvd2F0Y2giKSB7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigid2hlZWwiLCB2b2x1bWVXaGVlbCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gZHJhZ1BvcE91dChldmVudCkgewogICAgICAgICAgICAgICAgdmFyIGV4Y2x1ZGVkLCBpc0ZTY3JlZW47CiAgICAgICAgICAgICAgICBleGNsdWRlZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi55dHAtY2hyb21lLWJvdHRvbSIpOwogICAgICAgICAgICAgICAgaXNGU2NyZWVuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiLnl0cC1mdWxsc2NyZWVuIik7CiAgICAgICAgICAgICAgICBpZiAoZXZlbnQgJiYgIWlzRlNjcmVlbiAmJiAoIWV4Y2x1ZGVkIHx8IChldmVudC50YXJnZXQgIT09IGV4Y2x1ZGVkICYmICFleGNsdWRlZC5jb250YWlucyhldmVudC50YXJnZXQpKSkpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuYnV0dG9ucyA9PT0gMSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gIm1vdXNlZG93biIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNlbW92ZSIsIGRyYWdQb3BPdXQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLCBkcmFnUG9wT3V0LCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5vbGRQb3MgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWDogZXZlbnQuY2xpZW50WCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBZOiBldmVudC5jbGllbnRZLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZ1g6IGV2ZW50LmNsaWVudFgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JnWTogZXZlbnQuY2xpZW50WQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC50eXBlID09PSAibW91c2Vtb3ZlIiAmJiAod2luZG93Lmhhc01vdmVkIHx8IE1hdGguYWJzKGV2ZW50LmNsaWVudFggLSB3aW5kb3cub2xkUG9zLm9yZ1gpID4gMTAgfHwgTWF0aC5hYnMoZXZlbnQuY2xpZW50WSAtIHdpbmRvdy5vbGRQb3Mub3JnWSkgPiAxMCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5tb3ZlQnkoZXZlbnQuY2xpZW50WCAtIHdpbmRvdy5vbGRQb3MuWCwgZXZlbnQuY2xpZW50WSAtIHdpbmRvdy5vbGRQb3MuWSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuaGFzTW92ZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5idXR0b25zICE9PSAxIHx8IGV2ZW50LnR5cGUgPT09ICJjbGljayIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5oYXNNb3ZlZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHdpbmRvdy5vbGRQb3M7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgd2luZG93Lmhhc01vdmVkOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIm1vdXNlbW92ZSIsIGRyYWdQb3BPdXQpOwogICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCJjbGljayIsIGRyYWdQb3BPdXQsIHRydWUpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWV2ZW50ICYmIHdpbmRvdy5uYW1lID09PSAicG9wT3V0IikgewogICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNlZG93biIsIGRyYWdQb3BPdXQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIHJlc3VtZVBsYXliYWNrKCkgewogICAgICAgICAgICAgICAgdmFyIHRlbXAgPSB0aGlzLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoInZpZGVvIik7CiAgICAgICAgICAgICAgICBpZiAodGVtcCAmJiAhaXNOYU4odGVtcC5kdXJhdGlvbikgJiYgdGVtcC5jdXJyZW50VGltZSA8IHRlbXAuZHVyYXRpb24pIHsKICAgICAgICAgICAgICAgICAgICB0ZW1wID0gdGVtcC5jdXJyZW50VGltZTsKICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSAidD0iICsgdGVtcDsKICAgICAgICAgICAgICAgICAgICB9LCAwKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBwb3BQbGF5ZXIodXJsKSB7CiAgICAgICAgICAgICAgICB2YXIgcG9wT3V0LCB3aWR0aCwgaGVpZ2h0LCBwb3BfdXJsLCB2aWRlbzsKICAgICAgICAgICAgICAgIHdpZHRoID0gcGFyc2VJbnQodXNlcl9zZXR0aW5ncy5WSURfUFBPVF9TWikgfHwgNTMzOwogICAgICAgICAgICAgICAgaGVpZ2h0ID0gTWF0aC5yb3VuZCh3aWR0aCAvICgxNiAvIDkpKTsKICAgICAgICAgICAgICAgIHZpZGVvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigidmlkZW8iKTsKICAgICAgICAgICAgICAgIHBvcF91cmwgPSAoIXVybC50YXJnZXQgJiYgdXJsKSB8fCB3aW5kb3cubG9jYXRpb24uaHJlZi5zcGxpdCgvJnQ9WzAtOV0rfCN0PVswLTldK3wmdGltZT1bMC05XSsvKS5qb2luKCIiKTsKICAgICAgICAgICAgICAgIGlmICh1cmwudGFyZ2V0ICYmIHZpZGVvICYmIHZpZGVvLmN1cnJlbnRUaW1lICYmIHZpZGVvLmN1cnJlbnRUaW1lIDwgdmlkZW8uZHVyYXRpb24pIHsKICAgICAgICAgICAgICAgICAgICBwb3BfdXJsICs9ICIjdD0iICsgdmlkZW8uY3VycmVudFRpbWU7CiAgICAgICAgICAgICAgICAgICAgd2luZG93Lnl0cGxheWVyLmNvbmZpZy5hcmdzLnN0YXJ0ID0gdmlkZW8uY3VycmVudFRpbWU7CiAgICAgICAgICAgICAgICAgICAgYXBpLmN1ZVZpZGVvQnlQbGF5ZXJWYXJzKHdpbmRvdy55dHBsYXllci5jb25maWcuYXJncyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwb3BPdXQgPSB3aW5kb3cub3Blbihwb3BfdXJsLCAicG9wT3V0IiwgIndpZHRoPSIgKyB3aWR0aCArICIsaGVpZ2h0PSIgKyBoZWlnaHQpOwogICAgICAgICAgICAgICAgaWYgKHVybC50YXJnZXQpIHsKICAgICAgICAgICAgICAgICAgICBwb3BPdXQuYWRkRXZlbnRMaXN0ZW5lcigiYmVmb3JldW5sb2FkIiwgcmVzdW1lUGxheWJhY2spOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcG9wT3V0LmZvY3VzKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gc2V0U3ViUGxheWxpc3QoZXZlbnQpIHsKICAgICAgICAgICAgICAgIHZhciBpLCBsaXN0LCBidXR0b247CiAgICAgICAgICAgICAgICBsaXN0ID0gW107CiAgICAgICAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldC5wYXJlbnROb2RlICYmIGV2ZW50LnRhcmdldC5wYXJlbnROb2RlLmlkID09PSAic3Vic2NyaXB0aW9uLXBsYXlsaXN0IikgewogICAgICAgICAgICAgICAgICAgIGkgPSBzdWJQbGF5bGlzdC52aWRlb19saXN0Lmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaS0tKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpID4gLTEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QucHVzaChzdWJQbGF5bGlzdC52aWRlb19saXN0W2ldLmRhdGFzZXQudmlkZW9JZHMpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGxpc3QgPSBsaXN0LnJldmVyc2UoKS5zcGxpY2UoMCwgMjApLmpvaW4oIiUyQyIpOwogICAgICAgICAgICAgICAgICAgIHN1YlBsYXlsaXN0Lmxpc3RfdGl0bGUgPSBzdWJQbGF5bGlzdC5saXN0X3RpdGxlICYmIHN1YlBsYXlsaXN0Lmxpc3RfdGl0bGUucXVlcnlTZWxlY3RvcigiLmVwaWMtbmF2LWl0ZW0taGVhZGluZyIpLnRleHRDb250ZW50LnRyaW0oKTsKICAgICAgICAgICAgICAgICAgICBidXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgic3Vic2NyaXB0aW9uLXBsYXlsaXN0Iik7CiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmhyZWYgPSAiL3dhdGNoX3ZpZGVvcz90aXRsZT0iICsgc3ViUGxheWxpc3QubGlzdF90aXRsZSArICImdmlkZW9faWRzPSIgKyBsaXN0OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIHN1YlBsYXlsaXN0KCkgewogICAgICAgICAgICAgICAgdmFyIGJ1dHRvbiwgbmF2X21lbnU7CiAgICAgICAgICAgICAgICBuYXZfbWVudSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi5hcHBiYXItbmF2LW1lbnUiKTsKICAgICAgICAgICAgICAgIGJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJzdWJzY3JpcHRpb24tcGxheWxpc3QiKTsKICAgICAgICAgICAgICAgIHN1YlBsYXlsaXN0Lmxpc3RfdGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIuYXBwYmFyLW5hdi1tZW51Iik7CiAgICAgICAgICAgICAgICBzdWJQbGF5bGlzdC52aWRlb19saXN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgiYWRkdG8td2F0Y2gtbGF0ZXItYnV0dG9uIik7CiAgICAgICAgICAgICAgICBpZiAodXNlcl9zZXR0aW5ncy5HRU5fU1VCX0xJU1QgJiYgbmF2X21lbnUgJiYgd2luZG93LmxvY2F0aW9uLmhyZWYuc3BsaXQoIi9mZWVkL3N1YnNjcmlwdGlvbnMiKS5sZW5ndGggPiAxICYmICFidXR0b24gJiYgc3ViUGxheWxpc3QubGlzdF90aXRsZSAmJiBzdWJQbGF5bGlzdC52aWRlb19saXN0KSB7CiAgICAgICAgICAgICAgICAgICAgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgidGVtcGxhdGUiKTsKICAgICAgICAgICAgICAgICAgICBidXR0b24uaW5uZXJIVE1MID0gLy8KICAgICAgICAgICAgICAgICAgICAgICAgYDxsaSBpZD0nc3Vic2NyaXB0aW9uLXBsYXlsaXN0LWljb24nPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaWQ9J3N1YnNjcmlwdGlvbi1wbGF5bGlzdCcgZGF0YS1wPSd0dGx8U1VCX1BMU1QnIGNsYXNzPSd5dC11aXgtYnV0dG9uIHNwZi1saW5rIHl0LXVpeC1zZXNzaW9ubGluayB5dC11aXgtYnV0dG9uLWVwaWMtbmF2LWl0ZW0geXQtdWl4LWJ1dHRvbi1zaXplLWRlZmF1bHQnPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSd5dC11aXgtYnV0dG9uLWNvbnRlbnQgeXRwbHVzX3Nwcml0ZSc+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPmA7CiAgICAgICAgICAgICAgICAgICAgYnV0dG9uID0gc2V0TG9jYWxlKGJ1dHRvbi5jb250ZW50KS5maXJzdENoaWxkOwogICAgICAgICAgICAgICAgICAgIG5hdl9tZW51LmFwcGVuZENoaWxkKGJ1dHRvbik7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLCBzZXRTdWJQbGF5bGlzdCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gbG9hZENvbW1lbnRzKGV2ZW50KSB7CiAgICAgICAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldC5wYXJlbnROb2RlICYmIGV2ZW50LnRhcmdldC5wYXJlbnROb2RlLmlkID09PSAiUC1zaG93LWNvbW1lbnRzIikgewogICAgICAgICAgICAgICAgICAgIGlmIChtb2RDb21tZW50cy5jb21tZW50cy5sYXp5bG9hZCkgewogICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc3BmLmxvYWQuYXBwbHkobWFpbiwgbW9kQ29tbWVudHMuY29tbWVudHMubGF6eWxvYWQpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBtb2RDb21tZW50cy5jb21tZW50cy5jbGFzc0xpc3QudG9nZ2xlKCJzaG93Iik7CiAgICAgICAgICAgICAgICAgICAgbW9kQ29tbWVudHMud3JhcHBlci5xdWVyeVNlbGVjdG9yKCJidXR0b24iKS50ZXh0Q29udGVudCA9IGxhbmcoKG1vZENvbW1lbnRzLmNvbW1lbnRzLmNsYXNzTGlzdC5jb250YWlucygic2hvdyIpICYmICJISURFX0NNVFMiKSB8fCAiU0hPV19DTVRTIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gbW9kQ29tbWVudHMoKSB7CiAgICAgICAgICAgICAgICB2YXIgaXNfbGl2ZSA9IHdpbmRvdy55dHBsYXllciAmJiB3aW5kb3cueXRwbGF5ZXIuY29uZmlnICYmIHdpbmRvdy55dHBsYXllci5jb25maWcuYXJncyAmJiB3aW5kb3cueXRwbGF5ZXIuY29uZmlnLmFyZ3MubGl2ZXN0cmVhbTsKICAgICAgICAgICAgICAgIG1vZENvbW1lbnRzLmNvbW1lbnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIndhdGNoLWRpc2N1c3Npb24iKTsKICAgICAgICAgICAgICAgIGlmICghaXNfbGl2ZSAmJiBtb2RDb21tZW50cy5jb21tZW50cyAmJiAhZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIlAtc2hvdy1jb21tZW50cyIpICYmIHVzZXJfc2V0dGluZ3MuVklEX0hJREVfQ09NUyA9PT0gIjEiKSB7CiAgICAgICAgICAgICAgICAgICAgbW9kQ29tbWVudHMud3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInRlbXBsYXRlIik7CiAgICAgICAgICAgICAgICAgICAgbW9kQ29tbWVudHMud3JhcHBlci5pbm5lckhUTUwgPSAvLwogICAgICAgICAgICAgICAgICAgICAgICBgPGRpdiBpZD0nUC1zaG93LWNvbW1lbnRzJyBjbGFzcz0neXQtY2FyZCc+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSd5dC11aXgtYnV0dG9uIHl0LXVpeC1idXR0b24tZXhwYW5kZXInIGRhdGEtcD0ndG5kfFNIT1dfQ01UUyc+PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PmA7CiAgICAgICAgICAgICAgICAgICAgbW9kQ29tbWVudHMud3JhcHBlciA9IHNldExvY2FsZShtb2RDb21tZW50cy53cmFwcGVyLmNvbnRlbnQpLmZpcnN0Q2hpbGQ7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLCBsb2FkQ29tbWVudHMpOwogICAgICAgICAgICAgICAgICAgIG1vZENvbW1lbnRzLmNvbW1lbnRzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG1vZENvbW1lbnRzLndyYXBwZXIsIG1vZENvbW1lbnRzLmNvbW1lbnRzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBzZXRDdXN0b21TdHlsZXMoY2xzcykgewogICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdFt1c2VyX3NldHRpbmdzW2Nsc3NdID8gImFkZCIgOiAicmVtb3ZlIl0oY3VzdG9tU3R5bGVzLmN1c3RvbV9zdHlsZXNbY2xzc10pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIGN1c3RvbVN0eWxlcygpIHsKICAgICAgICAgICAgICAgIHZhciBjaGlsZCwgcGFyZW50LCBwbHJfYXBpLCBjb21tZW50cywgc2lkZWJhciwgeXRHcmlkLCBhZHZlcnRzLCBhZHNfbGlzdDsKICAgICAgICAgICAgICAgIGNvbW1lbnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIndhdGNoLWRpc2N1c3Npb24iKTsKICAgICAgICAgICAgICAgIHl0R3JpZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi55dC11aXgtbWVudS10b3AtbGV2ZWwtZmxvdy1idXR0b246bGFzdC1jaGlsZCBhIik7CiAgICAgICAgICAgICAgICBjdXN0b21TdHlsZXMuY3VzdG9tX3N0eWxlcyA9IHsKICAgICAgICAgICAgICAgICAgICBHRU5fRFNCTF9BRFMgICAgOiAicGFydF9ub19hZHMiLAogICAgICAgICAgICAgICAgICAgIEdFTl9CTFVFX0dMT1cgICA6ICJwYXJ0X2RzYmxfZ2xvdyIsCiAgICAgICAgICAgICAgICAgICAgR0VOX0hJREVfRlRSICAgIDogInBhcnRfaGlkZV9mb290ZXIiLAogICAgICAgICAgICAgICAgICAgIEdFTl9CVFRSX05URiAgICA6ICJwYXJ0X25vdGlmX2J1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgR0VOX0dSSURfU1VCUyAgIDogInBhcnRfZ3JpZF9zdWJzIiwKICAgICAgICAgICAgICAgICAgICBHRU5fR1JJRF9TUkNIICAgOiAicGFydF9ncmlkX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgR0VOX0NNUFRfVFRMUyAgIDogInBhcnRfY29tcGFjdF90aXRsZXMiLAogICAgICAgICAgICAgICAgICAgIFZJRF9QTFJfQVRQTCAgICA6ICJwYXJ0X2F1dG9wbGF5b24iLAogICAgICAgICAgICAgICAgICAgIFZJRF9QTFJfRklUICAgICA6ICJwYXJ0X2ZpdF90aGVhdGVyIiwKICAgICAgICAgICAgICAgICAgICBWSURfUExSX0RZTl9TSVpFOiAicGFydF9zdGF0aWNfc2l6ZSIsCiAgICAgICAgICAgICAgICAgICAgVklEX0hJREVfREVUTFMgIDogInBhcnRfaGlkZV9kZXRhaWxzIiwKICAgICAgICAgICAgICAgICAgICBWSURfVFRMX0NNUFQgICAgOiAicGFydF9jb21wYWN0X3RpdGxlIiwKICAgICAgICAgICAgICAgICAgICBWSURfREVTQ19TSFJUICAgOiAicGFydF9sYWJlbGxlc3NfYnV0dG9ucyIKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBpZiAod2luZG93Lnl0ICYmIHdpbmRvdy55dC5jb25maWdfICYmIHdpbmRvdy55dC5jb25maWdfLlBBR0VfTkFNRSA9PT0gInNoYXJlZF9jb252ZXJzYXRpb24iKSB7CiAgICAgICAgICAgICAgICAgICAgd2luZG93LnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCJbcmVsPSdzaG9ydGxpbmsnXSIpLmhyZWY7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5uYW1lID09PSAicG9wT3V0IikgewogICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCJwYXJ0X3BvcG91dCIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHl0R3JpZCAmJiB1c2VyX3NldHRpbmdzLkdFTl9HUklEX1NVQlMpIHsKICAgICAgICAgICAgICAgICAgICB5dEdyaWQuY2xpY2soKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcGxyX2FwaSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJwbGF5ZXItYXBpIik7CiAgICAgICAgICAgICAgICAgICAgc2lkZWJhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi5icmFuZGVkLXBhZ2UtdjItc2Vjb25kYXJ5LWNvbCIpOwogICAgICAgICAgICAgICAgICAgIGFkc19saXN0ID0gLy8KICAgICAgICAgICAgICAgICAgICAgICAgYCNtYXN0aGVhZF9jaGlsZCwKICAgICAgICAgICAgICAgICAgICAgICAgI2ZlZWQtcHl2LWNvbnRhaW5lciwKICAgICAgICAgICAgICAgICAgICAgICAgI3dhdGNoNy1zaWRlYmFyLWFkcywKICAgICAgICAgICAgICAgICAgICAgICAgI3dhdGNoNy1zaWRlYmFyLW9mZmVyLAogICAgICAgICAgICAgICAgICAgICAgICAuYWQtZGl2LAogICAgICAgICAgICAgICAgICAgICAgICAucHl2LWFmYy1hZHMtY29udGFpbmVyLAogICAgICAgICAgICAgICAgICAgICAgICAudmlkZW8tbGlzdC1pdGVtOm5vdCgucmVsYXRlZC1saXN0LWl0ZW0pOm5vdCguZGFzaGJvYXJkLXdpZGdldC1pdGVtKWA7CiAgICAgICAgICAgICAgICAgICAgYWR2ZXJ0cyA9IHVzZXJfc2V0dGluZ3MuR0VOX0RTQkxfQURTICYmIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYWRzX2xpc3QpOwogICAgICAgICAgICAgICAgICAgIHdoaWxlIChhZHZlcnRzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkID0gYWR2ZXJ0czsKICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGNoaWxkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQgPSBjaGlsZC5wYXJlbnROb2RlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudC5jaGlsZEVsZW1lbnRDb3VudCA+IDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZC5vdXRlckhUTUwgPSAiIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkID0gcGFyZW50OwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGFkdmVydHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGFkc19saXN0KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKCh3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgPT09ICIvcmVzdWx0cyIgJiYgc2lkZWJhciAmJiBzaWRlYmFyLnF1ZXJ5U2VsZWN0b3JBbGwoIioiKS5sZW5ndGggPCAxMCkgfHwgKHNpZGViYXIgJiYgKCh1c2VyX3NldHRpbmdzLkdFTl9IREVfUkVDTV9TREJSICYmIHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNwbGl0KCIvZmVlZC9zdWJzY3JpcHRpb25zIikubGVuZ3RoID4gMSkgfHwgKHVzZXJfc2V0dGluZ3MuR0VOX0hERV9TUkNIX1NEQlIgJiYgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lID09PSAiL3Jlc3VsdHMiKSB8fCAodXNlcl9zZXR0aW5ncy5HRU5fSERFX0NITl9TREJSICYmIHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNwbGl0KC9cLyhjaGFubmVsfHVzZXJ8YylcLy8pLmxlbmd0aCA+IDEpKSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2lkZWJhci5vdXRlckhUTUwgPSAiIjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSA9PT0gIi93YXRjaCIgJiYgdXNlcl9zZXR0aW5ncy5WSURfSElERV9DT01TID4gMSAmJiBjb21tZW50cykgewogICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50cy5vdXRlckhUTUwgPSAiIjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKHVzZXJfc2V0dGluZ3MuVklEX0hJREVfQ09NUyA9PT0gIjEiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCJwYXJ0X2hpZGVfY29tbWVudHMiKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHVzZXJfc2V0dGluZ3MuVklEX0hJREVfQ09NUyAhPT0gIjEiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCJwYXJ0X2hpZGVfY29tbWVudHMiKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKHVzZXJfc2V0dGluZ3MuVklEX1BMUl9GSVQgJiYgcGxyX2FwaSAmJiAoISFwbHJfYXBpLnN0eWxlLm1heFdpZHRoIHx8IHBscl9hcGkuc3R5bGUubWF4V2lkdGggIT09IHVzZXJfc2V0dGluZ3MuVklEX1BMUl9GSVRfV0RUSCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcGxyX2FwaS5zdHlsZS5tYXhXaWR0aCA9IHVzZXJfc2V0dGluZ3MuVklEX1BMUl9GSVRfV0RUSCB8fCAiMTI4MHB4IjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoY3VzdG9tU3R5bGVzLmN1c3RvbV9zdHlsZXMpLmZvckVhY2goc2V0Q3VzdG9tU3R5bGVzKTsKICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93LmxvY2F0aW9uLmhyZWYuc3BsaXQoIi9mZWVkL3N1YnNjcmlwdGlvbnMiKS5sZW5ndGggPCAyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCJwYXJ0X2dyaWRfc3VicyIpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBkZWZhdWx0Q2hhbm5lbFBhZ2UoZXZlbnQpIHsKICAgICAgICAgICAgICAgIHZhciBwYXJlbnROb2RlOwogICAgICAgICAgICAgICAgaWYgKHVzZXJfc2V0dGluZ3MuR0VOX0NITl9ERkxUX1BBR0UgIT09ICJkZWZhdWx0IikgewogICAgICAgICAgICAgICAgICAgIGlmIChldmVudCAmJiBldmVudC50YXJnZXQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IGV2ZW50LnRhcmdldDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LnRhcmdldC50YWdOYW1lICE9PSAiQSIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChwYXJlbnROb2RlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50Tm9kZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyZW50Tm9kZSAmJiBwYXJlbnROb2RlLnRhZ05hbWUgPT09ICJBIikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudE5vZGUgJiYgcGFyZW50Tm9kZS5ocmVmICYmIHBhcmVudE5vZGUuaHJlZi5zcGxpdCh1c2VyX3NldHRpbmdzLkdFTl9DSE5fREZMVF9QQUdFKS5sZW5ndGggPCAyICYmIChwYXJlbnROb2RlLmhyZWYuc3BsaXQoIi9jaGFubmVsLyIpLmxlbmd0aCA+IDEgfHwgcGFyZW50Tm9kZS5ocmVmLnNwbGl0KCIvdXNlci8iKS5sZW5ndGggPiAxKSAmJiBwYXJlbnROb2RlLmhyZWYuc3BsaXQoL1thLXowLTldXC9bYS16MC05XS9pKS5sZW5ndGggPCA0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnROb2RlLmhyZWYgKz0gIi8iICsgdXNlcl9zZXR0aW5ncy5HRU5fQ0hOX0RGTFRfUEFHRTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNldXAiLCBkZWZhdWx0Q2hhbm5lbFBhZ2UpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBtb2RBcmdzKGNvbmZpZykgewogICAgICAgICAgICAgICAgdmFyIGksIHRlbXAsIGxpc3QsIGxlbmd0aCwgdmlkZW9zLCBuZXdfbGlzdCwgY2FuX3NoYXJlOwogICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5hcmdzLnZpZGVvX2lkKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5uYW1lID09PSAicG9wT3V0IikgewogICAgICAgICAgICAgICAgICAgICAgICBjYW5fc2hhcmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIucGxheWxpc3QtaGVhZGVyLWNvbnRlbnQiKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbl9zaGFyZSAmJiBjYW5fc2hhcmUuZGF0YXNldC5zaGFyZWFibGUgPT09ICJGYWxzZSIgJiYgIWNvbmZpZy5hcmdzLnZpZGVvKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuYXJncy52aWRlbyA9IFtdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlkZW9zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgibGlbZGF0YS12aWRlby1pZF0iKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbmd0aCA9IHZpZGVvcy5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuYXJncy52aWRlb1tpXSA9IHsiZW5jcnlwdGVkX2lkIjogdmlkZW9zW2ldLmdldEF0dHJpYnV0ZSgiZGF0YS12aWRlby1pZCIpfTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC50aXRsZSA9IGNvbmZpZy5hcmdzLnRpdGxlOwogICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuYXJncy5lbCA9ICJlbWJlZGRlZCI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGNvbmZpZy5hcmdzLnZxID0gdXNlcl9zZXR0aW5ncy5WSURfREZMVF9RTFRZOwogICAgICAgICAgICAgICAgICAgIGlmICh1c2VyX3NldHRpbmdzLlZJRF9ERkxUX1FMVFkgIT09ICJhdXRvIikgewogICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZVsieXQtcGxheWVyLXF1YWxpdHkiXSA9IEpTT04uc3RyaW5naWZ5KHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGF0YSI6IHVzZXJfc2V0dGluZ3MuVklEX0RGTFRfUUxUWSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZXhwaXJhdGlvbiI6IG5ldyBEYXRlKCkuZ2V0VGltZSgpICsgODY0RTUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImNyZWF0aW9uIjogbmV3IERhdGUoKS5nZXRUaW1lKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChpZ25vcmUpIHt9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmIChjb25maWcuYXJncy5jYXB0aW9uX2F1ZGlvX3RyYWNrcyAmJiB1c2VyX3NldHRpbmdzLlZJRF9QTFJfQ0MpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLmFyZ3MuY2FwdGlvbl9hdWRpb190cmFja3MgPSBjb25maWcuYXJncy5jYXB0aW9uX2F1ZGlvX3RyYWNrcy5zcGxpdCgvJmQ9WzAtOV18ZD1bMC05XSYvKS5qb2luKCIiKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKHVzZXJfc2V0dGluZ3MuVklEX1BMUl9WT0xfTEROKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjb25maWcuYXJncy5sb3VkbmVzczsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKHVzZXJfc2V0dGluZ3MuVklEX1BMUl9IVE1MNSkgewogICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuaHRtbDUgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAodXNlcl9zZXR0aW5ncy5WSURfUExSX0lORk8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLmFyZ3Muc2hvd2luZm8gPSAiMSI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cub3BlbmVyICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoICE9PSAiIikgewogICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuYXJncy5hdXRvcGxheSA9ICIxIjsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF1c2VyX3NldHRpbmdzLlZJRF9QTFJfQVRQTCkgewogICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuYXJncy5hdXRvcGxheSA9ICIwIjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKHVzZXJfc2V0dGluZ3MuVklEX1BMUl9TSVpFX01FTSkgewogICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuYXJncy5wbGF5ZXJfd2lkZSA9ICh1c2VyX3NldHRpbmdzLnRoZWF0ZXJNb2RlICYmICIxIikgfHwgIjAiOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93Lnl0cHNldHdpZGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy55dHBzZXR3aWRlKCJ3aWRlIiwgY29uZmlnLmFyZ3MucGxheWVyX3dpZGUsIC0xKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlnLmFyZ3MuaXZfbG9hZF9wb2xpY3kgJiYgdXNlcl9zZXR0aW5ncy5WSURfUExSX0FOVFMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLmFyZ3MuaXZfbG9hZF9wb2xpY3kgPSAiMyI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmICh1c2VyX3NldHRpbmdzLlZJRF9QTFJfQURTICYmICghdXNlcl9zZXR0aW5ncy5WSURfU1VCX0FEUyB8fCAodXNlcl9zZXR0aW5ncy5WSURfU1VCX0FEUyAmJiAhY29uZmlnLmFyZ3Muc3Vic2NyaWJlZCkpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjb25maWcuYXJncy5hZDNfbW9kdWxlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlnLmFyZ3Mudm1hcCAmJiAhdXNlcl9zZXR0aW5ncy5WSURfUExSX0FUUEwgJiYgIXVzZXJfc2V0dGluZ3MuVklEX1BMUl9BRFMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLmFyZ3MuZHZtYXAgPSBjb25maWcuYXJncy52bWFwOwogICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgY29uZmlnLmFyZ3Mudm1hcDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5hcmdzLmFkYXB0aXZlX2ZtdHMgJiYgdXNlcl9zZXR0aW5ncy5WSURfUExSX0hGUikgewogICAgICAgICAgICAgICAgICAgICAgICBuZXdfbGlzdCA9IFtdOwogICAgICAgICAgICAgICAgICAgICAgICBsaXN0ID0gY29uZmlnLmFyZ3MuYWRhcHRpdmVfZm10cy5zcGxpdCgiLCIpOwogICAgICAgICAgICAgICAgICAgICAgICBpID0gbGlzdC5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChpLS0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXAgPSBsaXN0W2ldLnNwbGl0KC9mcHNcPShbMC05XXsyfSkvKVsxXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGVtcCB8fCB0ZW1wIDwgMzEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdfbGlzdC5wdXNoKGxpc3RbaV0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy5hcmdzLmFkYXB0aXZlX2ZtdHMgPSBuZXdfbGlzdC5qb2luKCIsIik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cueXRwbGF5ZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy55dHBsYXllci5jb25maWcgPT09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy55dHBsYXllci5jb25maWcgPSBjb25maWc7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAod2luZG93Lnl0cGxheWVyLmNvbmZpZykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Lnl0cGxheWVyLmNvbmZpZy5hcmdzID0gY29uZmlnLmFyZ3M7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gY29uZmlnOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIGdlbmVyYWxDaGFuZ2VzKCkgewogICAgICAgICAgICAgICAgdmFyIGxvZ28sIGNoZWNrYm94LCBhdXRvcGxheWJhciwgZGVzY3JpcHRpb247CiAgICAgICAgICAgICAgICBhdXRvcGxheWJhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi5hdXRvcGxheS1iYXIiKTsKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImFjdGlvbi1wYW5lbC1kZXRhaWxzIik7CiAgICAgICAgICAgICAgICBpZiAodXNlcl9zZXR0aW5ncy5HRU5fWVRfTE9HT19MSU5LICYmIHdpbmRvdy55dCAmJiB3aW5kb3cueXQuY29uZmlnXyAmJiB3aW5kb3cueXQuY29uZmlnXy5MT0dHRURfSU4pIHsKICAgICAgICAgICAgICAgICAgICBsb2dvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigibWFwW25hbWU9J2Rvb2RsZSddID4gYXJlYSwgYSNsb2dvLWNvbnRhaW5lciIpOwogICAgICAgICAgICAgICAgICAgIGlmIChsb2dvICYmIGxvZ28uaHJlZiA9PT0gd2luZG93LmxvY2F0aW9uLm9yaWdpbiArICIvIikgewogICAgICAgICAgICAgICAgICAgICAgICBsb2dvLmhyZWYgPSAiL2ZlZWQvc3Vic2NyaXB0aW9ucyI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHVzZXJfc2V0dGluZ3MuR0VOX1JFTV9BUFVOICYmIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSA9PT0gIi93YXRjaCIgJiYgYXV0b3BsYXliYXIpIHsKICAgICAgICAgICAgICAgICAgICBjaGVja2JveCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi5jaGVja2JveC1vbi1vZmYiKTsKICAgICAgICAgICAgICAgICAgICBpZiAoY2hlY2tib3gpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tib3gub3V0ZXJIVE1MID0gIiI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHVzZXJfc2V0dGluZ3MuVklEX0xBWVRfQVVUT19QTkwgJiYgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lID09PSAiL3dhdGNoIiAmJiBkZXNjcmlwdGlvbikgewogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uLmNsYXNzTGlzdC5yZW1vdmUoInl0LXVpeC1leHBhbmRlci1jb2xsYXBzZWQiKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICh1c2VyX3NldHRpbmdzLkdFTl9TUEZfT0ZGICYmIHdpbmRvdy5zcGYgJiYgd2luZG93LnNwZi5kaXNwb3NlKSB7CiAgICAgICAgICAgICAgICAgICAgd2luZG93LnNwZi5kaXNwb3NlKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gbG9jYWxYSFIobWV0aG9kLCBjYWxsLCB1cmwsIGhlYWQpIHsKICAgICAgICAgICAgICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7CiAgICAgICAgICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoImxvYWQiLCBjYWxsKTsKICAgICAgICAgICAgICAgIHJlcXVlc3Qub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICBpZiAoaGVhZCAmJiBoZWFkICE9PSAiZG9jIikgewogICAgICAgICAgICAgICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihoZWFkWzBdLCBoZWFkWzFdKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSAiZG9jdW1lbnQiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmVxdWVzdC5zZW5kKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gcGxheWVyTW9kZSgpIHsKICAgICAgICAgICAgICAgIHZhciBwYWdlRWxlbWVudCwgcGxheWVyRWxlbWVudDsKICAgICAgICAgICAgICAgIGlmICh1c2VyX3NldHRpbmdzLlZJRF9QTFJfU0laRV9NRU0pIHsKICAgICAgICAgICAgICAgICAgICBwYWdlRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJwYWdlIik7CiAgICAgICAgICAgICAgICAgICAgcGxheWVyRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJwbGF5ZXIiKTsKICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93Lnl0cHNldHdpZGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Lnl0cHNldHdpZGUoIndpZGUiLCAodXNlcl9zZXR0aW5ncy50aGVhdGVyTW9kZSA/ICIxIiA6ICIwIiksIC0xKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKHBsYXllckVsZW1lbnQgJiYgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lID09PSAiL3dhdGNoIikgewogICAgICAgICAgICAgICAgICAgICAgICBwYWdlRWxlbWVudC5jbGFzc0xpc3RbdXNlcl9zZXR0aW5ncy50aGVhdGVyTW9kZSA/ICJhZGQiIDogInJlbW92ZSJdKCJ3YXRjaC13aWRlIik7CiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VFbGVtZW50LmNsYXNzTmFtZSA9IHBhZ2VFbGVtZW50LmNsYXNzTmFtZS5yZXBsYWNlKHVzZXJfc2V0dGluZ3MudGhlYXRlck1vZGUgPyAibm9uLSIgOiAid2F0Y2gtc3RhZ2UiLCB1c2VyX3NldHRpbmdzLnRoZWF0ZXJNb2RlID8gIiIgOiAid2F0Y2gtbm9uLXN0YWdlIik7CiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllckVsZW1lbnQuY2xhc3NOYW1lID0gdXNlcl9zZXR0aW5ncy50aGVhdGVyTW9kZSA/IHBsYXllckVsZW1lbnQuY2xhc3NOYW1lLnJlcGxhY2UoInNtYWxsIiwgImxhcmdlIikgOiBwbGF5ZXJFbGVtZW50LmNsYXNzTmFtZS5yZXBsYWNlKCJsYXJnZSIsICJzbWFsbCIpLnJlcGxhY2UoIm1lZGl1bSIsICJzbWFsbCIpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBpbmZpbml0ZVNjcm9sbCgpIHsKICAgICAgICAgICAgICAgIHZhciBvYnNlcnZlciwgbG9hZE1vcmU7CiAgICAgICAgICAgICAgICBsb2FkTW9yZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi5sb2FkLW1vcmUtYnV0dG9uIik7CiAgICAgICAgICAgICAgICBpZiAobG9hZE1vcmUgJiYgdXNlcl9zZXR0aW5ncy5HRU5fSU5GX1NDUkwpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIWxvYWRNb3JlLmNsYXNzTGlzdC5jb250YWlucygiaW5maW5pdGVTY3JvbGwiKSkgewogICAgICAgICAgICAgICAgICAgICAgICBsb2FkTW9yZS5jbGFzc0xpc3QuYWRkKCJpbmZpbml0ZVNjcm9sbCIpOwogICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGluZmluaXRlU2Nyb2xsKTsKICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShsb2FkTW9yZSwge2F0dHJpYnV0ZXM6IHRydWV9KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKCFsb2FkTW9yZS5jbGFzc0xpc3QuY29udGFpbnMoInNjcm9sbGRldGVjdCIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRNb3JlLmNsYXNzTGlzdC5hZGQoInNjcm9sbGRldGVjdCIpOwogICAgICAgICAgICAgICAgICAgICAgICBsb2FkTW9yZS5kYXRhc2V0LnNjcm9sbGRldGVjdENhbGxiYWNrID0gImxvYWQtbW9yZS1hdXRvIjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gY2hlY2tOZXdGZWF0dXJlcygpIHsKICAgICAgICAgICAgICAgIHZhciBpLCBrZXlzOwogICAgICAgICAgICAgICAga2V5cyA9IE9iamVjdC5rZXlzKGRlZmF1bHRfc2V0dGluZ3MpOwogICAgICAgICAgICAgICAgaSA9IGtleXMubGVuZ3RoOwogICAgICAgICAgICAgICAgd2hpbGUgKGkpIHsKICAgICAgICAgICAgICAgICAgICBpIC09IDE7CiAgICAgICAgICAgICAgICAgICAgaWYgKCF1c2VyX3NldHRpbmdzLmhhc093blByb3BlcnR5KGtleXNbaV0pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNldChrZXlzW2ldLCBkZWZhdWx0X3NldHRpbmdzW2tleXNbaV1dKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gc2hhcmVBcGkob3JpZ2luYWwpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgcGxheWVyUmVhZHkoKTsKICAgICAgICAgICAgICAgICAgICBpZiAob3JpZ2luYWwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiByZXF1ZXN0KGV2ZW50KSB7CiAgICAgICAgICAgICAgICB2YXIgdmlkZW9fcGxheWVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1vdmllX3BsYXllciIpOwogICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoImZsb2F0ZXIiKTsKICAgICAgICAgICAgICAgIGlmICh2aWRlb19wbGF5ZXIpIHsKICAgICAgICAgICAgICAgICAgICB2aWRlb19wbGF5ZXIucmVtb3ZlQXR0cmlidXRlKCJzdHlsZSIpOwogICAgICAgICAgICAgICAgICAgIGlmICghdXNlcl9zZXR0aW5ncy5WSURfUExSX0FUUEwgfHwgZXZlbnQuZGV0YWlsLnVybC5zcGxpdCgiL3dhdGNoIikubGVuZ3RoIDwgMikgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93Lnl0cGxheWVyICYmIHdpbmRvdy55dHBsYXllci5jb25maWcgJiYgd2luZG93Lnl0cGxheWVyLmNvbmZpZy5sb2FkZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB3aW5kb3cueXRwbGF5ZXIuY29uZmlnLmxvYWRlZDsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBhcGkuZGVzdHJveSgpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBwYWdlU2NyaXB0TWVzc2FnZXMoKSB7CiAgICAgICAgICAgICAgICB2YXIga2V5LCBnYXRlLCBzZXRzLCBvYnNlcnZlcjsKICAgICAgICAgICAgICAgIGtleSA9ICJwYXJyZWNlaXZlIjsKICAgICAgICAgICAgICAgIGdhdGUgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7CiAgICAgICAgICAgICAgICBzZXRzID0gSlNPTi5wYXJzZShnYXRlLmRhdGFzZXRba2V5XSB8fCBudWxsKTsKICAgICAgICAgICAgICAgIGlmICghZ2F0ZS5wYWdlc2NyaXB0KSB7CiAgICAgICAgICAgICAgICAgICAgZ2F0ZS5wYWdlc2NyaXB0ID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKHBhZ2VTY3JpcHRNZXNzYWdlcyk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9ic2VydmVyLm9ic2VydmUoZ2F0ZSwgewogICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOnRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZUZpbHRlcjogWyJkYXRhLSIgKyBrZXldCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoc2V0cykgewogICAgICAgICAgICAgICAgICAgIHVzZXJfc2V0dGluZ3MgPSBzZXRzOwogICAgICAgICAgICAgICAgICAgIGdhdGUuZGF0YXNldFtrZXldID0gbnVsbDsKICAgICAgICAgICAgICAgICAgICBjdXN0b21TdHlsZXMoKTsKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCJkYXRhLXBhcnJlY2VpdmUiKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBzZXQoc2V0dGluZywgbmV3X3ZhbHVlKSB7CiAgICAgICAgICAgICAgICBpZiAoc2V0dGluZyAhPT0gInVzZXJfc2V0dGluZ3MiKSB7CiAgICAgICAgICAgICAgICAgICAgdXNlcl9zZXR0aW5nc1tzZXR0aW5nXSA9IG5ld192YWx1ZTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdXNlcl9zZXR0aW5ncyA9IG5ld192YWx1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kYXRhc2V0LnBhcnNlbmQgPSBKU09OLnN0cmluZ2lmeSh1c2VyX3NldHRpbmdzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBtYWluKCkgewogICAgICAgICAgICAgICAgcGFnZVNjcmlwdE1lc3NhZ2VzKCk7CiAgICAgICAgICAgICAgICBjdXN0b21TdHlsZXMoKTsKICAgICAgICAgICAgICAgIHNldHRpbmdzTWVudSgpOwogICAgICAgICAgICAgICAgaW5maW5pdGVTY3JvbGwoKTsKICAgICAgICAgICAgICAgIHBsYXlsaXN0Q29udHJvbHMoKTsKICAgICAgICAgICAgICAgIHBsYXllck1vZGUoKTsKICAgICAgICAgICAgICAgIGFkdmFuY2VkT3B0aW9ucygpOwogICAgICAgICAgICAgICAgdm9sdW1lV2hlZWwoKTsKICAgICAgICAgICAgICAgIHN1YlBsYXlsaXN0KCk7CiAgICAgICAgICAgICAgICBhbHdheXNWaXNpYmxlKCk7CiAgICAgICAgICAgICAgICBtb2RUaHVtYnMoKTsKICAgICAgICAgICAgICAgIGVuaGFuY2VkRGV0YWlscygpOwogICAgICAgICAgICAgICAgbW9kQ29tbWVudHMoKTsKICAgICAgICAgICAgICAgIGRlZmF1bHRDaGFubmVsUGFnZSgpOwogICAgICAgICAgICAgICAgZ2VuZXJhbENoYW5nZXMoKTsKICAgICAgICAgICAgICAgIGRyYWdQb3BPdXQoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiBpc01hdGVyaWFsKCkgewogICAgICAgICAgICAgICAgdmFyIGksIHRlbXA7CiAgICAgICAgICAgICAgICB0ZW1wID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgibGluayIpOwogICAgICAgICAgICAgICAgaSA9IHRlbXAubGVuZ3RoOwogICAgICAgICAgICAgICAgd2hpbGUgKGktLSkgewogICAgICAgICAgICAgICAgICAgIGlmICh0ZW1wW2ldLmhyZWYubWF0Y2goIm9seW1lciIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJ0ZW1wbGF0ZSIpOwogICAgICAgICAgICAgICAgICAgICAgICB0ZW1wLmlubmVySFRNTCA9IC8vCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgPGRpdiBzdHlsZT0nYm9yZGVyLXJhZGl1czoycHg7Y29sb3I6I0ZGRjtwYWRkaW5nOjEwcHg7YmFja2dyb3VuZC1jb2xvcjojMDlGO2JveC1zaGFkb3c6MCAwIDNweCByZ2JhKDAsMCwwLC41KTtmb250LXNpemU6MTJweDtwb3NpdGlvbjpmaXhlZDtib3R0b206MjBweDtyaWdodDoyMHB4O3otaW5kZXg6OTk5OTknPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgWW91VHViZSBQbHVzIGlzIG5vdCB5ZXQgY29tcGF0aWJsZSB3aXRoIHRoZSBZb3VUdWJlIGJldGEgTWF0ZXJpYWwgTGF5b3V0PGJyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0naHR0cHM6Ly9naXRodWIuY29tL1BhcnRpY2xlQ29yZS9QYXJ0aWNsZS93aWtpL1Jlc3RvcmUtY2xhc3NpYy1Zb3VUdWJlJyB0YXJnZXQ9J19ibGFuaycgc3R5bGU9J2NvbG9yOiNGRkY7Zm9udC13ZWlnaHQ6Ym9sZDsnPkNsaWNrIGhlcmU8L2E+IGZvciBpbnN0cnVjdGlvbnMgdG8gcmVzdG9yZSBjbGFzc2ljIFlvdVR1YmUgYW5kIGNvbnRpbnVlIHVzaW5nIFlUKzxicj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRvIGtlZXAgdXNpbmcgdGhlIGN1cnJlbnQgbGF5b3V0IHdpdGhvdXQgdGhpcyBtZXNzYWdlIHBsZWFzZSBkaXNhYmxlIFlUKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+YDsKICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKHRlbXAuY29udGVudC5maXJzdENoaWxkKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIGNsb3NlTWlncmF0aW9uSW5zdHJ1Y3Rpb25zKGV2ZW50KSB7CiAgICAgICAgICAgICAgICBpZiAoZXZlbnQgJiYgZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldC5pZCA9PT0gImNsb3NlX21pZ3JhdGlvbl9pbnN0cnVjdGlvbnMiKSB7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigiY2xpY2siLCBjbG9zZU1pZ3JhdGlvbkluc3RydWN0aW9ucyk7CiAgICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LnBhcmVudE5vZGUub3V0ZXJIVE1MID0gIiI7CiAgICAgICAgICAgICAgICAgICAgc2V0KCJtaWdyYXRpb25faW5zdHJ1Y3Rpb25zIiwgdHJ1ZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gbWlncmF0aW9uSW5zdHJ1Y3Rpb25zKCkgewogICAgICAgICAgICAgICAgdmFyIHRlbXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJ0ZW1wbGF0ZSIpOwogICAgICAgICAgICAgICAgdGVtcC5pbm5lckhUTUwgPSAvLwogICAgICAgICAgICAgICAgICAgIGA8ZGl2IHN0eWxlPSdib3JkZXItcmFkaXVzOiAycHg7IGNvbG9yOiAjRkZGOyBmb250OiAxMnB4IFJvYm90byxhcmlhbCxzYW5zLXNlcmlmOyBwYWRkaW5nOiAxMHB4OyBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMCwgMTUzLCAyNTUpOyBib3gtc2hhZG93OiAwcHggMHB4IDNweCByZ2JhKDAsIDAsIDAsIDAuNSk7IHBvc2l0aW9uOiBmaXhlZDsgei1pbmRleDogOTk5OTk7IHRvcDogNTAlOyBsZWZ0OiA1MCU7IHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpOyc+CiAgICAgICAgICAgICAgICAgICAgWW91VHViZSBQbHVzIGhhcyBiZWVuIHVwZGF0ZWQgYW5kIGlzIG5vdyBhIFdlYmV4dGVuc2lvbi4gVW5mb3J0dW5hdGVseSB0aGlzIG1lYW5zIHRoYXQgeW91ciBwcmV2aW91cyBzZXR0aW5ncyBuZWVkIHRvIGJlIGltcG9ydGVkIG1hbnVhbGx5Ljxicj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSdodHRwczovL2dpdGh1Yi5jb20vUGFydGljbGVDb3JlL1BhcnRpY2xlL3dpa2kvUmVzdG9yZS1zZXR0aW5ncycgdGFyZ2V0PSdfYmxhbmsnIHN0eWxlPSdjb2xvcjojRkZGO2ZvbnQtd2VpZ2h0OmJvbGQ7Jz5DbGljayBoZXJlPC9hPiBpZiB5b3Ugd2lzaCB0byBpbXBvcnQgdGhlIHByZXZpb3VzIHNldHRpbmdzIG9yIGtub3cgbW9yZSBhYm91dCB0aGlzIGNoYW5nZS48YnI+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0nY2xvc2VfbWlncmF0aW9uX2luc3RydWN0aW9ucycgc3R5bGU9J2JhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKTsgY29sb3I6ICNGRkY7IGN1cnNvcjogcG9pbnRlcjsgbWFyZ2luLXRvcDogMTBweDsgYm9yZGVyLXJhZGl1czogMnB4OyBwYWRkaW5nOiA0cHg7IGZsb2F0OiByaWdodDsnPkNMT1NFPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+YDsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCh0ZW1wLmNvbnRlbnQuZmlyc3RDaGlsZCk7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsIGNsb3NlTWlncmF0aW9uSW5zdHJ1Y3Rpb25zKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgYXBpLCBjaWQsIGV2ZW50cywgbGFuZ3VhZ2UsIHVzZXJfc2V0dGluZ3MsIHBsYXllcl9pbnN0YW5jZSwgZGVmYXVsdF9zZXR0aW5nczsKICAgICAgICAgICAgaWYgKGlzTWF0ZXJpYWwoKSkgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNpZCA9IHt9OwogICAgICAgICAgICBldmVudHMgPSB7fTsKICAgICAgICAgICAgdXNlcl9zZXR0aW5ncyA9IEpTT04ucGFyc2UoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRhdGFzZXQudXNlcl9zZXR0aW5ncyB8fCBudWxsKTsKICAgICAgICAgICAgaWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kYXRhc2V0LnVzZXJfc2V0dGluZ3MpIHsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoImRhdGEtdXNlcl9zZXR0aW5ncyIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGRlZmF1bHRfc2V0dGluZ3MgPSB7CiAgICAgICAgICAgICAgICBHRU5fQlRUUl9OVEYgICAgOiB0cnVlLAogICAgICAgICAgICAgICAgR0VOX1NVQl9MSVNUICAgIDogdHJ1ZSwKICAgICAgICAgICAgICAgIEdFTl9JTkZfU0NSTCAgICA6IHRydWUsCiAgICAgICAgICAgICAgICBHRU5fQkxVRV9HTE9XICAgOiB0cnVlLAogICAgICAgICAgICAgICAgR0VOX1BQT1RfT04gICAgIDogdHJ1ZSwKICAgICAgICAgICAgICAgIFZJRF9FTkRfU0hSRSAgICA6IHRydWUsCiAgICAgICAgICAgICAgICBWSURfREZMVF9RTFRZICAgOiAiYXV0byIsCiAgICAgICAgICAgICAgICBWSURfUExTVF9BVFBMICAgOiB0cnVlLAogICAgICAgICAgICAgICAgVklEX1BMU1RfUlZSUyAgIDogdHJ1ZSwKICAgICAgICAgICAgICAgIFZJRF9QTFJfQVRQTCAgICA6IHRydWUsCiAgICAgICAgICAgICAgICBWSURfUExSX0FMVklTICAgOiB0cnVlLAogICAgICAgICAgICAgICAgVklEX1BMUl9TSVpFX01FTTogdHJ1ZSwKICAgICAgICAgICAgICAgIFZJRF9QTFJfVk9MX0xETiA6IHRydWUsCiAgICAgICAgICAgICAgICBWSURfUE9TVF9USU1FICAgOiB0cnVlLAogICAgICAgICAgICAgICAgVklEX1ZJRF9DTlQgICAgIDogdHJ1ZSwKICAgICAgICAgICAgICAgIFZJRF9ERVNDX1NIUlQgICA6IHRydWUsCiAgICAgICAgICAgICAgICBWSURfUFBPVF9TWiAgICAgOiA1MzMsCiAgICAgICAgICAgICAgICBWSURfUExSX0hUTUw1ICAgOiB0cnVlLAogICAgICAgICAgICAgICAgQkxLX09OICAgICAgICAgIDogdHJ1ZSwKICAgICAgICAgICAgICAgIGZsb2F0ZXJYICAgICAgICA6IDIwMDAsCiAgICAgICAgICAgICAgICBmbG9hdGVyWSAgICAgICAgOiAyMDAwLAogICAgICAgICAgICAgICAgZmlyc3RUaW1lICAgICAgIDogdHJ1ZSwKICAgICAgICAgICAgICAgIHZvbExldiAgICAgICAgICA6IDUwLAogICAgICAgICAgICAgICAgYWR2T3B0cyAgICAgICAgIDogdHJ1ZSwKICAgICAgICAgICAgICAgIGJsYWNrbGlzdCAgICAgICA6IHt9CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGxhbmd1YWdlID0gewogICAgICAgICAgICAgICAgWVRTRVRTICAgICAgICAgICAgICAgIDogIllvdVR1YmUrIHNldHRpbmdzIiwKICAgICAgICAgICAgICAgIEFEVl9PUFRTICAgICAgICAgICAgICA6ICJBZHZhbmNlZCBvcHRpb25zIiwKICAgICAgICAgICAgICAgIFNVQl9QTFNUICAgICAgICAgICAgICA6ICJQbGF5IHJlY2VudCB1cGxvYWRzIiwKICAgICAgICAgICAgICAgIFBQT1RfT1BFTiAgICAgICAgICAgICA6ICJPcGVuIGluIHBvcC1vdXQiLAogICAgICAgICAgICAgICAgQkxDS19BREQgICAgICAgICAgICAgIDogIkFkZCB0byBibGFja2xpc3QiLAogICAgICAgICAgICAgICAgQkxDS19FRElUICAgICAgICAgICAgIDogIkVkaXQiLAogICAgICAgICAgICAgICAgQkxDS19TQVZFICAgICAgICAgICAgIDogIlNhdmUiLAogICAgICAgICAgICAgICAgQkxDS19DTFNFICAgICAgICAgICAgIDogIkNsb3NlIiwKICAgICAgICAgICAgICAgIENOU0xfQVAgICAgICAgICAgICAgICA6ICJBdXRvcGxheSIsCiAgICAgICAgICAgICAgICBDTlNMX1JQVCAgICAgICAgICAgICAgOiAiUmVwZWF0IHZpZGVvIiwKICAgICAgICAgICAgICAgIENOU0xfU1ZUSCAgICAgICAgICAgICA6ICJPcGVuIHRodW1ibmFpbCIsCiAgICAgICAgICAgICAgICBDTlNMX1NTICAgICAgICAgICAgICAgOiAiVGFrZSBzY3JlZW5zaG90IiwKICAgICAgICAgICAgICAgIENOU0xfU1NfQ0xTICAgICAgICAgICA6ICJDTE9TRSIsCiAgICAgICAgICAgICAgICBDTlNMX1BQT1QgICAgICAgICAgICAgOiAiUG9wLW91dCB2aWRlbyIsCiAgICAgICAgICAgICAgICBDTlNMX0ZMQlIgICAgICAgICAgICAgOiAiRnVsbGJyb3dzZXIgbW9kZSIsCiAgICAgICAgICAgICAgICBDTlNMX0NJTk1fTUQgICAgICAgICAgOiAiQ2luZW1hIG1vZGUiLAogICAgICAgICAgICAgICAgQ05TTF9GUk1FICAgICAgICAgICAgIDogIkZyYW1lIGJ5IGZyYW1lIChTaGlmdCArIOKGkCBvciDihpIpIiwKICAgICAgICAgICAgICAgIFBMU1RfQVAgICAgICAgICAgICAgICA6ICJBdXRvcGxheSIsCiAgICAgICAgICAgICAgICBQTFNUX1JWUlMgICAgICAgICAgICAgOiAiUmV2ZXJzZSIsCiAgICAgICAgICAgICAgICBTSE9XX0NNVFMgICAgICAgICAgICAgOiAiU2hvdyBjb21tZW50cyIsCiAgICAgICAgICAgICAgICBISURFX0NNVFMgICAgICAgICAgICAgOiAiSGlkZSBjb21tZW50cyIsCiAgICAgICAgICAgICAgICBHTEJfSU1QUiAgICAgICAgICAgICAgOiAiSW1wb3J0L2V4cG9ydCBzZXR0aW5ncyIsCiAgICAgICAgICAgICAgICBHTEJfTE9DTF9MQU5HICAgICAgICAgOiAiQ2xpY2sgdG8gZWRpdCBZVCsgbGFuZ3VhZ2UiLAogICAgICAgICAgICAgICAgR0xCX0xPQ0xfTEFOR19DU1RNICAgIDogIkxvY2FsIiwKICAgICAgICAgICAgICAgIEdMQl9JTVBSX1NBVkUgICAgICAgICA6ICJTYXZlIGFuZCBsb2FkIiwKICAgICAgICAgICAgICAgIEdMQl9SU0VUICAgICAgICAgICAgICA6ICJSZXNldCIsCiAgICAgICAgICAgICAgICBHTEJfU1ZFICAgICAgICAgICAgICAgOiAiU2F2ZSIsCiAgICAgICAgICAgICAgICBHTEJfU1ZFX1NFVFMgICAgICAgICAgOiAiU2V0dGluZ3Mgc2F2ZWQiLAogICAgICAgICAgICAgICAgRlRSX0RFU0MgICAgICAgICAgICAgIDogIkZpbmQgb3V0IHdoYXQgdGhpcyBkb2VzIiwKICAgICAgICAgICAgICAgIEdFTiAgICAgICAgICAgICAgICAgICA6ICJHZW5lcmFsIiwKICAgICAgICAgICAgICAgIFZJRCAgICAgICAgICAgICAgICAgICA6ICJWaWRlbyIsCiAgICAgICAgICAgICAgICBDSE4gICAgICAgICAgICAgICAgICAgOiAiQ2hhbm5lbHMiLAogICAgICAgICAgICAgICAgQkxLICAgICAgICAgICAgICAgICAgIDogIkJsYWNrbGlzdCIsCiAgICAgICAgICAgICAgICBBQlQgICAgICAgICAgICAgICAgICAgOiAiQWJvdXQiLAogICAgICAgICAgICAgICAgSExQICAgICAgICAgICAgICAgICAgIDogIkhlbHAiLAogICAgICAgICAgICAgICAgRE5UICAgICAgICAgICAgICAgICAgIDogIkRvbmF0ZSIsCiAgICAgICAgICAgICAgICBHRU5fVFRMICAgICAgICAgICAgICAgOiAiR2VuZXJhbCBzZXR0aW5ncyIsCiAgICAgICAgICAgICAgICBHRU5fR0VOICAgICAgICAgICAgICAgOiAiR2VuZXJhbCIsCiAgICAgICAgICAgICAgICBHRU5fTFlUICAgICAgICAgICAgICAgOiAiTGF5b3V0IiwKICAgICAgICAgICAgICAgIEdFTl9MT0NMX0xBTkcgICAgICAgICA6ICJVc2UgbW9kaWZpZWQgWVQrIGxhbmd1YWdlIiwKICAgICAgICAgICAgICAgIEdFTl9QUE9UX09OICAgICAgICAgICA6ICJFbmFibGUgcG9wLW91dCBtb2RlIiwKICAgICAgICAgICAgICAgIEdFTl9EU0JMX0FEUyAgICAgICAgICA6ICJEaXNhYmxlIGFkdmVydGlzZW1lbnRzIG91dHNpZGUgdGhlIHZpZGVvIHBhZ2UiLAogICAgICAgICAgICAgICAgR0VOX0lORl9TQ1JMICAgICAgICAgIDogIkVuYWJsZSBpbmZpbml0ZSBzY3JvbGwgaW4gZmVlZHMiLAogICAgICAgICAgICAgICAgR0VOX1lUX0xPR09fTElOSyAgICAgIDogIllvdVR1YmUgbG9nbyByZWRpcmVjdHMgdG8gc3Vic2NyaXB0aW9ucyIsCiAgICAgICAgICAgICAgICBHRU5fU1VCX0xJU1QgICAgICAgICAgOiAiRW5hYmxlIHN1YnNjcmlwdGlvbiBwbGF5bGlzdCIsCiAgICAgICAgICAgICAgICBHRU5fUkVNX0FQVU4gICAgICAgICAgOiAiUmVtb3ZlIGF1dG9wbGF5IHVwIG5leHQiLAogICAgICAgICAgICAgICAgR0VOX1NQRl9PRkYgICAgICAgICAgIDogIkRpc2FibGUgU1BGIiwKICAgICAgICAgICAgICAgIEdFTl9ISURFX0ZUUiAgICAgICAgICA6ICJIaWRlIGZvb3RlciIsCiAgICAgICAgICAgICAgICBHRU5fQkxVRV9HTE9XICAgICAgICAgOiAiUmVtb3ZlIGJsdWUgZ2xvdyBhcm91bmQgY2xpY2tlZCBidXR0b25zIiwKICAgICAgICAgICAgICAgIEdFTl9IREVfUkVDTV9TREJSICAgICA6ICJIaWRlIHJlY29tbWVuZGVkIGNoYW5uZWxzIHNpZGViYXIiLAogICAgICAgICAgICAgICAgR0VOX0hERV9TUkNIX1NEQlIgICAgIDogIkhpZGUgc2VhcmNoIHJlc3VsdHMgc2lkZWJhciIsCiAgICAgICAgICAgICAgICBHRU5fSERFX0NITl9TREJSICAgICAgOiAiSGlkZSBjaGFubmVsIHNpZGViYXIiLAogICAgICAgICAgICAgICAgR0VOX0NNUFRfVFRMUyAgICAgICAgIDogIkNvbXBhY3QgdGl0bGVzIGluIGZlZWRzIiwKICAgICAgICAgICAgICAgIEdFTl9EU0JfSFZSQyAgICAgICAgICA6ICJEaXNhYmxlIGhvdmVyY2FyZHMiLAogICAgICAgICAgICAgICAgR0VOX0JUVFJfTlRGICAgICAgICAgIDogIkltcHJvdmVkIGJsdWUgbm90aWZpY2F0aW9uIGJveCIsCiAgICAgICAgICAgICAgICBHRU5fR1JJRF9TVUJTICAgICAgICAgOiAiR3JpZCBsYXlvdXQgaW4gc3Vic2NyaXB0aW9ucyIsCiAgICAgICAgICAgICAgICBHRU5fR1JJRF9TUkNIICAgICAgICAgOiAiR3JpZCBsYXlvdXQgaW4gc2VhcmNoIHJlc3VsdHMiLAogICAgICAgICAgICAgICAgVklEX1RUTCAgICAgICAgICAgICAgIDogIlZpZGVvIHNldHRpbmdzIiwKICAgICAgICAgICAgICAgIFZJRF9QTFIgICAgICAgICAgICAgICA6ICJQbGF5ZXIgc2V0dGluZ3MiLAogICAgICAgICAgICAgICAgVklEX1BMUl9MWVQgICAgICAgICAgIDogIlBsYXllciBsYXlvdXQiLAogICAgICAgICAgICAgICAgVklEX0RGTFRfUUxUWSAgICAgICAgIDogIkRlZmF1bHQgdmlkZW8gcXVhbGl0eToiLAogICAgICAgICAgICAgICAgVklEX0RGTFRfUUxUWV9BVVRPICAgIDogIkF1dG8iLAogICAgICAgICAgICAgICAgVklEX0RGTFRfUUxUWV9UTlkgICAgIDogIjE0NHAiLAogICAgICAgICAgICAgICAgVklEX0RGTFRfUUxUWV9TTUwgICAgIDogIjI0MHAiLAogICAgICAgICAgICAgICAgVklEX0RGTFRfUUxUWV9NRE0gICAgIDogIjM2MHAiLAogICAgICAgICAgICAgICAgVklEX0RGTFRfUUxUWV9MUkcgICAgIDogIjQ4MHAiLAogICAgICAgICAgICAgICAgVklEX0RGTFRfUUxUWV83MjAgICAgIDogIjcyMHAiLAogICAgICAgICAgICAgICAgVklEX0RGTFRfUUxUWV8xMDgwICAgIDogIjEwODBwIiwKICAgICAgICAgICAgICAgIFZJRF9ERkxUX1FMVFlfMTQ0MCAgICA6ICIxNDQwcCIsCiAgICAgICAgICAgICAgICBWSURfREZMVF9RTFRZXzIxNjAgICAgOiAiMjE2MHAgKDRrKSIsCiAgICAgICAgICAgICAgICBWSURfREZMVF9RTFRZXzI4ODAgICAgOiAiMjg4MHAgKDVrKSIsCiAgICAgICAgICAgICAgICBWSURfREZMVF9RTFRZX09SSUcgICAgOiAiNDMyMHAgKDhrKSIsCiAgICAgICAgICAgICAgICBWSURfUExSX0FMVklTICAgICAgICAgOiAiUGxheWVyIGFsd2F5cyB2aXNpYmxlIHdoZW4gcmVhZGluZyBjb21tZW50cyIsCiAgICAgICAgICAgICAgICBWSURfUExSX0FMVklTX1dEVEggICAgOiAiRmxvYXRpbmcgcGxheWVyIHdpZHRoIiwKICAgICAgICAgICAgICAgIFZJRF9QTFJfQUxWSVNfU0NSTF9UT1A6ICJHbyB0byB0b3AiLAogICAgICAgICAgICAgICAgVklEX1BMUl9BVFBMICAgICAgICAgIDogIkF1dG9wbGF5IHZpZGVvcyIsCiAgICAgICAgICAgICAgICBWSURfTEFZVCAgICAgICAgICAgICAgOiAiTGF5b3V0IiwKICAgICAgICAgICAgICAgIFZJRF9WSURfQ05UICAgICAgICAgICA6ICJTaG93IGxpbmsgd2l0aCBudW1iZXIgb2YgdXBsb2FkZWQgdmlkZW9zIiwKICAgICAgICAgICAgICAgIFZJRF9QT1NUX1RJTUUgICAgICAgICA6ICJTaG93IGhvdyBsb25nIHRoZSB2aWRlbyBoYXMgYmVlbiBwdWJsaXNoZWQiLAogICAgICAgICAgICAgICAgVklEX0hJREVfREVUTFMgICAgICAgIDogIkhpZGUgdmlkZW8gZGV0YWlscyIsCiAgICAgICAgICAgICAgICBWSURfSElERV9DT01TICAgICAgICAgOiAiQ29tbWVudCBzZWN0aW9uIiwKICAgICAgICAgICAgICAgIFZJRF9ISURFX0NPTVNfU0hPVyAgICA6ICJTaG93IiwKICAgICAgICAgICAgICAgIFZJRF9ISURFX0NPTVNfSElERSAgICA6ICJIaWRlIiwKICAgICAgICAgICAgICAgIFZJRF9ISURFX0NPTVNfUkVNICAgICA6ICJSZW1vdmUiLAogICAgICAgICAgICAgICAgVklEX0VORF9TSFJFICAgICAgICAgIDogIkRpc2FibGUgc2hhcmUgcGFuZWwgd2hlbiB2aWRlbyBlbmRzIiwKICAgICAgICAgICAgICAgIFZJRF9QTFNUICAgICAgICAgICAgICA6ICJQbGF5bGlzdHMiLAogICAgICAgICAgICAgICAgVklEX1BMU1RfQVRQTCAgICAgICAgIDogIkVuYWJsZSBwbGF5bGlzdCBhdXRvcGxheSBjb250cm9sIiwKICAgICAgICAgICAgICAgIFZJRF9QTFNUX1JWUlMgICAgICAgICA6ICJFbmFibGUgcmV2ZXJzZSBwbGF5bGlzdCBjb250cm9sIiwKICAgICAgICAgICAgICAgIFZJRF9QTFJfU0laRV9NRU0gICAgICA6ICJNZW1vcml6ZSBwbGF5ZXIgbW9kZSIsCiAgICAgICAgICAgICAgICBWSURfVk9MX1dIRUVMICAgICAgICAgOiAiQ2hhbmdlIHZvbHVtZSB3aXRoIG1vdXNlIHdoZWVsIiwKICAgICAgICAgICAgICAgIFZJRF9QTFJfVk9MX01FTSAgICAgICA6ICJNZW1vcml6ZSBhdWRpbyB2b2x1bWUiLAogICAgICAgICAgICAgICAgVklEX1BMUl9WT0xfTEROICAgICAgIDogIkRpc2FibGUgWW91VHViZSBsb3VkbmVzcyBub3JtYWxpc2F0aW9uIiwKICAgICAgICAgICAgICAgIFZJRF9QTFJfQURTICAgICAgICAgICA6ICJEaXNhYmxlIGFkdmVydGlzZW1lbnRzIGluIHRoZSB2aWRlbyBwYWdlIiwKICAgICAgICAgICAgICAgIFZJRF9QTFJfQUxBQ1QgICAgICAgICA6ICJQbGF5ZXIgc2hvcnRjdXRzIGFsd2F5cyBhY3RpdmUiLAogICAgICAgICAgICAgICAgVklEX1NVQl9BRFMgICAgICAgICAgIDogIkVuYWJsZSBhZHZlcnRpc2VtZW50cyBvbmx5IGluIHZpZGVvcyBmcm9tIHN1YnNjcmliZWQgY2hhbm5lbHMiLAogICAgICAgICAgICAgICAgVklEX1BMUl9BTlRTICAgICAgICAgIDogIkRpc2FibGUgYW5ub3RhdGlvbnMiLAogICAgICAgICAgICAgICAgVklEX1BMUl9IRlIgICAgICAgICAgIDogIkRpc2FibGUgSEZSICg2MGZwcykiLAogICAgICAgICAgICAgICAgVklEX1BMUl9IVE1MNSAgICAgICAgIDogIlVzZSB0aGUgSFRNTDUgcGxheWVyIHdoZW4gcG9zc2libGUiLAogICAgICAgICAgICAgICAgVklEX1BMUl9DQyAgICAgICAgICAgIDogIkRpc2FibGUgc3VidGl0bGVzIGFuZCBDQyIsCiAgICAgICAgICAgICAgICBWSURfUExSX0lORk8gICAgICAgICAgOiAiRW5hYmxlIGluZm8gYmFyIHdpdGggd2F0Y2ggbGF0ZXIgYnV0dG9uIiwKICAgICAgICAgICAgICAgIFZJRF9QTFJfRklUICAgICAgICAgICA6ICJGaXQgdG8gcGFnZSBpbiB0aGVhdGVyIG1vZGUiLAogICAgICAgICAgICAgICAgVklEX1BMUl9GSVRfV0RUSCAgICAgIDogIkZpdCB0byBwYWdlIG1heCB3aWR0aDoiLAogICAgICAgICAgICAgICAgVklEX1BMUl9EWU5fU0laRSAgICAgIDogIkRpc2FibGUgZHluYW1pYyBwbGF5ZXIgc2l6ZSBpbiBkZWZhdWx0IHZpZXciLAogICAgICAgICAgICAgICAgVklEX0RFU0NfU0hSVCAgICAgICAgIDogIlNob3J0IHZpZGVvIGRlc2NyaXB0aW9uIGJ1dHRvbnMiLAogICAgICAgICAgICAgICAgVklEX1RUTF9DTVBUICAgICAgICAgIDogIkNvbXBhY3QgdGl0bGUgaW4gdmlkZW8gZGVzY3JpcHRpb24iLAogICAgICAgICAgICAgICAgVklEX1BQT1RfU1ogICAgICAgICAgIDogIlBvcC1vdXQgcGxheWVyIHNpemUiLAogICAgICAgICAgICAgICAgVklEX0xBWVRfQVVUT19QTkwgICAgIDogIkF1dG8gZXhwYW5kIHZpZGVvIGRlc2NyaXB0aW9uIiwKICAgICAgICAgICAgICAgIEdFTl9DSE5fREZMVF9QQUdFICAgICA6ICJEZWZhdWx0IGNoYW5uZWwgcGFnZToiLAogICAgICAgICAgICAgICAgR0VOX0NITl9ERkxUX1BBR0VfREZMVDogIkRlZmF1bHQiLAogICAgICAgICAgICAgICAgR0VOX0NITl9ERkxUX1BBR0VfVklEIDogIlZpZGVvcyIsCiAgICAgICAgICAgICAgICBHRU5fQ0hOX0RGTFRfUEFHRV9QTCAgOiAiUGxheWxpc3RzIiwKICAgICAgICAgICAgICAgIEdFTl9DSE5fREZMVF9QQUdFX0NITiA6ICJDaGFubmVscyIsCiAgICAgICAgICAgICAgICBHRU5fQ0hOX0RGTFRfUEFHRV9ESVNDOiAiRGlzY3Vzc2lvbiIsCiAgICAgICAgICAgICAgICBHRU5fQ0hOX0RGTFRfUEFHRV9BQlQgOiAiQWJvdXQiLAogICAgICAgICAgICAgICAgQkxLX1RUTCAgICAgICAgICAgICAgIDogIkJsYWNrbGlzdCBzZXR0aW5ncyIsCiAgICAgICAgICAgICAgICBCTEtfQkxLICAgICAgICAgICAgICAgOiAiQmxhY2tsaXN0IiwKICAgICAgICAgICAgICAgIEJMS19PTiAgICAgICAgICAgICAgICA6ICJFbmFibGUgYmxhY2tsaXN0IiwKICAgICAgICAgICAgICAgIEFCVF9UVEwgICAgICAgICAgICAgICA6ICJJbmZvcm1hdGlvbiBhbmQgdXNlZnVsIGxpbmtzIiwKICAgICAgICAgICAgICAgIEFCVF9USEtTICAgICAgICAgICAgICA6ICJUaGFua3MgdG86IiwKICAgICAgICAgICAgICAgIEFCVF9USEtTX1lFUFBIQSAgICAgICA6ICIsIHdobydzIHdvcmsgaW5zcGlyZWQgdGhlIGNyZWF0aW9uIG9mIHRoaXMgcHJvamVjdCwgd2l0aG91dCB3aG9tIG5vbmUgb2YgdGhpcyB3b3VsZCBleGlzdCB0b2RheS4iLAogICAgICAgICAgICAgICAgQUJUX1RIS1NfVVNFUlNDUklQVCAgIDogIiBmb3IgbWFraW5nIHRoZSB0YXNrIG9mIGRldmVsb3BpbmcgYW5kIHNoaXBwaW5nIHRoaXJkIHBhcnR5IHNvZnR3YXJlIGluY3JlZGlibHkgZWFzaWVyLiIsCiAgICAgICAgICAgICAgICBBQlRfVEhLU19TVEFDS09WICAgICAgOiAiIGZvciBhbGwgb2YgaXRzIHByaWNlbGVzcyBpbmZvcm1hdGlvbiB3aGljaCBncmVhdGx5IGNvbnRyaWJ1dGVzIGZvciBzb2Z0d2FyZSBkZXZlbG9wbWVudC4iLAogICAgICAgICAgICAgICAgQUJUX0lORk8gICAgICAgICAgICAgIDogIk9mZmljaWFsIHBhZ2VzIiwKICAgICAgICAgICAgICAgIEFCVF9MTktfR0hCICAgICAgICAgICA6ICJHaXRIdWIiLAogICAgICAgICAgICAgICAgQUJUX0xOS19HUkZLICAgICAgICAgIDogIkdyZWFzeSBGb3JrIiwKICAgICAgICAgICAgICAgIEFCVF9MTktfT1BOVSAgICAgICAgICA6ICJPcGVuVXNlckpTIiwKICAgICAgICAgICAgICAgIFdMQ00gICAgICAgICAgICAgICAgICA6ICJUaGFuayB5b3UgZm9yIGluc3RhbGxpbmcgWW91VHViZSsiLAogICAgICAgICAgICAgICAgV0xDTVNUUlQgICAgICAgICAgICAgIDogIllvdSBjYW4gY3VzdG9taXplIHlvdXIgc2V0dGluZ3MgYnkgY2xpY2tpbmcgdGhlIGJ1dHRvbiBhYm92ZSIsCiAgICAgICAgICAgICAgICBXTENNRlRSUyAgICAgICAgICAgICAgOiAiQ2xpY2sgaGVyZSB0byBzZWUgYWxsIHRoZSBmZWF0dXJlcyIsCiAgICAgICAgICAgICAgICBMT0NBTEUgICAgICAgICAgICAgICAgOiAiRW5nbGlzaCAoVVMpIgogICAgICAgICAgICB9OwogICAgICAgICAgICBpZiAoIXVzZXJfc2V0dGluZ3MgfHwgT2JqZWN0LmtleXModXNlcl9zZXR0aW5ncykubGVuZ3RoIDwgMSkgewogICAgICAgICAgICAgICAgdXNlcl9zZXR0aW5ncyA9IGRlZmF1bHRfc2V0dGluZ3M7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjaGVja05ld0ZlYXR1cmVzKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHdpbmRvdy5jaHJvbWUpIHsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCJsb2FkIiwgc2NyaXB0RXhpdCwgdHJ1ZSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJhZnRlcnNjcmlwdGV4ZWN1dGUiLCBzY3JpcHRFeGl0KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIWlzX3VzZXJzY3JpcHQgJiYgIXdpbmRvdy5jaHJvbWUgJiYgIXVzZXJfc2V0dGluZ3MubWlncmF0aW9uX2luc3RydWN0aW9ucykgewogICAgICAgICAgICAgICAgbWlncmF0aW9uSW5zdHJ1Y3Rpb25zKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigic3BmZG9uZSIsIG1haW4pOwogICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJzcGZyZXF1ZXN0IiwgcmVxdWVzdCk7CiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoInJlYWR5c3RhdGVjaGFuZ2UiLCBtYWluLCB0cnVlKTsKICAgICAgICAgICAgWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLm9wZW4gPSBjaGVja1hIUihYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUub3Blbik7CiAgICAgICAgICAgIHdpbmRvdy5vbllvdVR1YmVQbGF5ZXJSZWFkeSA9IHNoYXJlQXBpKHdpbmRvdy5vbllvdVR1YmVQbGF5ZXJSZWFkeSk7CiAgICAgICAgICAgIHdpbmRvdy5tYXRjaE1lZGlhID0gZmFsc2U7CiAgICAgICAgICAgIG1haW4oKTsKICAgICAgICB9LAogICAgICAgIGNvbnRlbnRTY3JpcHRNZXNzYWdlczogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZhciBrZXkxLCBrZXkyLCBnYXRlLCBzZXRzLCBsb2NzLCBvYnNlcnZlcjsKICAgICAgICAgICAga2V5MSA9ICJwYXJzZW5kIjsKICAgICAgICAgICAga2V5MiA9ICJnZXRsb2NhbGUiOwogICAgICAgICAgICBnYXRlID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50OwogICAgICAgICAgICBzZXRzID0gSlNPTi5wYXJzZShnYXRlLmRhdGFzZXRba2V5MV0gfHwgbnVsbCk7CiAgICAgICAgICAgIGxvY3MgPSBnYXRlLmRhdGFzZXRba2V5Ml0gfHwgbnVsbDsKICAgICAgICAgICAgaWYgKCFnYXRlLmNvbnRlbnRzY3JpcHQpIHsKICAgICAgICAgICAgICAgIGdhdGUuY29udGVudHNjcmlwdCA9IHRydWU7CiAgICAgICAgICAgICAgICBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKHBhcnRpY2xlLmNvbnRlbnRTY3JpcHRNZXNzYWdlcyk7CiAgICAgICAgICAgICAgICByZXR1cm4gb2JzZXJ2ZXIub2JzZXJ2ZShnYXRlLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVGaWx0ZXI6IFsiZGF0YS0iICsga2V5MSwgImRhdGEtIiArIGtleTJdCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoc2V0cykgewogICAgICAgICAgICAgICAgaWYgKHBhcnRpY2xlLmlzX3VzZXJzY3JpcHQpIHsKICAgICAgICAgICAgICAgICAgICBwYXJ0aWNsZS5HTV9zZXRWYWx1ZShwYXJ0aWNsZS5pZCwgSlNPTi5zdHJpbmdpZnkoc2V0cykpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5zZXQoe3BhcnRpY2xlU2V0dGluZ3M6IHNldHN9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoImRhdGEtcGFyc2VuZCIpOwogICAgICAgICAgICB9IGVsc2UgaWYgKGxvY3MpIHsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kYXRhc2V0LnNldGxvY2FsZSA9IGNocm9tZS5pMThuLmdldE1lc3NhZ2UobG9jcyk7CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGZpbHRlckNocm9tZUtleXM6IGZ1bmN0aW9uKGtleXMpIHsKICAgICAgICAgICAgaWYgKGtleXNbcGFydGljbGUuaWRdICYmIGtleXNbcGFydGljbGUuaWRdLm5ld192YWx1ZSkgewogICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRhdGFzZXQucGFycmVjZWl2ZSA9IEpTT04uc3RyaW5naWZ5KAogICAgICAgICAgICAgICAgICAgIChrZXlzW3BhcnRpY2xlLmlkXS5uZXdfdmFsdWUgJiYga2V5c1twYXJ0aWNsZS5pZF0ubmV3X3ZhbHVlW3BhcnRpY2xlLmlkXSkgfHwga2V5c1twYXJ0aWNsZS5pZF0ubmV3X3ZhbHVlIHx8IHt9CiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBtYWluOiBmdW5jdGlvbihldmVudCkgewogICAgICAgICAgICB2YXIgaG9sZGVyOwogICAgICAgICAgICBpZiAoIWV2ZW50ICYmIHBhcnRpY2xlLmlzX3VzZXJzY3JpcHQpIHsKICAgICAgICAgICAgICAgIGV2ZW50ID0gSlNPTi5wYXJzZShwYXJ0aWNsZS5HTV9nZXRWYWx1ZShwYXJ0aWNsZS5pZCwgInt9IikpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChldmVudCkgewogICAgICAgICAgICAgICAgZXZlbnQgPSBKU09OLnN0cmluZ2lmeShldmVudFtwYXJ0aWNsZS5pZF0gfHwgZXZlbnQpOwogICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRhdGFzZXQudXNlcl9zZXR0aW5ncyA9IGV2ZW50OwogICAgICAgICAgICAgICAgaWYgKHBhcnRpY2xlLmlzX3VzZXJzY3JpcHQpIHsKICAgICAgICAgICAgICAgICAgICBob2xkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJsaW5rIik7CiAgICAgICAgICAgICAgICAgICAgaG9sZGVyLnJlbCA9ICJzdHlsZXNoZWV0IjsKICAgICAgICAgICAgICAgICAgICBob2xkZXIudHlwZSA9ICJ0ZXh0L2NzcyI7CiAgICAgICAgICAgICAgICAgICAgaG9sZGVyLmhyZWYgPSAiaHR0cHM6Ly9wYXJ0aWNsZWNvcmUuZ2l0aHViLmlvL1BhcnRpY2xlL3N0eWxlc2hlZXRzL1lvdVR1YmVQbHVzLmNzcyI7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKGhvbGRlcik7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdy5jaHJvbWUpIHsKICAgICAgICAgICAgICAgICAgICBob2xkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzdHlsZSIpOwogICAgICAgICAgICAgICAgICAgIGhvbGRlci50ZXh0Q29udGVudCA9IC8vCiAgICAgICAgICAgICAgICAgICAgICAgIGAueXRwbHVzX3Nwcml0ZSwKICAgICAgICAgICAgICAgICAgICAgICAgI0ROVDpob3ZlcjphZnRlciwKICAgICAgICAgICAgICAgICAgICAgICAgI3BsYXllci1jb25zb2xlID4gZGl2LAogICAgICAgICAgICAgICAgICAgICAgICAjUC1jb250ZW50IGlucHV0W3R5cGU9J3JhZGlvJ106Y2hlY2tlZCArIGxhYmVsOmJlZm9yZSwKICAgICAgICAgICAgICAgICAgICAgICAgI1AtY29udGVudCBpbnB1dFt0eXBlPSdjaGVja2JveCddOmNoZWNrZWQgKyBsYWJlbDpiZWZvcmV7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoY2hyb21lLWV4dGVuc2lvbjovL2AgKyB3aW5kb3cuY2hyb21lLnJ1bnRpbWUuaWQgKyBgL2ltYWdlcy9zcHJpdGUucG5nKTsKICAgICAgICAgICAgICAgICAgICAgICAgfWA7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKGhvbGRlcik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBob2xkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKTsKICAgICAgICAgICAgICAgIGhvbGRlci50ZXh0Q29udGVudCA9ICIoIiArIHBhcnRpY2xlLmluamVjdCArICIoIiArIHBhcnRpY2xlLmlzX3VzZXJzY3JpcHQgKyAiKSkiOwogICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKGhvbGRlcik7CiAgICAgICAgICAgICAgICBpZiAoIXBhcnRpY2xlLmlzX3VzZXJzY3JpcHQpIHsKICAgICAgICAgICAgICAgICAgICBjaHJvbWUuc3RvcmFnZS5vbkNoYW5nZWQuYWRkTGlzdGVuZXIocGFydGljbGUuZmlsdGVyQ2hyb21lS2V5cyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGluaTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHBhcnRpY2xlLmlkID0gInBhcnRpY2xlU2V0dGluZ3MiOwogICAgICAgICAgICBwYXJ0aWNsZS5pc191c2Vyc2NyaXB0ID0gdHlwZW9mIEdNX2luZm8gPT09ICJvYmplY3QiID8gdHJ1ZSA6IGZhbHNlOwogICAgICAgICAgICBpZiAocGFydGljbGUuaXNfdXNlcnNjcmlwdCkgewogICAgICAgICAgICAgICAgcGFydGljbGUuR01fZ2V0VmFsdWUgPSBHTV9nZXRWYWx1ZTsKICAgICAgICAgICAgICAgIHBhcnRpY2xlLkdNX3NldFZhbHVlID0gR01fc2V0VmFsdWU7CiAgICAgICAgICAgICAgICBwYXJ0aWNsZS5tYWluKCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5nZXQocGFydGljbGUuaWQsIHBhcnRpY2xlLm1haW4pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcnRpY2xlLmNvbnRlbnRTY3JpcHRNZXNzYWdlcygpOwogICAgICAgIH0KICAgIH07CiAgICBwYXJ0aWNsZS5pbmkoKTsKfSgpKTs="},{"name":"iZhihu","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["http://www.zhihu.com/*","https://www.zhihu.com/*"],"orig_matches":["http://www.zhihu.com/*","https://www.zhihu.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1475240734352,"data":{}},"enabled":true,"position":8,"file_url":"https://greasyfork.org/scripts/350-izhihu/code/iZhihu.user.js","uuid":"a3402b39-10fd-40e9-9ee5-c72302d817c7","source":""}],"settings":{"configMode":100,"editor_autoLint":true,"editor_autoLintMaxLen":"50000","editor_autoSave":false,"editor_easySave":true,"editor_electricChars":true,"editor_enabled":true,"editor_fontSize":"150","editor_highlightTrailingWhitespace":true,"editor_indentUnit":"4","editor_indentWithTabs":"spaces","editor_keyMap":"vim","editor_lineWrapping":false,"editor_tabMode":"smart","editor_theme":"monokai","enabled":true,"i18n":"zh_CN","script_blacklist_server":[{"rules":["/https?:\\/\\/userscripts\\.org\\/scripts\\/(source|version)/(102614).*\\.user\\.js/"],"severity":"2"},{"name":"SaveFrom.net helper","reason":"Shows advertisements","rules":["/https?:\\/\\/sf-addon\\.com\\/.*\\/.*\\.user\\.js/","/https?:\\/\\/.*\\.sf-helper\\.com\\/.*\\.user\\.js/"],"severity":"3"}]}}